{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///SlashCanvas2.js","webpack:///webpack/bootstrap 752ec6870fb8be5195ab","webpack:///./src/slashCanvas2/App.js","webpack:///src/lib/matter.js","webpack:///src/lib/jquery-2.1.3.min.js","webpack:///(webpack)/buildin/amd-options.js","webpack:///src/common/Sound.js","webpack:///src/slashCanvas2/model/Block.js","webpack:///src/common/svgUtil.js","webpack:///src/common/mathUtil.js","webpack:///src/common/canvasUtil.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_RESULT__","require","Matter","$","Engine","Render","World","Bodies","Sound","Body","Svg","MouseConstraint","Block","mathUtil","canvasUtil","Constructor","rootDomId","option","engine","render","canvas","ctx","blockList","slashLineList","width","height","gravityX","isNaN","gravityY","sound","svgSource","svgScale","svgShift","x","y","slashLineColor","slashMovementPower","prototype","init","self","initWorld","req","XMLHttpRequest","open","onload","dom_parser","DOMParser","svgDom","parseFromString","responseText","e","console","log","tagG","getElementsByTagName","tagPathList","tagRectList","bodyList","i","block","length","loadSvgPath","push","concat","body","loadSvgRect","add","world","bindCanvasEvent","send","create","element","document","getElementById","options","wireframes","gravity","resetBodies","run","Events","on","getContext","forEach","onPaint","strokeStyle","globalAlpha","lineWidth","line","start","s","end","beginPath","moveTo","lineTo","stroke","life","filter","clear","frameWidth","frameHeight","offset","rectangle","isStatic","target","slash","getCursorPoint","preventDefault","vec","vecSub2D","slashLength","length2D","play","scale","vecMult2D","p1","p2","vecAdd2D","undefined","f","t","n","r","o","u","a","Error","code","l",1,"Vertices","Vector","Sleeping","Common","Bounds","Axes","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","defaults","nextId","type","label","parts","angle","vertices","fromPath","position","force","torque","positionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","velocity","angularVelocity","isSensor","isSleeping","motion","sleepThreshold","density","restitution","friction","frictionStatic","frictionAir","collisionFilter","category","mask","group","slop","timeScale","visible","opacity","sprite","xScale","yScale","xOffset","yOffset","extend","_initProperties","nextGroup","isNonColliding","nextCategory","set","bounds","positionPrev","clone","anglePrev","parent","rotate","axes","update","area","mass","inertia","defaultFillStyle","choose","defaultStrokeStyle","shadeColor","fillStyle","min","max","settings","value","property","hasOwnProperty","setStatic","setMass","setDensity","setInertia","setVertices","setPosition","setAngle","setVelocity","setAngularVelocity","setParts","part","Infinity","inverseMass","inverseInertia","fromVertices","centre","translate","autoHull","slice","clockwiseSort","hull","hullCentre","total","_totalProperties","delta","sub","rotateAbout","magnitude","Math","abs","translation","rotation","scaleX","scaleY","point","circleRadius","deltaTime","correction","deltaTimeSquared","pow","velocityPrevX","velocityPrevY","applyForce","properties","mult","div","../core/Common","../core/Sleeping","../geometry/Axes","../geometry/Bounds","../geometry/Vector","../geometry/Vertices","../render/Render",2,"Composite","isModified","bodies","constraints","composites","setModified","composite","updateParents","updateChildren","childComposite","object","objects","trigger","obj","addBody","addConstraint","addComposite","constraint","remove","deep","removeBody","removeConstraint","removeComposite","compositeA","compositeB","indexOf","removeCompositeAt","splice","removeBodyAt","removeConstraintAt","keepStatic","allBodies","allConstraints","allComposites","get","toString","move","rebase","recursive","cos","sin","dx","dy","../core/Events","./Body",3,"../constraint/Constraint","./Composite",4,"Contact","vertex","normalImpulse","tangentImpulse","index",5,"Detector","SAT","Pair","collisions","broadphasePairs","pairsTable","pairs","table","bodyA","bodyB","canCollide","overlaps","j","partA","k","partB","previousCollision","pairId","pair","isActive","collision","collides","collided","filterA","filterB","./Pair","./SAT",6,"Grid","controller","detector","buckets","pairsList","bucketWidth","bucketHeight","grid","forceUpdate","col","row","bucket","bucketId","gridChanged","newRegion","_getRegion","region","union","_regionUnion","startCol","endCol","startRow","endRow","_getBucketId","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","_createActivePairsList","regionA","regionB","_createRegion","floor","column","pairKeys","keys","./Detector",7,"timestamp","parentA","parentB","contacts","activeContacts","separation","timeCreated","timeUpdated","supports","support","contactId","contact","depth","setActive","./Contact",8,"Pairs","_pairMaxIdleLife","list","collisionStart","collisionActive","collisionEnd","activePairIds","removeOld","pairIndex","indexesToRemove",9,"Query","ray","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","outside","result","contains","../factory/Bodies",10,"Resolver","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","preSolvePosition","activeCount","solvePosition","normal","bodyBtoA","contactShare","tempA","_temp","tempB","tempC","tempD","penetration","dot","postSolvePosition","preSolveVelocity","tangent","contactVertex","impulse","cross","solveVelocity","timeScaleSquared","tempE","offsetA","offsetB","velocityPointA","perp","velocityPointB","relativeVelocity","normalVelocity","tangentVelocity","tangentSpeed","tangentVelocityDirection","sign","normalForce","clamp","maxFriction","oAcN","oBcN","share","contactNormalImpulse","contactTangentImpulse",11,"overlapAB","overlapBA","minOverlap","prevCol","canReusePrevCol","axisBodyA","axisBody","axisBodyB","axisNumber","_overlapAxes","reused","overlap","axis","neg","verticesB","_findSupports","verticesA","projectionA","projectionB","Number","MAX_VALUE","_projectToAxis","projection","distance","vertexA","vertexB","nearestDistance","vertexToBody","bodyAPosition","prevIndex","nextIndex",12,"Constraint","_minLength","_minDifference","pointA","pointB","initialPointA","initialPointB","stiffness","angularStiffness","angleA","angleB","solveAll","solve","pointAWorld","pointBWorld","currentLength","difference","oAn","oBn","bodyADenom","bodyBDenom","postSolveAll",13,"Mouse","mouse","mouseConstraint","_triggerEvents","button","mouseEvents","sourceEvents","mousemove","mousedown","mouseup","clearSourceEvents","../body/Composite","../collision/Detector","../core/Mouse","./Constraint",14,"_nextId","_seed","argsStart","args","deepClone","Array","arguments","source","prop","constructor","Object","key","values","color","percent","colorInteger","parseInt","amount","round","R","B","G","shuffle","array","random","temp","choices","isElement","HTMLElement","nodeType","style","ownerDocument","isArray","now","performance","window","webkitNow","msNow","oNow","mozNow","Date","_seededRandom","colorToNumber","colorString","replace","charAt","message","warn","haystack","needle",15,"positionIterations","velocityIterations","constraintIterations","enableSleeping","events","timing","broadphase","renderDefaults","metrics","extended","event","_bodiesApplyGravity","_bodiesUpdate","afterCollisions","_bodiesClearForces","merge","engineA","engineB","gravityScale","worldBounds","../body/Body","../body/World","../collision/Grid","../collision/Pairs","../collision/Resolver","./Common","./Events","./Metrics","./Sleeping",16,"eventNames","callback","name","names","split","off","join","callbacks","newCallbacks","eventClone","apply",17,18,"absolute","mousedownPosition","mouseupPosition","wheelDelta","pixelRatio","getAttribute","mousewheel","_getRelativeMousePosition","touches","changedTouches","detail","setElement","addEventListener","setOffset","setScale","elementBounds","getBoundingClientRect","rootNode","documentElement","parentNode","scrollX","pageXOffset","scrollLeft","scrollY","pageYOffset","scrollTop","pageX","left","pageY","top","clientWidth","clientHeight",19,"Runner","_requestAnimationFrame","_cancelAnimationFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","setTimeout","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","fps","deltaSampleSize","counterTimestamp","frameCounter","deltaHistory","timePrev","timeScalePrev","frameRequestId","isFixed","enabled","runner","deltaMin","deltaMax","time","tick","stop","./Engine",20,"_motionWakeThreshold","_motionSleepThreshold","_minBias","timeFactor","minMotion","maxMotion","sleepCounter","sleepingBody","movingBody","wasSleeping",21,"chamfer","radius","quality","qualityMin","qualityMax","trapezoid","slope","verticesPath","roof","x1","x2","x3","circle","maxSides","sides","ceil","polygon","theta","PI","path","xx","yy","toFixed","vertexSets","flagInternal","removeCollinear","minimumArea","isConvex","v","z","decomp","concave","Polygon","makeCCW","removeCollinearPoints","decomposed","quickDecomp","chunk","chunkVertices","coincident_max_dist","pav","pbv","da","magnitudeSquared","db","isInternal",22,"Composites","stack","columns","rows","columnGap","rowGap","lastBody","maxHeight","bodyHeight","bodyWidth","chain","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","bodyBWidth","mesh","crossBrace","bodyC","pyramid","actualRows","lastBodyWidth","newtonsCradle","number","size","car","wheelSize","wheelBase","wheelAOffset","wheelBOffset","wheelYOffset","wheelA","wheelB","axelA","axelB","softBody","particleRadius","particleOptions","constraintOptions","./Bodies",23,"normalise","gradient",24,"boundsA","boundsB","vector","shift","deltaX","deltaY",25,"pathToVertices","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","segmentIndex","lx","ly","points","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","pathSegTypeAsLetter","toUpperCase","_svgPathToAbsolute","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","getPointAtLength","x0","y0","y1","y2","segs","len","seg","test","replaceItem","createSVGPathSegMovetoAbs","createSVGPathSegLinetoAbs","createSVGPathSegLinetoHorizontalAbs","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag",26,"sqrt","output","vectorA","vectorB","cross3","vectorC","scalar","negate","atan2",27,"pathPattern","match","parseFloat","mean","average","signed","numerator","denominator","vertice","nextVertice","newVertices","prevVertex","nextVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","radiusVector","midNormal","scaledVertex","precision","alpha","acos","sort","flag","upper","lower","pop",28,"version","RenderPixi","../collision/Contact","../collision/Pair","../collision/Query","../collision/SAT","../constraint/MouseConstraint","../core/Engine","../core/Metrics","../core/Runner","../factory/Composites","../geometry/Svg","../render/RenderPixi",29,"background","wireframeBackground","hasBounds","showSleeping","showDebug","showBroadphase","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showAngleIndicator","showIds","showShadows","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","_createCanvas","context","textures","setPixelRatio","appendChild","loop","_getPixelRatio","setAttribute","currentBackground","_applyBackground","globalCompositeOperation","fillRect","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","bodyConvexHulls","bodyWireframes","bodyBounds","bodyAxes","bodyPositions","bodyVelocity","bodyIds","separations","vertexNumbers","mousePosition","debug","setTransform","space","debugTimestamp","text","debugString","font","fillText","bodyShadows","arc","closePath","distanceX","distanceY","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","fill","texture","_getTexture","drawImage","rect","normalPosX","normalPosY","bucketKeys","inspector","selected","item","data","setLineDash","selectStart","selectBounds","createElement","oncontextmenu","onselectstart","devicePixelRatio","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","imagePath","image","Image","src","cssBackground","backgroundSize",30,"renderer","container","spriteContainer","pixiOptions","transparent","view","antialias","backgroundColor","PIXI","WebGLRenderer","Container","sprites","primitives","addChild","children","removeChild","bgSprite","addChildAt","setBackground","isColor","Sprite","constraintRender","primitiveId","primitive","Graphics","beginFill","lineStyle","endFill","bodyRender","spriteId","_createBodySprite","_createBodyPrimitive","initialAngle","texturePath","anchor","strokeStyleIndicator","strokeStyleWireframe","strokeStyleWireframeIndicator","Texture","fromImage","__WEBPACK_AMD_DEFINE_ARRAY__","b","isWindow","isFunction","grep","d","w","g","D","F","each","E","I","removeEventListener","ready","K","defineProperty","cache","expando","uid","P","O","toLowerCase","N","parseJSON","M","Z","_","activeElement","jb","nodeName","firstChild","kb","lb","gb","exec","removeAttribute","mb","L","nb","h","hasData","access","handle","ob","querySelectorAll","pb","T","checked","defaultValue","sb","appendTo","getDefaultComputedStyle","display","css","detach","tb","rb","qb","contentDocument","write","close","xb","wb","getPropertyValue","vb","ub","minWidth","maxWidth","yb","Fb","Eb","Gb","Ab","Hb","Ib","offsetWidth","offsetHeight","boxSizingReliable","Jb","S","Kb","Sb","Lb","Tb","Ub","Rb","Vb","q","queue","_queueHooks","unqueued","empty","fire","always","overflow","overflowX","overflowY","Nb","isEmptyObject","hidden","show","done","hide","Wb","camelCase","cssHooks","expand","Xb","Qb","Deferred","elem","startTime","duration","tweens","notifyWith","resolveWith","promise","props","opts","specialEasing","originalProperties","originalOptions","createTween","Tween","easing","rejectWith","map","fx","timer","anim","progress","complete","fail","qc","unshift","rc","dataTypes","mc","sc","ajaxSettings","flatOptions","tc","contents","mimeType","getResponseHeader","converters","uc","responseFields","dataFilter","dataType","state","error","Ac","wc","Jc","defaultView","fn","jquery","selector","toArray","pushStack","prevObject","first","eq","last","isPlainObject","isReady","noop","isNumeric","globalEval","eval","trim","head","makeArray","inArray","guid","proxy","H","getElementsByClassName","qsa","bb","ab","hb","cacheLength","ib","attrHandle","sourceIndex","C","nextSibling","dir","J","relative","matches","find","TAG","uniqueSort","A","Q","RegExp","U","V","W","X","ID","CLASS","ATTR","PSEUDO","CHILD","bool","needsContext","Y","cb","String","fromCharCode","eb","childNodes","fb","isXML","setDocument","attachEvent","attributes","className","createComment","getById","getElementsByName","getAttributeNode","innerHTML","matchesSelector","webkitMatchesSelector","mozMatchesSelector","oMatchesSelector","msMatchesSelector","disconnectedMatch","compareDocumentPosition","sortDetached","attr","specified","detectDuplicates","sortStable","getText","textContent","nodeValue","selectors","createPseudo",">"," ","+","~","preFilter","lastChild","pseudos","setFilters","not","has","innerText","lang","location","hash","focus","hasFocus","href","tabIndex","disabled","selectedIndex","header","input","even","odd","lt","gt","nth","radio","checkbox","file","password","submit","reset","filters","tokenize","compile","select","expr","unique","isXMLDoc","is","parseHTML","next","prev","sibling","closest","prevAll","addBack","parents","parentsUntil","nextAll","nextUntil","prevUntil","siblings","reverse","Callbacks","once","memory","stopOnFalse","disable","lock","locked","fireWith","fired","then","resolve","reject","notify","pipe","when","readyWait","holdReady","triggerHandler","readyState","acceptData","accepts","defineProperties","discard","removeData","_data","_removeData","dequeue","clearQueue","createDocumentFragment","checkClone","cloneNode","noCloneChecked","focusinBubbles","global","handler","triggered","dispatch","special","delegateType","bindType","origType","namespace","delegateCount","setup","teardown","removeEvent","Event","isTrigger","namespace_re","noBubble","parentWindow","isPropagationStopped","isDefaultPrevented","_default","fix","delegateTarget","preDispatch","handlers","currentTarget","isImmediatePropagationStopped","handleObj","stopPropagation","postDispatch","fixHooks","keyHooks","which","charCode","keyCode","mouseHooks","clientX","clientLeft","clientY","clientTop","load","blur","click","beforeunload","originalEvent","returnValue","simulate","isSimulated","defaultPrevented","timeStamp","stopImmediatePropagation","mouseenter","mouseleave","pointerenter","pointerleave","relatedTarget","one","thead","tr","td","optgroup","tbody","tfoot","colgroup","caption","th","buildFragment","createTextNode","cleanData","append","domManip","prepend","insertBefore","before","after","html","replaceWith","replaceChild","_evalUrl","prependTo","insertAfter","replaceAll","opener","getComputedStyle","cssText","backgroundClip","clearCloneStyle","pixelPosition","reliableMarginRight","marginRight","swap","zb","Bb","Cb","visibility","Db","letterSpacing","fontWeight","cssNumber","columnCount","fillOpacity","flexGrow","flexShrink","lineHeight","order","orphans","widows","zIndex","zoom","cssProps","float","margin","padding","border","toggle","cur","unit","propHooks","pos","step","linear","swing","Mb","Ob","Pb","*","Animation","tweener","prefilter","speeds","old","fadeTo","animate","finish","timers","slideDown","slideUp","slideToggle","fadeIn","fadeOut","fadeToggle","interval","setInterval","clearInterval","slow","fast","delay","clearTimeout","checkOn","optSelected","optDisabled","radioValue","Yb","Zb","$b","removeAttr","attrHooks","propFix","_b","removeProp","for","class","hasAttribute","ac","addClass","removeClass","toggleClass","hasClass","bc","val","valHooks","hover","bind","unbind","delegate","undelegate","cc","dc","JSON","parse","parseXML","ec","fc","gc","hc","ic","jc","kc","lc","nc","oc","pc","active","lastModified","etag","url","isLocal","processData","async","contentType","xml","json","* text","text html","text json","text xml","ajaxSetup","ajaxPrefilter","ajaxTransport","ajax","ifModified","status","statusText","statusCode","getAllResponseHeaders","setRequestHeader","overrideMimeType","abort","success","method","crossDomain","param","traditional","hasContent","headers","beforeSend","timeout","getJSON","getScript","throws","wrapAll","firstElementChild","wrapInner","wrap","unwrap","vc","xc","yc","zc","encodeURIComponent","serialize","serializeArray","xhr","Bc","Cc","Dc",1223,"Ec","cors","username","xhrFields","onerror","script","text script","charset","scriptCharset","Fc","Gc","jsonp","jsonpCallback","Hc","animated","Ic","using","offsetParent","scrollTo","Height","Width","content","andSelf","Kc","jQuery","Lc","noConflict","__webpack_amd_options__","audio","Audio","volume","dom","currentTime","svgUtil","pointList","initialPosition","lineDash","lineCap","lineJoin","strokeGlobalAlpha","fillGlobalAlpha","_createBody","convertLoopwise","gravity2D","createBody","omitSamePoint","triList","triangleSplit","compBody","pointCopy2D","svgPath","parseTagStyle","parsePath","svgRect","parseRect","getOriginalPointList","ret","rotate2D","orgPolygon","newPolygonList","_slashLoop","inherit","addSlashMovement","slashVec","pedal","pedalPoint2D","crossVec","v1","vecUnit2D","v2","puls","crossList","crossPolygonAndLine","splitPolygonList","splitPolyByLine","poly","util","BEZIER_SPLIT_COUNT","elementList","splitD","pastVec","pastControlVec","current","pList","b0","b1","b2","b3","command","approximateBezier","symmetryPoint2D","y3","dString","reg","hLineReg","vLineReg","onePointReg","twoPointReg","threePointReg","arcReg","search","strList","rx","ry","xAxisRotation","styleStr","tmp","strArray","str","MINVALUE","isSame2D","cross2D","inner2D","pointArrayCopy2D","arr","centralPoint2D","radian2D","ba","rad","solveEquationOrder2","ia","sd","vecAB","vecAP","rate","_rayToBezier2","p0","vx","vy","crossLineAndBezier","aroundRectangle","xList","yList","centerOfAroundRectangle","lec","isPointOnTriangle","tri","ca","ap","bp","cp","crossABP","crossBCP","crossCAP","isPointOnArea","lines","count","rec","isCrossSegAndSeg","isPointOnBezierArea","bezier","pointCount","bezierLines","rightP","crossPs","cd","_isCrossSegAndSeg","ax","ay","bx","by","cx","cy","ta","isCrossLineAndSeg","c0","c1","isParallel","pol","targetLine","crossSegAndLine","isOnLine","s1","s2","crossIndex","targetSection","section","sameSeg","isSameSeg2D","dropList","tmpIndex","tmpList","i0","i1","splitPol","targetPoly","farthestIndex","currentCross","triangleList","sorted","_getTriangle","pa","tmpCross","some","allowNegative","loopwise","unitT","c2","c3","positionX","positionY"],"mappings":"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","file":"SlashCanvas2.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SlashCanvas2\"] = factory();\n\telse\n\t\troot[\"SlashCanvas2\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SlashCanvas2\"] = factory();\n\telse\n\t\troot[\"SlashCanvas2\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/*!\r\n\t * SlashCanvas2\r\n\t * v1.0.0 (c) 2016 miyanokomiya.tokyo\r\n\t * license MIT\r\n\t */\r\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {\r\n\t\tvar Matter = __webpack_require__(1);\r\n\t\tvar $ = __webpack_require__(2);\r\n\t\r\n\t\tvar Engine = Matter.Engine,\r\n\t\t\tRender = Matter.Render,\r\n\t\t    World = Matter.World,\r\n\t\t\tBodies = Matter.Bodies,\r\n\t\t\tBody = Matter.Body,\r\n\t\t\tSvg = Matter.Svg,\r\n\t\t\tMouseConstraint = Matter.MouseConstraint;\r\n\t\r\n\t\tvar Sound = __webpack_require__(4);\r\n\t\tvar Block = __webpack_require__(5);\r\n\t\tvar mathUtil = __webpack_require__(7);\r\n\t\tvar svgUtil = __webpack_require__(6);\r\n\t\tvar canvasUtil = __webpack_require__(8);\r\n\t\r\n\t\t/**\r\n\t\t * スラッシュキャンバス2本体\r\n\t\t * @class App\r\n\t\t * @namespace slashCanvas2\r\n\t\t * @constructor\r\n\t\t * @param rootDomId {string} 設置先DOMのID\r\n\t\t * @param option {} オプション\r\n\t\t */\r\n\t\tvar Constructor = function(rootDomId, option) {\r\n\t\t\t/**\r\n\t\t\t * 設置先DOMのID\r\n\t\t\t * @property rootDomId\r\n\t\t\t * @type {string}\r\n\t\t\t */\r\n\t\t\tthis.rootDomId = rootDomId;\r\n\t\r\n\t\t\t/**\r\n\t\t\t * matterエンジン\r\n\t\t\t * @property engine\r\n\t\t\t * @type {Matter.Engine}\r\n\t\t\t * @default null\r\n\t\t\t */\r\n\t\t\tthis.engine = null;\r\n\t\r\n\t\t\t/**\r\n\t\t\t * matterレンダー\r\n\t\t\t * @property render\r\n\t\t\t * @type {Matter.Render}\r\n\t\t\t * @default null\r\n\t\t\t */\r\n\t\t\tthis.render = null;\r\n\t\r\n\t\t\t/**\r\n\t\t\t * キャンバスDOM\r\n\t\t\t * @property canvas\r\n\t\t\t * @type {}\r\n\t\t\t * @default null\r\n\t\t\t */\r\n\t\t\tthis.canvas = null;\r\n\t\r\n\t\t\t/**\r\n\t\t\t * キャンバスの描画要素\r\n\t\t\t * @property ctx\r\n\t\t\t * @type {}\r\n\t\t\t * @default null\r\n\t\t\t */\r\n\t\t\tthis.ctx = null;\r\n\t\r\n\t\t\t/**\r\n\t\t\t * ブロックリスト\r\n\t\t\t * @property blockList\r\n\t\t\t * @type {[]}\r\n\t\t\t * @default []\r\n\t\t\t */\r\n\t\t\tthis.blockList = [];\r\n\t\r\n\t\t\t/**\r\n\t\t\t * スラッシュラインリスト<br>\r\n\t\t\t * オブジェクト{s : 始点, e : 終点, life : 残り生存時間}の配列\r\n\t\t\t * @property slashLineList\r\n\t\t\t * @type {[]}\r\n\t\t\t * @default []\r\n\t\t\t */\r\n\t\t\tthis.slashLineList = [];\r\n\t\r\n\t\t\t//\r\n\t\t\t// オプション要素\r\n\t\t\t//\r\n\t\r\n\t\t\tif (!option) {\r\n\t\t\t\toption = {};\r\n\t\t\t}\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 幅\r\n\t\t\t * @property width\r\n\t\t\t * @type {number}\r\n\t\t\t * @default 400\r\n\t\t\t */\r\n\t\t\tthis.width = option.width || 400;\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 高さ\r\n\t\t\t * @property height\r\n\t\t\t * @type {number}\r\n\t\t\t * @default 400\r\n\t\t\t */\r\n\t\t\tthis.height = option.height || 400;\r\n\t\r\n\t\t\t/**\r\n\t\t\t * x軸重力\r\n\t\t\t * @property gravityX\r\n\t\t\t * @type {number}\r\n\t\t\t * @default 0\r\n\t\t\t */\r\n\t\t\tthis.gravityX = !isNaN(option.gravityX) ? option.gravityX : 0;\r\n\t\r\n\t\t\t/**\r\n\t\t\t * y軸重力\r\n\t\t\t * @property gravityY\r\n\t\t\t * @type {number}\r\n\t\t\t * @default 0\r\n\t\t\t */\r\n\t\t\tthis.gravityY = !isNaN(option.gravityY) ? option.gravityY : 0;\r\n\t\r\n\t\t\t/**\r\n\t\t\t * サウンド\r\n\t\t\t * @property sound\r\n\t\t\t * @type {slashCanvas.common.Sound}\r\n\t\t\t * @default null\r\n\t\t\t */\r\n\t\t\tthis.sound = option.sound ? new Sound(option.sound) : null;\r\n\t\r\n\t\t\t/**\r\n\t\t\t * SVGソースファイルの場所\r\n\t\t\t * @property svgSource\r\n\t\t\t * @type {string}\r\n\t\t\t * @default null\r\n\t\t\t */\r\n\t\t\tthis.svgSource = option.svgSource || null;\r\n\t\r\n\t\t\t/**\r\n\t\t\t * SVGの座標スケール\r\n\t\t\t * @property svgScale\r\n\t\t\t * @type {number}\r\n\t\t\t * @default 1\r\n\t\t\t */\r\n\t\t\tthis.svgScale = option.svgScale || 1;\r\n\t\r\n\t\t\t/**\r\n\t\t\t * SVG座標の移動(スケール調整後に実施)\r\n\t\t\t * @property svgShift\r\n\t\t\t * @type {vector}\r\n\t\t\t * @default {x:0,y:0}\r\n\t\t\t */\r\n\t\t\tthis.svgShift = option.svgShift || {x:0,y:0};\r\n\t\r\n\t\t\t/**\r\n\t\t\t * スラッシュ線カラー\r\n\t\t\t * @property slashLineColor\r\n\t\t\t * @type {color}\r\n\t\t\t * @defalut {yellow};\r\n\t\t\t */\r\n\t\t\tthis.slashLineColor = option.slashLineColor || \"yellow\";\r\n\t\r\n\t\t\t//\r\n\t\t\t// Blockクラスのオプション\r\n\t\t\t//\r\n\t\t\tif (!isNaN(option.slashMovementPower)) {\r\n\t\t\tBlock.prototype.slashMovementPower = option.slashMovementPower;\r\n\t\t\t}\r\n\t\r\n\t\t\t// 初期化\r\n\t\t\tthis.init();\r\n\t\t};\r\n\t\r\n\t\t/**\r\n\t\t * 初期化\r\n\t\t * @method init\r\n\t\t */\r\n\t\tConstructor.prototype.init = function() {\r\n\t\t\tvar self = this;\r\n\t\r\n\t\t\tthis.initWorld();\r\n\t\r\n\t\t\t// SVGリソース取得\r\n\t\t\tvar req = new XMLHttpRequest();\r\n\t\t\treq.open(\"get\", this.svgSource, true);\r\n\t\t\treq.onload = function(){\r\n\t\t\t\tvar dom_parser = new DOMParser();\r\n\t\t\t\tvar svgDom = null;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tsvgDom = dom_parser.parseFromString(req.responseText, \"application/xml\");\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tconsole.log(\"This svg resouce is invalid to parse.\");\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif (svgDom) {\r\n\t\t\t\t\tvar tagG = svgDom.getElementsByTagName(\"g\")[0];\r\n\t\t\t\t\tvar tagPathList = tagG.getElementsByTagName(\"path\");\r\n\t\t\t\t\tvar tagRectList = tagG.getElementsByTagName(\"rect\");\r\n\t\r\n\t\t\t\t\tvar bodyList = [];\r\n\t\t\t\t\tvar i = 0;\r\n\t\t\t\t\tvar block = null;\r\n\t\r\n\t\t\t\t\tfor (i = 0; i < tagPathList.length; i++) {\r\n\t\t\t\t\t\tblock = new Block();\r\n\t\t\t\t\t\tblock.loadSvgPath(tagPathList[i], self.svgScale, self.svgShift);\r\n\t\r\n\t\t\t\t\t\tself.blockList.push(block);\r\n\t\t\t\t\t\tbodyList = bodyList.concat(block.body);\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tfor (i = 0; i < tagRectList.length; i++) {\r\n\t\t\t\t\t\tblock = new Block();\r\n\t\t\t\t\t\tblock.loadSvgRect(tagRectList[i], self.svgScale, self.svgShift);\r\n\t\r\n\t\t\t\t\t\tself.blockList.push(block);\r\n\t\t\t\t\t\tbodyList = bodyList.concat(block.body);\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tWorld.add(self.engine.world, bodyList);\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tself.bindCanvasEvent(self.render.canvas);\r\n\t\t\t};\r\n\t\t\treq.send(null);\r\n\t\t};\r\n\t\r\n\t\t/**\r\n\t\t * 世界の初期化\r\n\t\t * @method initWorld\r\n\t\t */\r\n\t\tConstructor.prototype.initWorld = function() {\r\n\t\t\tvar self = this;\r\n\t\r\n\t\t\tthis.engine = Engine.create();\r\n\t\t\tthis.render = Render.create({\r\n\t\t\t\telement : document.getElementById(this.rootDomId),\r\n\t\t\t\tengine : this.engine,\r\n\t\t\t\toptions : {\r\n\t\t\t\t\twireframes : false\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\r\n\t\t\tthis.engine.world.gravity.x = this.gravityX;\r\n\t\t\tthis.engine.world.gravity.y = this.gravityY;\r\n\t\r\n\t\t\tthis.canvas = this.render.canvas;\r\n\t\t\tthis.render.canvas.width = this.width;\r\n\t\t\tthis.render.canvas.height = this.height;\r\n\t\r\n\t\t\tthis.resetBodies();\r\n\t\r\n\t\t\tEngine.run(this.engine);\r\n\t\t\tRender.run(this.render);\r\n\t\r\n\t\t\t// ステップ後イベントハンドラ\r\n\t\t\tMatter.Events.on(this.render, \"afterRender\", function(){\r\n\t\t\t\t// スプライト描画\r\n\t\t\t\tvar ctx = self.render.canvas.getContext(\"2d\");\r\n\t\t\t\tself.blockList.forEach(function(block) {\r\n\t\t\t\t\tblock.onPaint(ctx);\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\tctx.strokeStyle = self.slashLineColor;\r\n\t\t\t\tctx.globalAlpha = 1;\r\n\t\t\t\tctx.lineWidth = 2;\r\n\t\r\n\t\t\t\t// スラッシュ線描画\r\n\t\t\t\tself.slashLineList.forEach(function(line) {\r\n\t\t\t\t\tvar start = line.s;\r\n\t\t\t\t\tvar end = line.e;\r\n\t\r\n\t\t\t\t\tctx.beginPath();\r\n\t\t\t\t\tctx.moveTo(start.x, start.y);\r\n\t\t\t\t\tctx.lineTo(end.x, end.y);\r\n\t\t\t\t\tctx.stroke();\r\n\t\r\n\t\t\t\t\tline.life--;\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\t// スラッシュ線削除\r\n\t\t\t\tself.slashLineList = self.slashLineList.filter(function(line) {\r\n\t\t\t\t\t// ライフが残っているものだけ回収\r\n\t\t\t\t\treturn (line.life > 0);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t};\r\n\t\r\n\t\t/**\r\n\t\t * ボディ作り直し\r\n\t\t * @method resetBodies\r\n\t\t */\r\n\t\tConstructor.prototype.resetBodies = function() {\r\n\t\t\tvar engine = this.engine;\r\n\t\r\n\t\t\tWorld.clear(this.engine.world);\r\n\t\t\tEngine.clear(this.engine);\r\n\t\t\t/*\r\n\t\t\tvar mc = MouseConstraint.create(this.engine, {\r\n\t\t\t\telement : this.render.canvas\r\n\t\t\t});\r\n\t\r\n\t\t\tWorld.add(this.engine.world, mc);\r\n\t\t\t*/\r\n\t\t\t// 矩形で枠線を作る(rectangle(x座標,y座標,横幅,縦幅,option))\r\n\t\t\tvar frameWidth = this.width;\r\n\t\t\tvar frameHeight = this.height;\r\n\t\t\tvar offset = 15;\r\n\t\r\n\t\t\tWorld.add(engine.world, [\r\n\t\t\t\t// 床\r\n\t\t\t\tBodies.rectangle(\r\n\t\t\t\t\tframeWidth / 2,\r\n\t\t\t\t\tframeHeight,\r\n\t\t\t\t\tframeWidth + 2 * offset,\r\n\t\t\t\t\toffset,\r\n\t\t\t\t\t{ isStatic: true}),\r\n\t\r\n\t\t\t\t// 天井\r\n\t\t\t\tBodies.rectangle(\r\n\t\t\t\t\tframeWidth / 2,\r\n\t\t\t\t\t0,\r\n\t\t\t\t\tframeWidth + 2 * offset,\r\n\t\t\t\t\toffset,\r\n\t\t\t\t\t{ isStatic: true}),\r\n\t\r\n\t\t\t\t// 右壁\r\n\t\t\t\tBodies.rectangle(\r\n\t\t\t\t\tframeWidth,\r\n\t\t\t\t\t0,\r\n\t\t\t\t\toffset,\r\n\t\t\t\t\t2 * (frameHeight + 2 * offset),\r\n\t\t\t\t\t{ isStatic: true}),\r\n\t\r\n\t\t\t\t// 左壁\r\n\t\t\t\tBodies.rectangle(\r\n\t\t\t\t\t0,\r\n\t\t\t\t\t0,\r\n\t\t\t\t\toffset,\r\n\t\t\t\t\t2 * (frameHeight + 2 * offset),\r\n\t\t\t\t\t{ isStatic: true})\r\n\t\t\t]);\r\n\t\t};\r\n\t\r\n\t\t/**\r\n\t\t * キャンバスへのイベントハンドラ\r\n\t\t * @method bindCanvasEvent\r\n\t\t * @param target {} イベントハンドラ設定先\r\n\t\t */\r\n\t\tConstructor.prototype.bindCanvasEvent = function(target) {\r\n\t\t\tvar self = this;\r\n\t\r\n\t\t\t// 始点と終点記録用\r\n\t\t\tvar slash = [];\r\n\t\r\n\t\t\tvar length = this.width * this.width + this.height * this.height;\r\n\t\r\n\t\t\t$(target).on(\"mousedown touchstart\", function(e) {\r\n\t\t\t\t// 始点記録\r\n\t\t\t\tslash.length = 0;\r\n\t\t\t\tslash[0] = canvasUtil.getCursorPoint(e);\r\n\t\t\t});\r\n\t\r\n\t\t\t$(target).on(\"mousemove touchmove\", function(e) {\r\n\t\t\t\te.preventDefault();\r\n\t\r\n\t\t\t\t// 終点記録\r\n\t\t\t\tif (slash.length > 0) {\r\n\t\t\t\t\tslash[1] = canvasUtil.getCursorPoint(e);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\r\n\t\t\t$(target).on(\"mouseup touchend touchcancel\", function(e) {\r\n\t\t\t\tif (slash.length > 1) {\r\n\t\t\t\t\t// 長さチェック\r\n\t\t\t\t\tvar vec = mathUtil.vecSub2D(slash[0], slash[1]);\r\n\t\t\t\t\tvar slashLength = mathUtil.length2D({x:0,y:0}, vec);\r\n\t\t\t\t\tif (slashLength > 5) {\r\n\t\t\t\t\t\tif (self.sound) {\r\n\t\t\t\t\t\t\tself.sound.play();\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t// ブロック分割\r\n\t\t\t\t\t\tvar blockList = [];\r\n\t\t\t\t\t\tself.blockList.forEach(function(block) {\r\n\t\t\t\t\t\t\tblockList = blockList.concat(block.slash(slash));\r\n\t\t\t\t\t\t});\r\n\t\r\n\t\t\t\t\t\t// ボディリセット\r\n\t\t\t\t\t\tself.resetBodies();\r\n\t\r\n\t\t\t\t\t\t// 作り直し\r\n\t\t\t\t\t\tself.blockList = blockList;\r\n\t\t\t\t\t\tself.bodyList = [];\r\n\t\t\t\t\t\tblockList.forEach(function(block) {\r\n\t\t\t\t\t\t\tself.bodyList.push(block.body);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tWorld.add(self.engine.world, self.bodyList);\r\n\t\r\n\t\t\t\t\t\t// スラッシュ線として記録\r\n\t\t\t\t\t\tvar scale = length / slashLength;\r\n\t\t\t\t\t\tvec = mathUtil.vecMult2D(vec, scale);\r\n\t\r\n\t\t\t\t\t\t// 外接円の半径分拡大\r\n\t\t\t\t\t\tvar p1 = mathUtil.vecSub2D(slash[0], vec);\r\n\t\t\t\t\t\tvar p2 = mathUtil.vecAdd2D(slash[1], vec);\r\n\t\r\n\t\t\t\t\t\tself.slashLineList.push({s : p1, e : p2, life : 60});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tslash.length = 0;\r\n\t\t\t});\r\n\t\t};\r\n\t\treturn Constructor;\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar require;var require;/**!\n\t* matter-js 0.10.0 by @liabru 2016-05-01\n\t* http://brm.io/matter-js/\n\t* License MIT\n\t*/\n\t\n\t/**\n\t * The MIT License (MIT)\n\t * \n\t * Copyright (c) 2014 Liam Brummitt\n\t * \n\t * Permission is hereby granted, free of charge, to any person obtaining a copy\n\t * of this software and associated documentation files (the \"Software\"), to deal\n\t * in the Software without restriction, including without limitation the rights\n\t * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t * copies of the Software, and to permit persons to whom the Software is\n\t * furnished to do so, subject to the following conditions:\n\t * \n\t * The above copyright notice and this permission notice shall be included in\n\t * all copies or substantial portions of the Software.\n\t * \n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t * THE SOFTWARE.\n\t */\n\t\n\t(function(f){if(true){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Matter = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\t/**\n\t* The `Matter.Body` module contains methods for creating and manipulating body models.\n\t* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n\t* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n\t*\n\t* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\t\n\t* @class Body\n\t*/\n\t\n\tvar Body = {};\n\t\n\tmodule.exports = Body;\n\t\n\tvar Vertices = require('../geometry/Vertices');\n\tvar Vector = require('../geometry/Vector');\n\tvar Sleeping = require('../core/Sleeping');\n\tvar Render = require('../render/Render');\n\tvar Common = require('../core/Common');\n\tvar Bounds = require('../geometry/Bounds');\n\tvar Axes = require('../geometry/Axes');\n\t\n\t(function() {\n\t\n\t    Body._inertiaScale = 4;\n\t    Body._nextCollidingGroupId = 1;\n\t    Body._nextNonCollidingGroupId = -1;\n\t    Body._nextCategory = 0x0001;\n\t\n\t    /**\n\t     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n\t     * All properties have default values, and many are pre-calculated automatically based on other properties.\n\t     * See the properties section below for detailed information on what you can pass via the `options` object.\n\t     * @method create\n\t     * @param {} options\n\t     * @return {body} body\n\t     */\n\t    Body.create = function(options) {\n\t        var defaults = {\n\t            id: Common.nextId(),\n\t            type: 'body',\n\t            label: 'Body',\n\t            parts: [],\n\t            angle: 0,\n\t            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n\t            position: { x: 0, y: 0 },\n\t            force: { x: 0, y: 0 },\n\t            torque: 0,\n\t            positionImpulse: { x: 0, y: 0 },\n\t            constraintImpulse: { x: 0, y: 0, angle: 0 },\n\t            totalContacts: 0,\n\t            speed: 0,\n\t            angularSpeed: 0,\n\t            velocity: { x: 0, y: 0 },\n\t            angularVelocity: 0,\n\t            isSensor: false,\n\t            isStatic: false,\n\t            isSleeping: false,\n\t            motion: 0,\n\t            sleepThreshold: 60,\n\t            density: 0.001,\n\t            restitution: 0,\n\t            friction: 0.1,\n\t            frictionStatic: 0.5,\n\t            frictionAir: 0.01,\n\t            collisionFilter: {\n\t                category: 0x0001,\n\t                mask: 0xFFFFFFFF,\n\t                group: 0\n\t            },\n\t            slop: 0.05,\n\t            timeScale: 1,\n\t            render: {\n\t                visible: true,\n\t                opacity: 1,\n\t                sprite: {\n\t                    xScale: 1,\n\t                    yScale: 1,\n\t                    xOffset: 0,\n\t                    yOffset: 0\n\t                },\n\t                lineWidth: 1.5\n\t            }\n\t        };\n\t\n\t        var body = Common.extend(defaults, options);\n\t\n\t        _initProperties(body, options);\n\t\n\t        return body;\n\t    };\n\t\n\t    /**\n\t     * Returns the next unique group index for which bodies will collide.\n\t     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n\t     * See `body.collisionFilter` for more information.\n\t     * @method nextGroup\n\t     * @param {bool} [isNonColliding=false]\n\t     * @return {Number} Unique group index\n\t     */\n\t    Body.nextGroup = function(isNonColliding) {\n\t        if (isNonColliding)\n\t            return Body._nextNonCollidingGroupId--;\n\t\n\t        return Body._nextCollidingGroupId++;\n\t    };\n\t\n\t    /**\n\t     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n\t     * There are 32 available. See `body.collisionFilter` for more information.\n\t     * @method nextCategory\n\t     * @return {Number} Unique category bitfield\n\t     */\n\t    Body.nextCategory = function() {\n\t        Body._nextCategory = Body._nextCategory << 1;\n\t        return Body._nextCategory;\n\t    };\n\t\n\t    /**\n\t     * Initialises body properties.\n\t     * @method _initProperties\n\t     * @private\n\t     * @param {body} body\n\t     * @param {} options\n\t     */\n\t    var _initProperties = function(body, options) {\n\t        // init required properties (order is important)\n\t        Body.set(body, {\n\t            bounds: body.bounds || Bounds.create(body.vertices),\n\t            positionPrev: body.positionPrev || Vector.clone(body.position),\n\t            anglePrev: body.anglePrev || body.angle,\n\t            vertices: body.vertices,\n\t            parts: body.parts || [body],\n\t            isStatic: body.isStatic,\n\t            isSleeping: body.isSleeping,\n\t            parent: body.parent || body\n\t        });\n\t\n\t        Vertices.rotate(body.vertices, body.angle, body.position);\n\t        Axes.rotate(body.axes, body.angle);\n\t        Bounds.update(body.bounds, body.vertices, body.velocity);\n\t\n\t        // allow options to override the automatically calculated properties\n\t        Body.set(body, {\n\t            axes: options.axes || body.axes,\n\t            area: options.area || body.area,\n\t            mass: options.mass || body.mass,\n\t            inertia: options.inertia || body.inertia\n\t        });\n\t\n\t        // render properties\n\t        var defaultFillStyle = (body.isStatic ? '#eeeeee' : Common.choose(['#556270', '#4ECDC4', '#C7F464', '#FF6B6B', '#C44D58'])),\n\t            defaultStrokeStyle = Common.shadeColor(defaultFillStyle, -20);\n\t        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n\t        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n\t        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n\t        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n\t    };\n\t\n\t    /**\n\t     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n\t     * Prefer to use the actual setter functions in performance critical situations.\n\t     * @method set\n\t     * @param {body} body\n\t     * @param {} settings A property name (or map of properties and values) to set on the body.\n\t     * @param {} value The value to set if `settings` is a single property name.\n\t     */\n\t    Body.set = function(body, settings, value) {\n\t        var property;\n\t\n\t        if (typeof settings === 'string') {\n\t            property = settings;\n\t            settings = {};\n\t            settings[property] = value;\n\t        }\n\t\n\t        for (property in settings) {\n\t            value = settings[property];\n\t\n\t            if (!settings.hasOwnProperty(property))\n\t                continue;\n\t\n\t            switch (property) {\n\t\n\t            case 'isStatic':\n\t                Body.setStatic(body, value);\n\t                break;\n\t            case 'isSleeping':\n\t                Sleeping.set(body, value);\n\t                break;\n\t            case 'mass':\n\t                Body.setMass(body, value);\n\t                break;\n\t            case 'density':\n\t                Body.setDensity(body, value);\n\t                break;\n\t            case 'inertia':\n\t                Body.setInertia(body, value);\n\t                break;\n\t            case 'vertices':\n\t                Body.setVertices(body, value);\n\t                break;\n\t            case 'position':\n\t                Body.setPosition(body, value);\n\t                break;\n\t            case 'angle':\n\t                Body.setAngle(body, value);\n\t                break;\n\t            case 'velocity':\n\t                Body.setVelocity(body, value);\n\t                break;\n\t            case 'angularVelocity':\n\t                Body.setAngularVelocity(body, value);\n\t                break;\n\t            case 'parts':\n\t                Body.setParts(body, value);\n\t                break;\n\t            default:\n\t                body[property] = value;\n\t\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n\t     * @method setStatic\n\t     * @param {body} body\n\t     * @param {bool} isStatic\n\t     */\n\t    Body.setStatic = function(body, isStatic) {\n\t        for (var i = 0; i < body.parts.length; i++) {\n\t            var part = body.parts[i];\n\t            part.isStatic = isStatic;\n\t\n\t            if (isStatic) {\n\t                part.restitution = 0;\n\t                part.friction = 1;\n\t                part.mass = part.inertia = part.density = Infinity;\n\t                part.inverseMass = part.inverseInertia = 0;\n\t\n\t                part.positionPrev.x = part.position.x;\n\t                part.positionPrev.y = part.position.y;\n\t                part.anglePrev = part.angle;\n\t                part.angularVelocity = 0;\n\t                part.speed = 0;\n\t                part.angularSpeed = 0;\n\t                part.motion = 0;\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Sets the mass of the body. Inverse mass and density are automatically updated to reflect the change.\n\t     * @method setMass\n\t     * @param {body} body\n\t     * @param {number} mass\n\t     */\n\t    Body.setMass = function(body, mass) {\n\t        body.mass = mass;\n\t        body.inverseMass = 1 / body.mass;\n\t        body.density = body.mass / body.area;\n\t    };\n\t\n\t    /**\n\t     * Sets the density of the body. Mass is automatically updated to reflect the change.\n\t     * @method setDensity\n\t     * @param {body} body\n\t     * @param {number} density\n\t     */\n\t    Body.setDensity = function(body, density) {\n\t        Body.setMass(body, density * body.area);\n\t        body.density = density;\n\t    };\n\t\n\t    /**\n\t     * Sets the moment of inertia (i.e. second moment of area) of the body of the body. \n\t     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n\t     * @method setInertia\n\t     * @param {body} body\n\t     * @param {number} inertia\n\t     */\n\t    Body.setInertia = function(body, inertia) {\n\t        body.inertia = inertia;\n\t        body.inverseInertia = 1 / body.inertia;\n\t    };\n\t\n\t    /**\n\t     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n\t     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n\t     * They are then automatically translated to world space based on `body.position`.\n\t     *\n\t     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n\t     * Vertices must form a convex hull, concave hulls are not supported.\n\t     *\n\t     * @method setVertices\n\t     * @param {body} body\n\t     * @param {vector[]} vertices\n\t     */\n\t    Body.setVertices = function(body, vertices) {\n\t        // change vertices\n\t        if (vertices[0].body === body) {\n\t            body.vertices = vertices;\n\t        } else {\n\t            body.vertices = Vertices.create(vertices, body);\n\t        }\n\t\n\t        // update properties\n\t        body.axes = Axes.fromVertices(body.vertices);\n\t        body.area = Vertices.area(body.vertices);\n\t        Body.setMass(body, body.density * body.area);\n\t\n\t        // orient vertices around the centre of mass at origin (0, 0)\n\t        var centre = Vertices.centre(body.vertices);\n\t        Vertices.translate(body.vertices, centre, -1);\n\t\n\t        // update inertia while vertices are at origin (0, 0)\n\t        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\t\n\t        // update geometry\n\t        Vertices.translate(body.vertices, body.position);\n\t        Bounds.update(body.bounds, body.vertices, body.velocity);\n\t    };\n\t\n\t    /**\n\t     * Sets the parts of the `body` and updates mass, inertia and centroid.\n\t     * Each part will have its parent set to `body`.\n\t     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n\t     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n\t     * @method setParts\n\t     * @param {body} body\n\t     * @param [body] parts\n\t     * @param {bool} [autoHull=true]\n\t     */\n\t    Body.setParts = function(body, parts, autoHull) {\n\t        var i;\n\t\n\t        // add all the parts, ensuring that the first part is always the parent body\n\t        parts = parts.slice(0);\n\t        body.parts.length = 0;\n\t        body.parts.push(body);\n\t        body.parent = body;\n\t\n\t        for (i = 0; i < parts.length; i++) {\n\t            var part = parts[i];\n\t            if (part !== body) {\n\t                part.parent = body;\n\t                body.parts.push(part);\n\t            }\n\t        }\n\t\n\t        if (body.parts.length === 1)\n\t            return;\n\t\n\t        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\t\n\t        // find the convex hull of all parts to set on the parent body\n\t        if (autoHull) {\n\t            var vertices = [];\n\t            for (i = 0; i < parts.length; i++) {\n\t                vertices = vertices.concat(parts[i].vertices);\n\t            }\n\t\n\t            Vertices.clockwiseSort(vertices);\n\t\n\t            var hull = Vertices.hull(vertices),\n\t                hullCentre = Vertices.centre(hull);\n\t\n\t            Body.setVertices(body, hull);\n\t            Vertices.translate(body.vertices, hullCentre);\n\t        }\n\t\n\t        // sum the properties of all compound parts of the parent body\n\t        var total = _totalProperties(body);\n\t\n\t        body.area = total.area;\n\t        body.parent = body;\n\t        body.position.x = total.centre.x;\n\t        body.position.y = total.centre.y;\n\t        body.positionPrev.x = total.centre.x;\n\t        body.positionPrev.y = total.centre.y;\n\t\n\t        Body.setMass(body, total.mass);\n\t        Body.setInertia(body, total.inertia);\n\t        Body.setPosition(body, total.centre);\n\t    };\n\t\n\t    /**\n\t     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n\t     * @method setPosition\n\t     * @param {body} body\n\t     * @param {vector} position\n\t     */\n\t    Body.setPosition = function(body, position) {\n\t        var delta = Vector.sub(position, body.position);\n\t        body.positionPrev.x += delta.x;\n\t        body.positionPrev.y += delta.y;\n\t\n\t        for (var i = 0; i < body.parts.length; i++) {\n\t            var part = body.parts[i];\n\t            part.position.x += delta.x;\n\t            part.position.y += delta.y;\n\t            Vertices.translate(part.vertices, delta);\n\t            Bounds.update(part.bounds, part.vertices, body.velocity);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n\t     * @method setAngle\n\t     * @param {body} body\n\t     * @param {number} angle\n\t     */\n\t    Body.setAngle = function(body, angle) {\n\t        var delta = angle - body.angle;\n\t        body.anglePrev += delta;\n\t\n\t        for (var i = 0; i < body.parts.length; i++) {\n\t            var part = body.parts[i];\n\t            part.angle += delta;\n\t            Vertices.rotate(part.vertices, delta, body.position);\n\t            Axes.rotate(part.axes, delta);\n\t            Bounds.update(part.bounds, part.vertices, body.velocity);\n\t            if (i > 0) {\n\t                Vector.rotateAbout(part.position, delta, body.position, part.position);\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n\t     * @method setVelocity\n\t     * @param {body} body\n\t     * @param {vector} velocity\n\t     */\n\t    Body.setVelocity = function(body, velocity) {\n\t        body.positionPrev.x = body.position.x - velocity.x;\n\t        body.positionPrev.y = body.position.y - velocity.y;\n\t        body.velocity.x = velocity.x;\n\t        body.velocity.y = velocity.y;\n\t        body.speed = Vector.magnitude(body.velocity);\n\t    };\n\t\n\t    /**\n\t     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n\t     * @method setAngularVelocity\n\t     * @param {body} body\n\t     * @param {number} velocity\n\t     */\n\t    Body.setAngularVelocity = function(body, velocity) {\n\t        body.anglePrev = body.angle - velocity;\n\t        body.angularVelocity = velocity;\n\t        body.angularSpeed = Math.abs(body.angularVelocity);\n\t    };\n\t\n\t    /**\n\t     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n\t     * @method translate\n\t     * @param {body} body\n\t     * @param {vector} translation\n\t     */\n\t    Body.translate = function(body, translation) {\n\t        Body.setPosition(body, Vector.add(body.position, translation));\n\t    };\n\t\n\t    /**\n\t     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n\t     * @method rotate\n\t     * @param {body} body\n\t     * @param {number} rotation\n\t     */\n\t    Body.rotate = function(body, rotation) {\n\t        Body.setAngle(body, body.angle + rotation);\n\t    };\n\t\n\t    /**\n\t     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n\t     * @method scale\n\t     * @param {body} body\n\t     * @param {number} scaleX\n\t     * @param {number} scaleY\n\t     * @param {vector} [point]\n\t     */\n\t    Body.scale = function(body, scaleX, scaleY, point) {\n\t        for (var i = 0; i < body.parts.length; i++) {\n\t            var part = body.parts[i];\n\t\n\t            // scale vertices\n\t            Vertices.scale(part.vertices, scaleX, scaleY, body.position);\n\t\n\t            // update properties\n\t            part.axes = Axes.fromVertices(part.vertices);\n\t\n\t            if (!body.isStatic) {\n\t                part.area = Vertices.area(part.vertices);\n\t                Body.setMass(part, body.density * part.area);\n\t\n\t                // update inertia (requires vertices to be at origin)\n\t                Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n\t                Body.setInertia(part, Vertices.inertia(part.vertices, part.mass));\n\t                Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\t            }\n\t\n\t            // update bounds\n\t            Bounds.update(part.bounds, part.vertices, body.velocity);\n\t        }\n\t\n\t        // handle circles\n\t        if (body.circleRadius) { \n\t            if (scaleX === scaleY) {\n\t                body.circleRadius *= scaleX;\n\t            } else {\n\t                // body is no longer a circle\n\t                body.circleRadius = null;\n\t            }\n\t        }\n\t\n\t        if (!body.isStatic) {\n\t            var total = _totalProperties(body);\n\t            body.area = total.area;\n\t            Body.setMass(body, total.mass);\n\t            Body.setInertia(body, total.inertia);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n\t     * @method update\n\t     * @param {body} body\n\t     * @param {number} deltaTime\n\t     * @param {number} timeScale\n\t     * @param {number} correction\n\t     */\n\t    Body.update = function(body, deltaTime, timeScale, correction) {\n\t        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\t\n\t        // from the previous step\n\t        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n\t            velocityPrevX = body.position.x - body.positionPrev.x,\n\t            velocityPrevY = body.position.y - body.positionPrev.y;\n\t\n\t        // update velocity with Verlet integration\n\t        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n\t        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\t\n\t        body.positionPrev.x = body.position.x;\n\t        body.positionPrev.y = body.position.y;\n\t        body.position.x += body.velocity.x;\n\t        body.position.y += body.velocity.y;\n\t\n\t        // update angular velocity with Verlet integration\n\t        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n\t        body.anglePrev = body.angle;\n\t        body.angle += body.angularVelocity;\n\t\n\t        // track speed and acceleration\n\t        body.speed = Vector.magnitude(body.velocity);\n\t        body.angularSpeed = Math.abs(body.angularVelocity);\n\t\n\t        // transform the body geometry\n\t        for (var i = 0; i < body.parts.length; i++) {\n\t            var part = body.parts[i];\n\t\n\t            Vertices.translate(part.vertices, body.velocity);\n\t            \n\t            if (i > 0) {\n\t                part.position.x += body.velocity.x;\n\t                part.position.y += body.velocity.y;\n\t            }\n\t\n\t            if (body.angularVelocity !== 0) {\n\t                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n\t                Axes.rotate(part.axes, body.angularVelocity);\n\t                if (i > 0) {\n\t                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n\t                }\n\t            }\n\t\n\t            Bounds.update(part.bounds, part.vertices, body.velocity);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Applies a force to a body from a given world-space position, including resulting torque.\n\t     * @method applyForce\n\t     * @param {body} body\n\t     * @param {vector} position\n\t     * @param {vector} force\n\t     */\n\t    Body.applyForce = function(body, position, force) {\n\t        body.force.x += force.x;\n\t        body.force.y += force.y;\n\t        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n\t        body.torque += offset.x * force.y - offset.y * force.x;\n\t    };\n\t\n\t    /**\n\t     * Returns the sums of the properties of all compound parts of the parent body.\n\t     * @method _totalProperties\n\t     * @private\n\t     * @param {body} body\n\t     * @return {}\n\t     */\n\t    var _totalProperties = function(body) {\n\t        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n\t        // http://output.to/sideway/default.asp?qno=121100087\n\t\n\t        var properties = {\n\t            mass: 0,\n\t            area: 0,\n\t            inertia: 0,\n\t            centre: { x: 0, y: 0 }\n\t        };\n\t\n\t        // sum the properties of all compound parts of the parent body\n\t        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n\t            var part = body.parts[i];\n\t            properties.mass += part.mass;\n\t            properties.area += part.area;\n\t            properties.inertia += part.inertia;\n\t            properties.centre = Vector.add(properties.centre, \n\t                                           Vector.mult(part.position, part.mass !== Infinity ? part.mass : 1));\n\t        }\n\t\n\t        properties.centre = Vector.div(properties.centre, \n\t                                       properties.mass !== Infinity ? properties.mass : body.parts.length);\n\t\n\t        return properties;\n\t    };\n\t\n\t    /*\n\t    *\n\t    *  Events Documentation\n\t    *\n\t    */\n\t\n\t    /**\n\t    * Fired when a body starts sleeping (where `this` is the body).\n\t    *\n\t    * @event sleepStart\n\t    * @this {body} The body that has started sleeping\n\t    * @param {} event An event object\n\t    * @param {} event.source The source object of the event\n\t    * @param {} event.name The name of the event\n\t    */\n\t\n\t    /**\n\t    * Fired when a body ends sleeping (where `this` is the body).\n\t    *\n\t    * @event sleepEnd\n\t    * @this {body} The body that has ended sleeping\n\t    * @param {} event An event object\n\t    * @param {} event.source The source object of the event\n\t    * @param {} event.name The name of the event\n\t    */\n\t\n\t    /*\n\t    *\n\t    *  Properties Documentation\n\t    *\n\t    */\n\t\n\t    /**\n\t     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n\t     *\n\t     * @property id\n\t     * @type number\n\t     */\n\t\n\t    /**\n\t     * A `String` denoting the type of object.\n\t     *\n\t     * @property type\n\t     * @type string\n\t     * @default \"body\"\n\t     * @readOnly\n\t     */\n\t\n\t    /**\n\t     * An arbitrary `String` name to help the user identify and manage bodies.\n\t     *\n\t     * @property label\n\t     * @type string\n\t     * @default \"Body\"\n\t     */\n\t\n\t    /**\n\t     * An array of bodies that make up this body. \n\t     * The first body in the array must always be a self reference to the current body instance.\n\t     * All bodies in the `parts` array together form a single rigid compound body.\n\t     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n\t     * Parts themselves should never be added to a `World`, only the parent body should be.\n\t     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n\t     *\n\t     * @property parts\n\t     * @type body[]\n\t     */\n\t\n\t    /**\n\t     * A self reference if the body is _not_ a part of another body.\n\t     * Otherwise this is a reference to the body that this is a part of.\n\t     * See `body.parts`.\n\t     *\n\t     * @property parent\n\t     * @type body\n\t     */\n\t\n\t    /**\n\t     * A `Number` specifying the angle of the body, in radians.\n\t     *\n\t     * @property angle\n\t     * @type number\n\t     * @default 0\n\t     */\n\t\n\t    /**\n\t     * An array of `Vector` objects that specify the convex hull of the rigid body.\n\t     * These should be provided about the origin `(0, 0)`. E.g.\n\t     *\n\t     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n\t     *\n\t     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n\t     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n\t     *\n\t     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n\t     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n\t     *\n\t     * @property vertices\n\t     * @type vector[]\n\t     */\n\t\n\t    /**\n\t     * A `Vector` that specifies the current world-space position of the body.\n\t     *\n\t     * @property position\n\t     * @type vector\n\t     * @default { x: 0, y: 0 }\n\t     */\n\t\n\t    /**\n\t     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n\t     *\n\t     * @property force\n\t     * @type vector\n\t     * @default { x: 0, y: 0 }\n\t     */\n\t\n\t    /**\n\t     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n\t     *\n\t     * @property torque\n\t     * @type number\n\t     * @default 0\n\t     */\n\t\n\t    /**\n\t     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n\t     *\n\t     * @readOnly\n\t     * @property speed\n\t     * @type number\n\t     * @default 0\n\t     */\n\t\n\t    /**\n\t     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n\t     *\n\t     * @readOnly\n\t     * @property angularSpeed\n\t     * @type number\n\t     * @default 0\n\t     */\n\t\n\t    /**\n\t     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n\t     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n\t     *\n\t     * @readOnly\n\t     * @property velocity\n\t     * @type vector\n\t     * @default { x: 0, y: 0 }\n\t     */\n\t\n\t    /**\n\t     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n\t     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n\t     *\n\t     * @readOnly\n\t     * @property angularVelocity\n\t     * @type number\n\t     * @default 0\n\t     */\n\t\n\t    /**\n\t     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n\t     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n\t     *\n\t     * @property isStatic\n\t     * @type boolean\n\t     * @default false\n\t     */\n\t\n\t    /**\n\t     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n\t     *\n\t     * @property isSensor\n\t     * @type boolean\n\t     * @default false\n\t     */\n\t\n\t    /**\n\t     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n\t     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n\t     *\n\t     * @property isSleeping\n\t     * @type boolean\n\t     * @default false\n\t     */\n\t\n\t    /**\n\t     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n\t     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n\t     *\n\t     * @readOnly\n\t     * @property motion\n\t     * @type number\n\t     * @default 0\n\t     */\n\t\n\t    /**\n\t     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n\t     *\n\t     * @property sleepThreshold\n\t     * @type number\n\t     * @default 60\n\t     */\n\t\n\t    /**\n\t     * A `Number` that defines the density of the body, that is its mass per unit area.\n\t     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n\t     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n\t     *\n\t     * @property density\n\t     * @type number\n\t     * @default 0.001\n\t     */\n\t\n\t    /**\n\t     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n\t     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n\t     *\n\t     * @property mass\n\t     * @type number\n\t     */\n\t\n\t    /**\n\t     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n\t     * If you modify this value, you must also modify the `body.mass` property.\n\t     *\n\t     * @property inverseMass\n\t     * @type number\n\t     */\n\t\n\t    /**\n\t     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n\t     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n\t     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n\t     *\n\t     * @property inertia\n\t     * @type number\n\t     */\n\t\n\t    /**\n\t     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n\t     * If you modify this value, you must also modify the `body.inertia` property.\n\t     *\n\t     * @property inverseInertia\n\t     * @type number\n\t     */\n\t\n\t    /**\n\t     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n\t     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n\t     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n\t     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n\t     *\n\t     *     Math.max(bodyA.restitution, bodyB.restitution)\n\t     *\n\t     * @property restitution\n\t     * @type number\n\t     * @default 0\n\t     */\n\t\n\t    /**\n\t     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n\t     * A value of `0` means that the body may slide indefinitely.\n\t     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n\t     *\n\t     * The effects of the value may be non-linear. \n\t     * High values may be unstable depending on the body.\n\t     * The engine uses a Coulomb friction model including static and kinetic friction.\n\t     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n\t     *\n\t     *     Math.min(bodyA.friction, bodyB.friction)\n\t     *\n\t     * @property friction\n\t     * @type number\n\t     * @default 0.1\n\t     */\n\t\n\t    /**\n\t     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n\t     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n\t     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n\t     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n\t     *\n\t     * @property frictionStatic\n\t     * @type number\n\t     * @default 0.5\n\t     */\n\t\n\t    /**\n\t     * A `Number` that defines the air friction of the body (air resistance). \n\t     * A value of `0` means the body will never slow as it moves through space.\n\t     * The higher the value, the faster a body slows when moving through space.\n\t     * The effects of the value are non-linear. \n\t     *\n\t     * @property frictionAir\n\t     * @type number\n\t     * @default 0.01\n\t     */\n\t\n\t    /**\n\t     * An `Object` that specifies the collision filtering properties of this body.\n\t     *\n\t     * Collisions between two bodies will obey the following rules:\n\t     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n\t     *   they will always collide if the value is positive, and they will never collide\n\t     *   if the value is negative.\n\t     * - If the two bodies have different values of `collisionFilter.group` or if one\n\t     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n\t     *\n\t     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n\t     * value is used as a bit field and the category should have only one bit set, meaning that\n\t     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n\t     * different collision categories available.\n\t     *\n\t     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n\t     * the categories it collides with (the value is the bitwise AND value of all these categories).\n\t     *\n\t     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n\t     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n\t     * are both true.\n\t     *\n\t     * @property collisionFilter\n\t     * @type object\n\t     */\n\t\n\t    /**\n\t     * An Integer `Number`, that specifies the collision group this body belongs to.\n\t     * See `body.collisionFilter` for more information.\n\t     *\n\t     * @property collisionFilter.group\n\t     * @type object\n\t     * @default 0\n\t     */\n\t\n\t    /**\n\t     * A bit field that specifies the collision category this body belongs to.\n\t     * The category value should have only one bit set, for example `0x0001`.\n\t     * This means there are up to 32 unique collision categories available.\n\t     * See `body.collisionFilter` for more information.\n\t     *\n\t     * @property collisionFilter.category\n\t     * @type object\n\t     * @default 1\n\t     */\n\t\n\t    /**\n\t     * A bit mask that specifies the collision categories this body may collide with.\n\t     * See `body.collisionFilter` for more information.\n\t     *\n\t     * @property collisionFilter.mask\n\t     * @type object\n\t     * @default -1\n\t     */\n\t\n\t    /**\n\t     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n\t     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n\t     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n\t     *\n\t     * @property slop\n\t     * @type number\n\t     * @default 0.05\n\t     */\n\t\n\t    /**\n\t     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n\t     *\n\t     * @property timeScale\n\t     * @type number\n\t     * @default 1\n\t     */\n\t\n\t    /**\n\t     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n\t     *\n\t     * @property render\n\t     * @type object\n\t     */\n\t\n\t    /**\n\t     * A flag that indicates if the body should be rendered.\n\t     *\n\t     * @property render.visible\n\t     * @type boolean\n\t     * @default true\n\t     */\n\t\n\t    /**\n\t     * Sets the opacity to use when rendering.\n\t     *\n\t     * @property render.opacity\n\t     * @type number\n\t     * @default 1\n\t    */\n\t\n\t    /**\n\t     * An `Object` that defines the sprite properties to use when rendering, if any.\n\t     *\n\t     * @property render.sprite\n\t     * @type object\n\t     */\n\t\n\t    /**\n\t     * An `String` that defines the path to the image to use as the sprite texture, if any.\n\t     *\n\t     * @property render.sprite.texture\n\t     * @type string\n\t     */\n\t     \n\t    /**\n\t     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n\t     *\n\t     * @property render.sprite.xScale\n\t     * @type number\n\t     * @default 1\n\t     */\n\t\n\t    /**\n\t     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n\t     *\n\t     * @property render.sprite.yScale\n\t     * @type number\n\t     * @default 1\n\t     */\n\t\n\t     /**\n\t      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n\t      *\n\t      * @property render.sprite.xOffset\n\t      * @type number\n\t      * @default 0\n\t      */\n\t\n\t     /**\n\t      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n\t      *\n\t      * @property render.sprite.yOffset\n\t      * @type number\n\t      * @default 0\n\t      */\n\t\n\t    /**\n\t     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n\t     * A value of `0` means no outline will be rendered.\n\t     *\n\t     * @property render.lineWidth\n\t     * @type number\n\t     * @default 1.5\n\t     */\n\t\n\t    /**\n\t     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n\t     * It is the same as when using a canvas, so it accepts CSS style property values.\n\t     *\n\t     * @property render.fillStyle\n\t     * @type string\n\t     * @default a random colour\n\t     */\n\t\n\t    /**\n\t     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n\t     * It is the same as when using a canvas, so it accepts CSS style property values.\n\t     *\n\t     * @property render.strokeStyle\n\t     * @type string\n\t     * @default a random colour\n\t     */\n\t\n\t    /**\n\t     * An array of unique axis vectors (edge normals) used for collision detection.\n\t     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n\t     * They are constantly updated by `Body.update` during the simulation.\n\t     *\n\t     * @property axes\n\t     * @type vector[]\n\t     */\n\t     \n\t    /**\n\t     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n\t     *\n\t     * @property area\n\t     * @type string\n\t     * @default \n\t     */\n\t\n\t    /**\n\t     * A `Bounds` object that defines the AABB region for the body.\n\t     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n\t     *\n\t     * @property bounds\n\t     * @type bounds\n\t     */\n\t\n\t})();\n\t\n\t},{\"../core/Common\":14,\"../core/Sleeping\":20,\"../geometry/Axes\":23,\"../geometry/Bounds\":24,\"../geometry/Vector\":26,\"../geometry/Vertices\":27,\"../render/Render\":29}],2:[function(require,module,exports){\n\t/**\n\t* The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n\t* A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n\t* It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n\t* Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\n\t*\n\t* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\t*\n\t* @class Composite\n\t*/\n\t\n\tvar Composite = {};\n\t\n\tmodule.exports = Composite;\n\t\n\tvar Events = require('../core/Events');\n\tvar Common = require('../core/Common');\n\tvar Body = require('./Body');\n\t\n\t(function() {\n\t\n\t    /**\n\t     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n\t     * See the properites section below for detailed information on what you can pass via the `options` object.\n\t     * @method create\n\t     * @param {} [options]\n\t     * @return {composite} A new composite\n\t     */\n\t    Composite.create = function(options) {\n\t        return Common.extend({ \n\t            id: Common.nextId(),\n\t            type: 'composite',\n\t            parent: null,\n\t            isModified: false,\n\t            bodies: [], \n\t            constraints: [], \n\t            composites: [],\n\t            label: 'Composite'\n\t        }, options);\n\t    };\n\t\n\t    /**\n\t     * Sets the composite's `isModified` flag. \n\t     * If `updateParents` is true, all parents will be set (default: false).\n\t     * If `updateChildren` is true, all children will be set (default: false).\n\t     * @method setModified\n\t     * @param {composite} composite\n\t     * @param {boolean} isModified\n\t     * @param {boolean} [updateParents=false]\n\t     * @param {boolean} [updateChildren=false]\n\t     */\n\t    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n\t        composite.isModified = isModified;\n\t\n\t        if (updateParents && composite.parent) {\n\t            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n\t        }\n\t\n\t        if (updateChildren) {\n\t            for(var i = 0; i < composite.composites.length; i++) {\n\t                var childComposite = composite.composites[i];\n\t                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\n\t     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n\t     * @method add\n\t     * @param {composite} composite\n\t     * @param {} object\n\t     * @return {composite} The original composite with the objects added\n\t     */\n\t    Composite.add = function(composite, object) {\n\t        var objects = [].concat(object);\n\t\n\t        Events.trigger(composite, 'beforeAdd', { object: object });\n\t\n\t        for (var i = 0; i < objects.length; i++) {\n\t            var obj = objects[i];\n\t\n\t            switch (obj.type) {\n\t\n\t            case 'body':\n\t                // skip adding compound parts\n\t                if (obj.parent !== obj) {\n\t                    Common.log('Composite.add: skipped adding a compound body part (you must add its parent instead)', 'warn');\n\t                    break;\n\t                }\n\t\n\t                Composite.addBody(composite, obj);\n\t                break;\n\t            case 'constraint':\n\t                Composite.addConstraint(composite, obj);\n\t                break;\n\t            case 'composite':\n\t                Composite.addComposite(composite, obj);\n\t                break;\n\t            case 'mouseConstraint':\n\t                Composite.addConstraint(composite, obj.constraint);\n\t                break;\n\t\n\t            }\n\t        }\n\t\n\t        Events.trigger(composite, 'afterAdd', { object: object });\n\t\n\t        return composite;\n\t    };\n\t\n\t    /**\n\t     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n\t     * Optionally searching its children recursively.\n\t     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n\t     * @method remove\n\t     * @param {composite} composite\n\t     * @param {} object\n\t     * @param {boolean} [deep=false]\n\t     * @return {composite} The original composite with the objects removed\n\t     */\n\t    Composite.remove = function(composite, object, deep) {\n\t        var objects = [].concat(object);\n\t\n\t        Events.trigger(composite, 'beforeRemove', { object: object });\n\t\n\t        for (var i = 0; i < objects.length; i++) {\n\t            var obj = objects[i];\n\t\n\t            switch (obj.type) {\n\t\n\t            case 'body':\n\t                Composite.removeBody(composite, obj, deep);\n\t                break;\n\t            case 'constraint':\n\t                Composite.removeConstraint(composite, obj, deep);\n\t                break;\n\t            case 'composite':\n\t                Composite.removeComposite(composite, obj, deep);\n\t                break;\n\t            case 'mouseConstraint':\n\t                Composite.removeConstraint(composite, obj.constraint);\n\t                break;\n\t\n\t            }\n\t        }\n\t\n\t        Events.trigger(composite, 'afterRemove', { object: object });\n\t\n\t        return composite;\n\t    };\n\t\n\t    /**\n\t     * Adds a composite to the given composite.\n\t     * @private\n\t     * @method addComposite\n\t     * @param {composite} compositeA\n\t     * @param {composite} compositeB\n\t     * @return {composite} The original compositeA with the objects from compositeB added\n\t     */\n\t    Composite.addComposite = function(compositeA, compositeB) {\n\t        compositeA.composites.push(compositeB);\n\t        compositeB.parent = compositeA;\n\t        Composite.setModified(compositeA, true, true, false);\n\t        return compositeA;\n\t    };\n\t\n\t    /**\n\t     * Removes a composite from the given composite, and optionally searching its children recursively.\n\t     * @private\n\t     * @method removeComposite\n\t     * @param {composite} compositeA\n\t     * @param {composite} compositeB\n\t     * @param {boolean} [deep=false]\n\t     * @return {composite} The original compositeA with the composite removed\n\t     */\n\t    Composite.removeComposite = function(compositeA, compositeB, deep) {\n\t        var position = Common.indexOf(compositeA.composites, compositeB);\n\t        if (position !== -1) {\n\t            Composite.removeCompositeAt(compositeA, position);\n\t            Composite.setModified(compositeA, true, true, false);\n\t        }\n\t\n\t        if (deep) {\n\t            for (var i = 0; i < compositeA.composites.length; i++){\n\t                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n\t            }\n\t        }\n\t\n\t        return compositeA;\n\t    };\n\t\n\t    /**\n\t     * Removes a composite from the given composite.\n\t     * @private\n\t     * @method removeCompositeAt\n\t     * @param {composite} composite\n\t     * @param {number} position\n\t     * @return {composite} The original composite with the composite removed\n\t     */\n\t    Composite.removeCompositeAt = function(composite, position) {\n\t        composite.composites.splice(position, 1);\n\t        Composite.setModified(composite, true, true, false);\n\t        return composite;\n\t    };\n\t\n\t    /**\n\t     * Adds a body to the given composite.\n\t     * @private\n\t     * @method addBody\n\t     * @param {composite} composite\n\t     * @param {body} body\n\t     * @return {composite} The original composite with the body added\n\t     */\n\t    Composite.addBody = function(composite, body) {\n\t        composite.bodies.push(body);\n\t        Composite.setModified(composite, true, true, false);\n\t        return composite;\n\t    };\n\t\n\t    /**\n\t     * Removes a body from the given composite, and optionally searching its children recursively.\n\t     * @private\n\t     * @method removeBody\n\t     * @param {composite} composite\n\t     * @param {body} body\n\t     * @param {boolean} [deep=false]\n\t     * @return {composite} The original composite with the body removed\n\t     */\n\t    Composite.removeBody = function(composite, body, deep) {\n\t        var position = Common.indexOf(composite.bodies, body);\n\t        if (position !== -1) {\n\t            Composite.removeBodyAt(composite, position);\n\t            Composite.setModified(composite, true, true, false);\n\t        }\n\t\n\t        if (deep) {\n\t            for (var i = 0; i < composite.composites.length; i++){\n\t                Composite.removeBody(composite.composites[i], body, true);\n\t            }\n\t        }\n\t\n\t        return composite;\n\t    };\n\t\n\t    /**\n\t     * Removes a body from the given composite.\n\t     * @private\n\t     * @method removeBodyAt\n\t     * @param {composite} composite\n\t     * @param {number} position\n\t     * @return {composite} The original composite with the body removed\n\t     */\n\t    Composite.removeBodyAt = function(composite, position) {\n\t        composite.bodies.splice(position, 1);\n\t        Composite.setModified(composite, true, true, false);\n\t        return composite;\n\t    };\n\t\n\t    /**\n\t     * Adds a constraint to the given composite.\n\t     * @private\n\t     * @method addConstraint\n\t     * @param {composite} composite\n\t     * @param {constraint} constraint\n\t     * @return {composite} The original composite with the constraint added\n\t     */\n\t    Composite.addConstraint = function(composite, constraint) {\n\t        composite.constraints.push(constraint);\n\t        Composite.setModified(composite, true, true, false);\n\t        return composite;\n\t    };\n\t\n\t    /**\n\t     * Removes a constraint from the given composite, and optionally searching its children recursively.\n\t     * @private\n\t     * @method removeConstraint\n\t     * @param {composite} composite\n\t     * @param {constraint} constraint\n\t     * @param {boolean} [deep=false]\n\t     * @return {composite} The original composite with the constraint removed\n\t     */\n\t    Composite.removeConstraint = function(composite, constraint, deep) {\n\t        var position = Common.indexOf(composite.constraints, constraint);\n\t        if (position !== -1) {\n\t            Composite.removeConstraintAt(composite, position);\n\t        }\n\t\n\t        if (deep) {\n\t            for (var i = 0; i < composite.composites.length; i++){\n\t                Composite.removeConstraint(composite.composites[i], constraint, true);\n\t            }\n\t        }\n\t\n\t        return composite;\n\t    };\n\t\n\t    /**\n\t     * Removes a body from the given composite.\n\t     * @private\n\t     * @method removeConstraintAt\n\t     * @param {composite} composite\n\t     * @param {number} position\n\t     * @return {composite} The original composite with the constraint removed\n\t     */\n\t    Composite.removeConstraintAt = function(composite, position) {\n\t        composite.constraints.splice(position, 1);\n\t        Composite.setModified(composite, true, true, false);\n\t        return composite;\n\t    };\n\t\n\t    /**\n\t     * Removes all bodies, constraints and composites from the given composite.\n\t     * Optionally clearing its children recursively.\n\t     * @method clear\n\t     * @param {composite} composite\n\t     * @param {boolean} keepStatic\n\t     * @param {boolean} [deep=false]\n\t     */\n\t    Composite.clear = function(composite, keepStatic, deep) {\n\t        if (deep) {\n\t            for (var i = 0; i < composite.composites.length; i++){\n\t                Composite.clear(composite.composites[i], keepStatic, true);\n\t            }\n\t        }\n\t        \n\t        if (keepStatic) {\n\t            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n\t        } else {\n\t            composite.bodies.length = 0;\n\t        }\n\t\n\t        composite.constraints.length = 0;\n\t        composite.composites.length = 0;\n\t        Composite.setModified(composite, true, true, false);\n\t\n\t        return composite;\n\t    };\n\t\n\t    /**\n\t     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n\t     * @method allBodies\n\t     * @param {composite} composite\n\t     * @return {body[]} All the bodies\n\t     */\n\t    Composite.allBodies = function(composite) {\n\t        var bodies = [].concat(composite.bodies);\n\t\n\t        for (var i = 0; i < composite.composites.length; i++)\n\t            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\t\n\t        return bodies;\n\t    };\n\t\n\t    /**\n\t     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n\t     * @method allConstraints\n\t     * @param {composite} composite\n\t     * @return {constraint[]} All the constraints\n\t     */\n\t    Composite.allConstraints = function(composite) {\n\t        var constraints = [].concat(composite.constraints);\n\t\n\t        for (var i = 0; i < composite.composites.length; i++)\n\t            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\t\n\t        return constraints;\n\t    };\n\t\n\t    /**\n\t     * Returns all composites in the given composite, including all composites in its children, recursively.\n\t     * @method allComposites\n\t     * @param {composite} composite\n\t     * @return {composite[]} All the composites\n\t     */\n\t    Composite.allComposites = function(composite) {\n\t        var composites = [].concat(composite.composites);\n\t\n\t        for (var i = 0; i < composite.composites.length; i++)\n\t            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\t\n\t        return composites;\n\t    };\n\t\n\t    /**\n\t     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n\t     * @method get\n\t     * @param {composite} composite\n\t     * @param {number} id\n\t     * @param {string} type\n\t     * @return {object} The requested object, if found\n\t     */\n\t    Composite.get = function(composite, id, type) {\n\t        var objects,\n\t            object;\n\t\n\t        switch (type) {\n\t        case 'body':\n\t            objects = Composite.allBodies(composite);\n\t            break;\n\t        case 'constraint':\n\t            objects = Composite.allConstraints(composite);\n\t            break;\n\t        case 'composite':\n\t            objects = Composite.allComposites(composite).concat(composite);\n\t            break;\n\t        }\n\t\n\t        if (!objects)\n\t            return null;\n\t\n\t        object = objects.filter(function(object) { \n\t            return object.id.toString() === id.toString(); \n\t        });\n\t\n\t        return object.length === 0 ? null : object[0];\n\t    };\n\t\n\t    /**\n\t     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n\t     * @method move\n\t     * @param {compositeA} compositeA\n\t     * @param {object[]} objects\n\t     * @param {compositeB} compositeB\n\t     * @return {composite} Returns compositeA\n\t     */\n\t    Composite.move = function(compositeA, objects, compositeB) {\n\t        Composite.remove(compositeA, objects);\n\t        Composite.add(compositeB, objects);\n\t        return compositeA;\n\t    };\n\t\n\t    /**\n\t     * Assigns new ids for all objects in the composite, recursively.\n\t     * @method rebase\n\t     * @param {composite} composite\n\t     * @return {composite} Returns composite\n\t     */\n\t    Composite.rebase = function(composite) {\n\t        var objects = Composite.allBodies(composite)\n\t                        .concat(Composite.allConstraints(composite))\n\t                        .concat(Composite.allComposites(composite));\n\t\n\t        for (var i = 0; i < objects.length; i++) {\n\t            objects[i].id = Common.nextId();\n\t        }\n\t\n\t        Composite.setModified(composite, true, true, false);\n\t\n\t        return composite;\n\t    };\n\t\n\t    /**\n\t     * Translates all children in the composite by a given vector relative to their current positions, \n\t     * without imparting any velocity.\n\t     * @method translate\n\t     * @param {composite} composite\n\t     * @param {vector} translation\n\t     * @param {bool} [recursive=true]\n\t     */\n\t    Composite.translate = function(composite, translation, recursive) {\n\t        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\t\n\t        for (var i = 0; i < bodies.length; i++) {\n\t            Body.translate(bodies[i], translation);\n\t        }\n\t\n\t        Composite.setModified(composite, true, true, false);\n\t\n\t        return composite;\n\t    };\n\t\n\t    /**\n\t     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n\t     * @method rotate\n\t     * @param {composite} composite\n\t     * @param {number} rotation\n\t     * @param {vector} point\n\t     * @param {bool} [recursive=true]\n\t     */\n\t    Composite.rotate = function(composite, rotation, point, recursive) {\n\t        var cos = Math.cos(rotation),\n\t            sin = Math.sin(rotation),\n\t            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\t\n\t        for (var i = 0; i < bodies.length; i++) {\n\t            var body = bodies[i],\n\t                dx = body.position.x - point.x,\n\t                dy = body.position.y - point.y;\n\t                \n\t            Body.setPosition(body, {\n\t                x: point.x + (dx * cos - dy * sin),\n\t                y: point.y + (dx * sin + dy * cos)\n\t            });\n\t\n\t            Body.rotate(body, rotation);\n\t        }\n\t\n\t        Composite.setModified(composite, true, true, false);\n\t\n\t        return composite;\n\t    };\n\t\n\t    /**\n\t     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n\t     * @method scale\n\t     * @param {composite} composite\n\t     * @param {number} scaleX\n\t     * @param {number} scaleY\n\t     * @param {vector} point\n\t     * @param {bool} [recursive=true]\n\t     */\n\t    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n\t        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\t\n\t        for (var i = 0; i < bodies.length; i++) {\n\t            var body = bodies[i],\n\t                dx = body.position.x - point.x,\n\t                dy = body.position.y - point.y;\n\t                \n\t            Body.setPosition(body, {\n\t                x: point.x + dx * scaleX,\n\t                y: point.y + dy * scaleY\n\t            });\n\t\n\t            Body.scale(body, scaleX, scaleY);\n\t        }\n\t\n\t        Composite.setModified(composite, true, true, false);\n\t\n\t        return composite;\n\t    };\n\t\n\t    /*\n\t    *\n\t    *  Events Documentation\n\t    *\n\t    */\n\t\n\t    /**\n\t    * Fired when a call to `Composite.add` is made, before objects have been added.\n\t    *\n\t    * @event beforeAdd\n\t    * @param {} event An event object\n\t    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n\t    * @param {} event.source The source object of the event\n\t    * @param {} event.name The name of the event\n\t    */\n\t\n\t    /**\n\t    * Fired when a call to `Composite.add` is made, after objects have been added.\n\t    *\n\t    * @event afterAdd\n\t    * @param {} event An event object\n\t    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n\t    * @param {} event.source The source object of the event\n\t    * @param {} event.name The name of the event\n\t    */\n\t\n\t    /**\n\t    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n\t    *\n\t    * @event beforeRemove\n\t    * @param {} event An event object\n\t    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n\t    * @param {} event.source The source object of the event\n\t    * @param {} event.name The name of the event\n\t    */\n\t\n\t    /**\n\t    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n\t    *\n\t    * @event afterRemove\n\t    * @param {} event An event object\n\t    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n\t    * @param {} event.source The source object of the event\n\t    * @param {} event.name The name of the event\n\t    */\n\t\n\t    /*\n\t    *\n\t    *  Properties Documentation\n\t    *\n\t    */\n\t\n\t    /**\n\t     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n\t     *\n\t     * @property id\n\t     * @type number\n\t     */\n\t\n\t    /**\n\t     * A `String` denoting the type of object.\n\t     *\n\t     * @property type\n\t     * @type string\n\t     * @default \"composite\"\n\t     * @readOnly\n\t     */\n\t\n\t    /**\n\t     * An arbitrary `String` name to help the user identify and manage composites.\n\t     *\n\t     * @property label\n\t     * @type string\n\t     * @default \"Composite\"\n\t     */\n\t\n\t    /**\n\t     * A flag that specifies whether the composite has been modified during the current step.\n\t     * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n\t     * If you need to change it manually, you should use the `Composite.setModified` method.\n\t     *\n\t     * @property isModified\n\t     * @type boolean\n\t     * @default false\n\t     */\n\t\n\t    /**\n\t     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n\t     *\n\t     * @property parent\n\t     * @type composite\n\t     * @default null\n\t     */\n\t\n\t    /**\n\t     * An array of `Body` that are _direct_ children of this composite.\n\t     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n\t     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n\t     *\n\t     * @property bodies\n\t     * @type body[]\n\t     * @default []\n\t     */\n\t\n\t    /**\n\t     * An array of `Constraint` that are _direct_ children of this composite.\n\t     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n\t     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n\t     *\n\t     * @property constraints\n\t     * @type constraint[]\n\t     * @default []\n\t     */\n\t\n\t    /**\n\t     * An array of `Composite` that are _direct_ children of this composite.\n\t     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n\t     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n\t     *\n\t     * @property composites\n\t     * @type composite[]\n\t     * @default []\n\t     */\n\t\n\t})();\n\t\n\t},{\"../core/Common\":14,\"../core/Events\":16,\"./Body\":1}],3:[function(require,module,exports){\n\t/**\n\t* The `Matter.World` module contains methods for creating and manipulating the world composite.\n\t* A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n\t* A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n\t* It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n\t* There are also a few methods here that alias those in `Matter.Composite` for easier readability.\n\t*\n\t* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\t*\n\t* @class World\n\t* @extends Composite\n\t*/\n\t\n\tvar World = {};\n\t\n\tmodule.exports = World;\n\t\n\tvar Composite = require('./Composite');\n\tvar Constraint = require('../constraint/Constraint');\n\tvar Common = require('../core/Common');\n\t\n\t(function() {\n\t\n\t    /**\n\t     * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n\t     * See the properties section below for detailed information on what you can pass via the `options` object.\n\t     * @method create\n\t     * @constructor\n\t     * @param {} options\n\t     * @return {world} A new world\n\t     */\n\t    World.create = function(options) {\n\t        var composite = Composite.create();\n\t\n\t        var defaults = {\n\t            label: 'World',\n\t            gravity: {\n\t                x: 0,\n\t                y: 1,\n\t                scale: 0.001\n\t            },\n\t            bounds: { \n\t                min: { x: -Infinity, y: -Infinity }, \n\t                max: { x: Infinity, y: Infinity } \n\t            }\n\t        };\n\t        \n\t        return Common.extend(composite, defaults, options);\n\t    };\n\t\n\t    /*\n\t    *\n\t    *  Properties Documentation\n\t    *\n\t    */\n\t\n\t    /**\n\t     * The gravity to apply on the world.\n\t     *\n\t     * @property gravity\n\t     * @type object\n\t     */\n\t\n\t    /**\n\t     * The gravity x component.\n\t     *\n\t     * @property gravity.x\n\t     * @type object\n\t     * @default 0\n\t     */\n\t\n\t    /**\n\t     * The gravity y component.\n\t     *\n\t     * @property gravity.y\n\t     * @type object\n\t     * @default 1\n\t     */\n\t\n\t    /**\n\t     * The gravity scale factor.\n\t     *\n\t     * @property gravity.scale\n\t     * @type object\n\t     * @default 0.001\n\t     */\n\t\n\t    /**\n\t     * A `Bounds` object that defines the world bounds for collision detection.\n\t     *\n\t     * @property bounds\n\t     * @type bounds\n\t     * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\n\t     */\n\t\n\t    // World is a Composite body\n\t    // see src/module/Outro.js for these aliases:\n\t    \n\t    /**\n\t     * An alias for Composite.clear\n\t     * @method clear\n\t     * @param {world} world\n\t     * @param {boolean} keepStatic\n\t     */\n\t\n\t    /**\n\t     * An alias for Composite.add\n\t     * @method addComposite\n\t     * @param {world} world\n\t     * @param {composite} composite\n\t     * @return {world} The original world with the objects from composite added\n\t     */\n\t    \n\t     /**\n\t      * An alias for Composite.addBody\n\t      * @method addBody\n\t      * @param {world} world\n\t      * @param {body} body\n\t      * @return {world} The original world with the body added\n\t      */\n\t\n\t     /**\n\t      * An alias for Composite.addConstraint\n\t      * @method addConstraint\n\t      * @param {world} world\n\t      * @param {constraint} constraint\n\t      * @return {world} The original world with the constraint added\n\t      */\n\t\n\t})();\n\t\n\t},{\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Composite\":2}],4:[function(require,module,exports){\n\t/**\n\t* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n\t*\n\t* @class Contact\n\t*/\n\t\n\tvar Contact = {};\n\t\n\tmodule.exports = Contact;\n\t\n\t(function() {\n\t\n\t    /**\n\t     * Creates a new contact.\n\t     * @method create\n\t     * @param {vertex} vertex\n\t     * @return {contact} A new contact\n\t     */\n\t    Contact.create = function(vertex) {\n\t        return {\n\t            id: Contact.id(vertex),\n\t            vertex: vertex,\n\t            normalImpulse: 0,\n\t            tangentImpulse: 0\n\t        };\n\t    };\n\t    \n\t    /**\n\t     * Generates a contact id.\n\t     * @method id\n\t     * @param {vertex} vertex\n\t     * @return {string} Unique contactID\n\t     */\n\t    Contact.id = function(vertex) {\n\t        return vertex.body.id + '_' + vertex.index;\n\t    };\n\t\n\t})();\n\t\n\t},{}],5:[function(require,module,exports){\n\t/**\n\t* The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n\t*\n\t* @class Detector\n\t*/\n\t\n\t// TODO: speculative contacts\n\t\n\tvar Detector = {};\n\t\n\tmodule.exports = Detector;\n\t\n\tvar SAT = require('./SAT');\n\tvar Pair = require('./Pair');\n\tvar Bounds = require('../geometry/Bounds');\n\t\n\t(function() {\n\t\n\t    /**\n\t     * Finds all collisions given a list of pairs.\n\t     * @method collisions\n\t     * @param {pair[]} broadphasePairs\n\t     * @param {engine} engine\n\t     * @return {array} collisions\n\t     */\n\t    Detector.collisions = function(broadphasePairs, engine) {\n\t        var collisions = [],\n\t            pairsTable = engine.pairs.table;\n\t\n\t        \n\t        for (var i = 0; i < broadphasePairs.length; i++) {\n\t            var bodyA = broadphasePairs[i][0], \n\t                bodyB = broadphasePairs[i][1];\n\t\n\t            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping))\n\t                continue;\n\t            \n\t            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter))\n\t                continue;\n\t\n\t\n\t            // mid phase\n\t            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n\t                for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n\t                    var partA = bodyA.parts[j];\n\t\n\t                    for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n\t                        var partB = bodyB.parts[k];\n\t\n\t                        if ((partA === bodyA && partB === bodyB) || Bounds.overlaps(partA.bounds, partB.bounds)) {\n\t                            // find a previous collision we could reuse\n\t                            var pairId = Pair.id(partA, partB),\n\t                                pair = pairsTable[pairId],\n\t                                previousCollision;\n\t\n\t                            if (pair && pair.isActive) {\n\t                                previousCollision = pair.collision;\n\t                            } else {\n\t                                previousCollision = null;\n\t                            }\n\t\n\t                            // narrow phase\n\t                            var collision = SAT.collides(partA, partB, previousCollision);\n\t\n\t\n\t                            if (collision.collided) {\n\t                                collisions.push(collision);\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t        return collisions;\n\t    };\n\t\n\t    /**\n\t     * Returns `true` if both supplied collision filters will allow a collision to occur.\n\t     * See `body.collisionFilter` for more information.\n\t     * @method canCollide\n\t     * @param {} filterA\n\t     * @param {} filterB\n\t     * @return {bool} `true` if collision can occur\n\t     */\n\t    Detector.canCollide = function(filterA, filterB) {\n\t        if (filterA.group === filterB.group && filterA.group !== 0)\n\t            return filterA.group > 0;\n\t\n\t        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n\t    };\n\t\n\t})();\n\t\n\t},{\"../geometry/Bounds\":24,\"./Pair\":7,\"./SAT\":11}],6:[function(require,module,exports){\n\t/**\n\t* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n\t*\n\t* @class Grid\n\t*/\n\t\n\tvar Grid = {};\n\t\n\tmodule.exports = Grid;\n\t\n\tvar Pair = require('./Pair');\n\tvar Detector = require('./Detector');\n\tvar Common = require('../core/Common');\n\t\n\t(function() {\n\t\n\t    /**\n\t     * Creates a new grid.\n\t     * @method create\n\t     * @param {} options\n\t     * @return {grid} A new grid\n\t     */\n\t    Grid.create = function(options) {\n\t        var defaults = {\n\t            controller: Grid,\n\t            detector: Detector.collisions,\n\t            buckets: {},\n\t            pairs: {},\n\t            pairsList: [],\n\t            bucketWidth: 48,\n\t            bucketHeight: 48\n\t        };\n\t\n\t        return Common.extend(defaults, options);\n\t    };\n\t\n\t    /**\n\t     * The width of a single grid bucket.\n\t     *\n\t     * @property bucketWidth\n\t     * @type number\n\t     * @default 48\n\t     */\n\t\n\t    /**\n\t     * The height of a single grid bucket.\n\t     *\n\t     * @property bucketHeight\n\t     * @type number\n\t     * @default 48\n\t     */\n\t\n\t    /**\n\t     * Updates the grid.\n\t     * @method update\n\t     * @param {grid} grid\n\t     * @param {body[]} bodies\n\t     * @param {engine} engine\n\t     * @param {boolean} forceUpdate\n\t     */\n\t    Grid.update = function(grid, bodies, engine, forceUpdate) {\n\t        var i, col, row,\n\t            world = engine.world,\n\t            buckets = grid.buckets,\n\t            bucket,\n\t            bucketId,\n\t            gridChanged = false;\n\t\n\t\n\t        for (i = 0; i < bodies.length; i++) {\n\t            var body = bodies[i];\n\t\n\t            if (body.isSleeping && !forceUpdate)\n\t                continue;\n\t\n\t            // don't update out of world bodies\n\t            if (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n\t                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)\n\t                continue;\n\t\n\t            var newRegion = _getRegion(grid, body);\n\t\n\t            // if the body has changed grid region\n\t            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\t\n\t\n\t                if (!body.region || forceUpdate)\n\t                    body.region = newRegion;\n\t\n\t                var union = _regionUnion(newRegion, body.region);\n\t\n\t                // update grid buckets affected by region change\n\t                // iterate over the union of both regions\n\t                for (col = union.startCol; col <= union.endCol; col++) {\n\t                    for (row = union.startRow; row <= union.endRow; row++) {\n\t                        bucketId = _getBucketId(col, row);\n\t                        bucket = buckets[bucketId];\n\t\n\t                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n\t                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\t\n\t                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n\t                                                && row >= body.region.startRow && row <= body.region.endRow);\n\t\n\t                        // remove from old region buckets\n\t                        if (!isInsideNewRegion && isInsideOldRegion) {\n\t                            if (isInsideOldRegion) {\n\t                                if (bucket)\n\t                                    _bucketRemoveBody(grid, bucket, body);\n\t                            }\n\t                        }\n\t\n\t                        // add to new region buckets\n\t                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n\t                            if (!bucket)\n\t                                bucket = _createBucket(buckets, bucketId);\n\t                            _bucketAddBody(grid, bucket, body);\n\t                        }\n\t                    }\n\t                }\n\t\n\t                // set the new region\n\t                body.region = newRegion;\n\t\n\t                // flag changes so we can update pairs\n\t                gridChanged = true;\n\t            }\n\t        }\n\t\n\t        // update pairs list only if pairs changed (i.e. a body changed region)\n\t        if (gridChanged)\n\t            grid.pairsList = _createActivePairsList(grid);\n\t    };\n\t\n\t    /**\n\t     * Clears the grid.\n\t     * @method clear\n\t     * @param {grid} grid\n\t     */\n\t    Grid.clear = function(grid) {\n\t        grid.buckets = {};\n\t        grid.pairs = {};\n\t        grid.pairsList = [];\n\t    };\n\t\n\t    /**\n\t     * Finds the union of two regions.\n\t     * @method _regionUnion\n\t     * @private\n\t     * @param {} regionA\n\t     * @param {} regionB\n\t     * @return {} region\n\t     */\n\t    var _regionUnion = function(regionA, regionB) {\n\t        var startCol = Math.min(regionA.startCol, regionB.startCol),\n\t            endCol = Math.max(regionA.endCol, regionB.endCol),\n\t            startRow = Math.min(regionA.startRow, regionB.startRow),\n\t            endRow = Math.max(regionA.endRow, regionB.endRow);\n\t\n\t        return _createRegion(startCol, endCol, startRow, endRow);\n\t    };\n\t\n\t    /**\n\t     * Gets the region a given body falls in for a given grid.\n\t     * @method _getRegion\n\t     * @private\n\t     * @param {} grid\n\t     * @param {} body\n\t     * @return {} region\n\t     */\n\t    var _getRegion = function(grid, body) {\n\t        var bounds = body.bounds,\n\t            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n\t            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n\t            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n\t            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\t\n\t        return _createRegion(startCol, endCol, startRow, endRow);\n\t    };\n\t\n\t    /**\n\t     * Creates a region.\n\t     * @method _createRegion\n\t     * @private\n\t     * @param {} startCol\n\t     * @param {} endCol\n\t     * @param {} startRow\n\t     * @param {} endRow\n\t     * @return {} region\n\t     */\n\t    var _createRegion = function(startCol, endCol, startRow, endRow) {\n\t        return { \n\t            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n\t            startCol: startCol, \n\t            endCol: endCol, \n\t            startRow: startRow, \n\t            endRow: endRow \n\t        };\n\t    };\n\t\n\t    /**\n\t     * Gets the bucket id at the given position.\n\t     * @method _getBucketId\n\t     * @private\n\t     * @param {} column\n\t     * @param {} row\n\t     * @return {string} bucket id\n\t     */\n\t    var _getBucketId = function(column, row) {\n\t        return column + ',' + row;\n\t    };\n\t\n\t    /**\n\t     * Creates a bucket.\n\t     * @method _createBucket\n\t     * @private\n\t     * @param {} buckets\n\t     * @param {} bucketId\n\t     * @return {} bucket\n\t     */\n\t    var _createBucket = function(buckets, bucketId) {\n\t        var bucket = buckets[bucketId] = [];\n\t        return bucket;\n\t    };\n\t\n\t    /**\n\t     * Adds a body to a bucket.\n\t     * @method _bucketAddBody\n\t     * @private\n\t     * @param {} grid\n\t     * @param {} bucket\n\t     * @param {} body\n\t     */\n\t    var _bucketAddBody = function(grid, bucket, body) {\n\t        // add new pairs\n\t        for (var i = 0; i < bucket.length; i++) {\n\t            var bodyB = bucket[i];\n\t\n\t            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n\t                continue;\n\t\n\t            // keep track of the number of buckets the pair exists in\n\t            // important for Grid.update to work\n\t            var pairId = Pair.id(body, bodyB),\n\t                pair = grid.pairs[pairId];\n\t\n\t            if (pair) {\n\t                pair[2] += 1;\n\t            } else {\n\t                grid.pairs[pairId] = [body, bodyB, 1];\n\t            }\n\t        }\n\t\n\t        // add to bodies (after pairs, otherwise pairs with self)\n\t        bucket.push(body);\n\t    };\n\t\n\t    /**\n\t     * Removes a body from a bucket.\n\t     * @method _bucketRemoveBody\n\t     * @private\n\t     * @param {} grid\n\t     * @param {} bucket\n\t     * @param {} body\n\t     */\n\t    var _bucketRemoveBody = function(grid, bucket, body) {\n\t        // remove from bucket\n\t        bucket.splice(Common.indexOf(bucket, body), 1);\n\t\n\t        // update pair counts\n\t        for (var i = 0; i < bucket.length; i++) {\n\t            // keep track of the number of buckets the pair exists in\n\t            // important for _createActivePairsList to work\n\t            var bodyB = bucket[i],\n\t                pairId = Pair.id(body, bodyB),\n\t                pair = grid.pairs[pairId];\n\t\n\t            if (pair)\n\t                pair[2] -= 1;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Generates a list of the active pairs in the grid.\n\t     * @method _createActivePairsList\n\t     * @private\n\t     * @param {} grid\n\t     * @return [] pairs\n\t     */\n\t    var _createActivePairsList = function(grid) {\n\t        var pairKeys,\n\t            pair,\n\t            pairs = [];\n\t\n\t        // grid.pairs is used as a hashmap\n\t        pairKeys = Common.keys(grid.pairs);\n\t\n\t        // iterate over grid.pairs\n\t        for (var k = 0; k < pairKeys.length; k++) {\n\t            pair = grid.pairs[pairKeys[k]];\n\t\n\t            // if pair exists in at least one bucket\n\t            // it is a pair that needs further collision testing so push it\n\t            if (pair[2] > 0) {\n\t                pairs.push(pair);\n\t            } else {\n\t                delete grid.pairs[pairKeys[k]];\n\t            }\n\t        }\n\t\n\t        return pairs;\n\t    };\n\t    \n\t})();\n\t\n\t},{\"../core/Common\":14,\"./Detector\":5,\"./Pair\":7}],7:[function(require,module,exports){\n\t/**\n\t* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n\t*\n\t* @class Pair\n\t*/\n\t\n\tvar Pair = {};\n\t\n\tmodule.exports = Pair;\n\t\n\tvar Contact = require('./Contact');\n\t\n\t(function() {\n\t    \n\t    /**\n\t     * Creates a pair.\n\t     * @method create\n\t     * @param {collision} collision\n\t     * @param {number} timestamp\n\t     * @return {pair} A new pair\n\t     */\n\t    Pair.create = function(collision, timestamp) {\n\t        var bodyA = collision.bodyA,\n\t            bodyB = collision.bodyB,\n\t            parentA = collision.parentA,\n\t            parentB = collision.parentB;\n\t\n\t        var pair = {\n\t            id: Pair.id(bodyA, bodyB),\n\t            bodyA: bodyA,\n\t            bodyB: bodyB,\n\t            contacts: {},\n\t            activeContacts: [],\n\t            separation: 0,\n\t            isActive: true,\n\t            isSensor: bodyA.isSensor || bodyB.isSensor,\n\t            timeCreated: timestamp,\n\t            timeUpdated: timestamp,\n\t            inverseMass: parentA.inverseMass + parentB.inverseMass,\n\t            friction: Math.min(parentA.friction, parentB.friction),\n\t            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n\t            restitution: Math.max(parentA.restitution, parentB.restitution),\n\t            slop: Math.max(parentA.slop, parentB.slop)\n\t        };\n\t\n\t        Pair.update(pair, collision, timestamp);\n\t\n\t        return pair;\n\t    };\n\t\n\t    /**\n\t     * Updates a pair given a collision.\n\t     * @method update\n\t     * @param {pair} pair\n\t     * @param {collision} collision\n\t     * @param {number} timestamp\n\t     */\n\t    Pair.update = function(pair, collision, timestamp) {\n\t        var contacts = pair.contacts,\n\t            supports = collision.supports,\n\t            activeContacts = pair.activeContacts,\n\t            parentA = collision.parentA,\n\t            parentB = collision.parentB;\n\t        \n\t        pair.collision = collision;\n\t        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n\t        pair.friction = Math.min(parentA.friction, parentB.friction);\n\t        pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n\t        pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n\t        pair.slop = Math.max(parentA.slop, parentB.slop);\n\t        activeContacts.length = 0;\n\t        \n\t        if (collision.collided) {\n\t            for (var i = 0; i < supports.length; i++) {\n\t                var support = supports[i],\n\t                    contactId = Contact.id(support),\n\t                    contact = contacts[contactId];\n\t\n\t                if (contact) {\n\t                    activeContacts.push(contact);\n\t                } else {\n\t                    activeContacts.push(contacts[contactId] = Contact.create(support));\n\t                }\n\t            }\n\t\n\t            pair.separation = collision.depth;\n\t            Pair.setActive(pair, true, timestamp);\n\t        } else {\n\t            if (pair.isActive === true)\n\t                Pair.setActive(pair, false, timestamp);\n\t        }\n\t    };\n\t    \n\t    /**\n\t     * Set a pair as active or inactive.\n\t     * @method setActive\n\t     * @param {pair} pair\n\t     * @param {bool} isActive\n\t     * @param {number} timestamp\n\t     */\n\t    Pair.setActive = function(pair, isActive, timestamp) {\n\t        if (isActive) {\n\t            pair.isActive = true;\n\t            pair.timeUpdated = timestamp;\n\t        } else {\n\t            pair.isActive = false;\n\t            pair.activeContacts.length = 0;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Get the id for the given pair.\n\t     * @method id\n\t     * @param {body} bodyA\n\t     * @param {body} bodyB\n\t     * @return {string} Unique pairId\n\t     */\n\t    Pair.id = function(bodyA, bodyB) {\n\t        if (bodyA.id < bodyB.id) {\n\t            return bodyA.id + '_' + bodyB.id;\n\t        } else {\n\t            return bodyB.id + '_' + bodyA.id;\n\t        }\n\t    };\n\t\n\t})();\n\t\n\t},{\"./Contact\":4}],8:[function(require,module,exports){\n\t/**\n\t* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n\t*\n\t* @class Pairs\n\t*/\n\t\n\tvar Pairs = {};\n\t\n\tmodule.exports = Pairs;\n\t\n\tvar Pair = require('./Pair');\n\tvar Common = require('../core/Common');\n\t\n\t(function() {\n\t    \n\t    var _pairMaxIdleLife = 1000;\n\t\n\t    /**\n\t     * Creates a new pairs structure.\n\t     * @method create\n\t     * @param {object} options\n\t     * @return {pairs} A new pairs structure\n\t     */\n\t    Pairs.create = function(options) {\n\t        return Common.extend({ \n\t            table: {},\n\t            list: [],\n\t            collisionStart: [],\n\t            collisionActive: [],\n\t            collisionEnd: []\n\t        }, options);\n\t    };\n\t\n\t    /**\n\t     * Updates pairs given a list of collisions.\n\t     * @method update\n\t     * @param {object} pairs\n\t     * @param {collision[]} collisions\n\t     * @param {number} timestamp\n\t     */\n\t    Pairs.update = function(pairs, collisions, timestamp) {\n\t        var pairsList = pairs.list,\n\t            pairsTable = pairs.table,\n\t            collisionStart = pairs.collisionStart,\n\t            collisionEnd = pairs.collisionEnd,\n\t            collisionActive = pairs.collisionActive,\n\t            activePairIds = [],\n\t            collision,\n\t            pairId,\n\t            pair,\n\t            i;\n\t\n\t        // clear collision state arrays, but maintain old reference\n\t        collisionStart.length = 0;\n\t        collisionEnd.length = 0;\n\t        collisionActive.length = 0;\n\t\n\t        for (i = 0; i < collisions.length; i++) {\n\t            collision = collisions[i];\n\t\n\t            if (collision.collided) {\n\t                pairId = Pair.id(collision.bodyA, collision.bodyB);\n\t                activePairIds.push(pairId);\n\t\n\t                pair = pairsTable[pairId];\n\t                \n\t                if (pair) {\n\t                    // pair already exists (but may or may not be active)\n\t                    if (pair.isActive) {\n\t                        // pair exists and is active\n\t                        collisionActive.push(pair);\n\t                    } else {\n\t                        // pair exists but was inactive, so a collision has just started again\n\t                        collisionStart.push(pair);\n\t                    }\n\t\n\t                    // update the pair\n\t                    Pair.update(pair, collision, timestamp);\n\t                } else {\n\t                    // pair did not exist, create a new pair\n\t                    pair = Pair.create(collision, timestamp);\n\t                    pairsTable[pairId] = pair;\n\t\n\t                    // push the new pair\n\t                    collisionStart.push(pair);\n\t                    pairsList.push(pair);\n\t                }\n\t            }\n\t        }\n\t\n\t        // deactivate previously active pairs that are now inactive\n\t        for (i = 0; i < pairsList.length; i++) {\n\t            pair = pairsList[i];\n\t            if (pair.isActive && Common.indexOf(activePairIds, pair.id) === -1) {\n\t                Pair.setActive(pair, false, timestamp);\n\t                collisionEnd.push(pair);\n\t            }\n\t        }\n\t    };\n\t    \n\t    /**\n\t     * Finds and removes pairs that have been inactive for a set amount of time.\n\t     * @method removeOld\n\t     * @param {object} pairs\n\t     * @param {number} timestamp\n\t     */\n\t    Pairs.removeOld = function(pairs, timestamp) {\n\t        var pairsList = pairs.list,\n\t            pairsTable = pairs.table,\n\t            indexesToRemove = [],\n\t            pair,\n\t            collision,\n\t            pairIndex,\n\t            i;\n\t\n\t        for (i = 0; i < pairsList.length; i++) {\n\t            pair = pairsList[i];\n\t            collision = pair.collision;\n\t            \n\t            // never remove sleeping pairs\n\t            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n\t                pair.timeUpdated = timestamp;\n\t                continue;\n\t            }\n\t\n\t            // if pair is inactive for too long, mark it to be removed\n\t            if (timestamp - pair.timeUpdated > _pairMaxIdleLife) {\n\t                indexesToRemove.push(i);\n\t            }\n\t        }\n\t\n\t        // remove marked pairs\n\t        for (i = 0; i < indexesToRemove.length; i++) {\n\t            pairIndex = indexesToRemove[i] - i;\n\t            pair = pairsList[pairIndex];\n\t            delete pairsTable[pair.id];\n\t            pairsList.splice(pairIndex, 1);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Clears the given pairs structure.\n\t     * @method clear\n\t     * @param {pairs} pairs\n\t     * @return {pairs} pairs\n\t     */\n\t    Pairs.clear = function(pairs) {\n\t        pairs.table = {};\n\t        pairs.list.length = 0;\n\t        pairs.collisionStart.length = 0;\n\t        pairs.collisionActive.length = 0;\n\t        pairs.collisionEnd.length = 0;\n\t        return pairs;\n\t    };\n\t\n\t})();\n\t\n\t},{\"../core/Common\":14,\"./Pair\":7}],9:[function(require,module,exports){\n\t/**\n\t* The `Matter.Query` module contains methods for performing collision queries.\n\t*\n\t* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\t*\n\t* @class Query\n\t*/\n\t\n\tvar Query = {};\n\t\n\tmodule.exports = Query;\n\t\n\tvar Vector = require('../geometry/Vector');\n\tvar SAT = require('./SAT');\n\tvar Bounds = require('../geometry/Bounds');\n\tvar Bodies = require('../factory/Bodies');\n\tvar Vertices = require('../geometry/Vertices');\n\t\n\t(function() {\n\t\n\t    /**\n\t     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n\t     * @method ray\n\t     * @param {body[]} bodies\n\t     * @param {vector} startPoint\n\t     * @param {vector} endPoint\n\t     * @param {number} [rayWidth]\n\t     * @return {object[]} Collisions\n\t     */\n\t    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n\t        rayWidth = rayWidth || 1e-100;\n\t\n\t        var rayAngle = Vector.angle(startPoint, endPoint),\n\t            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n\t            rayX = (endPoint.x + startPoint.x) * 0.5,\n\t            rayY = (endPoint.y + startPoint.y) * 0.5,\n\t            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n\t            collisions = [];\n\t\n\t        for (var i = 0; i < bodies.length; i++) {\n\t            var bodyA = bodies[i];\n\t            \n\t            if (Bounds.overlaps(bodyA.bounds, ray.bounds)) {\n\t                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n\t                    var part = bodyA.parts[j];\n\t\n\t                    if (Bounds.overlaps(part.bounds, ray.bounds)) {\n\t                        var collision = SAT.collides(part, ray);\n\t                        if (collision.collided) {\n\t                            collision.body = collision.bodyA = collision.bodyB = bodyA;\n\t                            collisions.push(collision);\n\t                            break;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t        return collisions;\n\t    };\n\t\n\t    /**\n\t     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n\t     * @method region\n\t     * @param {body[]} bodies\n\t     * @param {bounds} bounds\n\t     * @param {bool} [outside=false]\n\t     * @return {body[]} The bodies matching the query\n\t     */\n\t    Query.region = function(bodies, bounds, outside) {\n\t        var result = [];\n\t\n\t        for (var i = 0; i < bodies.length; i++) {\n\t            var body = bodies[i],\n\t                overlaps = Bounds.overlaps(body.bounds, bounds);\n\t            if ((overlaps && !outside) || (!overlaps && outside))\n\t                result.push(body);\n\t        }\n\t\n\t        return result;\n\t    };\n\t\n\t    /**\n\t     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n\t     * @method point\n\t     * @param {body[]} bodies\n\t     * @param {vector} point\n\t     * @return {body[]} The bodies matching the query\n\t     */\n\t    Query.point = function(bodies, point) {\n\t        var result = [];\n\t\n\t        for (var i = 0; i < bodies.length; i++) {\n\t            var body = bodies[i];\n\t            \n\t            if (Bounds.contains(body.bounds, point)) {\n\t                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n\t                    var part = body.parts[j];\n\t\n\t                    if (Bounds.contains(part.bounds, point)\n\t                        && Vertices.contains(part.vertices, point)) {\n\t                        result.push(body);\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t        return result;\n\t    };\n\t\n\t})();\n\t\n\t},{\"../factory/Bodies\":21,\"../geometry/Bounds\":24,\"../geometry/Vector\":26,\"../geometry/Vertices\":27,\"./SAT\":11}],10:[function(require,module,exports){\n\t/**\n\t* The `Matter.Resolver` module contains methods for resolving collision pairs.\n\t*\n\t* @class Resolver\n\t*/\n\t\n\tvar Resolver = {};\n\t\n\tmodule.exports = Resolver;\n\t\n\tvar Vertices = require('../geometry/Vertices');\n\tvar Vector = require('../geometry/Vector');\n\tvar Common = require('../core/Common');\n\tvar Bounds = require('../geometry/Bounds');\n\t\n\t(function() {\n\t\n\t    Resolver._restingThresh = 4;\n\t    Resolver._restingThreshTangent = 6;\n\t    Resolver._positionDampen = 0.9;\n\t    Resolver._positionWarming = 0.8;\n\t    Resolver._frictionNormalMultiplier = 5;\n\t\n\t    /**\n\t     * Prepare pairs for position solving.\n\t     * @method preSolvePosition\n\t     * @param {pair[]} pairs\n\t     */\n\t    Resolver.preSolvePosition = function(pairs) {\n\t        var i,\n\t            pair,\n\t            activeCount;\n\t\n\t        // find total contacts on each body\n\t        for (i = 0; i < pairs.length; i++) {\n\t            pair = pairs[i];\n\t            \n\t            if (!pair.isActive)\n\t                continue;\n\t            \n\t            activeCount = pair.activeContacts.length;\n\t            pair.collision.parentA.totalContacts += activeCount;\n\t            pair.collision.parentB.totalContacts += activeCount;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Find a solution for pair positions.\n\t     * @method solvePosition\n\t     * @param {pair[]} pairs\n\t     * @param {number} timeScale\n\t     */\n\t    Resolver.solvePosition = function(pairs, timeScale) {\n\t        var i,\n\t            pair,\n\t            collision,\n\t            bodyA,\n\t            bodyB,\n\t            normal,\n\t            bodyBtoA,\n\t            contactShare,\n\t            positionImpulse,\n\t            contactCount = {},\n\t            tempA = Vector._temp[0],\n\t            tempB = Vector._temp[1],\n\t            tempC = Vector._temp[2],\n\t            tempD = Vector._temp[3];\n\t\n\t        // find impulses required to resolve penetration\n\t        for (i = 0; i < pairs.length; i++) {\n\t            pair = pairs[i];\n\t            \n\t            if (!pair.isActive || pair.isSensor)\n\t                continue;\n\t\n\t            collision = pair.collision;\n\t            bodyA = collision.parentA;\n\t            bodyB = collision.parentB;\n\t            normal = collision.normal;\n\t\n\t            // get current separation between body edges involved in collision\n\t            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), \n\t                                    Vector.add(bodyA.positionImpulse, \n\t                                        Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n\t\n\t            pair.separation = Vector.dot(normal, bodyBtoA);\n\t        }\n\t        \n\t        for (i = 0; i < pairs.length; i++) {\n\t            pair = pairs[i];\n\t\n\t            if (!pair.isActive || pair.isSensor || pair.separation < 0)\n\t                continue;\n\t            \n\t            collision = pair.collision;\n\t            bodyA = collision.parentA;\n\t            bodyB = collision.parentB;\n\t            normal = collision.normal;\n\t            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\t\n\t            if (bodyA.isStatic || bodyB.isStatic)\n\t                positionImpulse *= 2;\n\t            \n\t            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n\t                contactShare = Resolver._positionDampen / bodyA.totalContacts;\n\t                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n\t                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n\t            }\n\t\n\t            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n\t                contactShare = Resolver._positionDampen / bodyB.totalContacts;\n\t                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n\t                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Apply position resolution.\n\t     * @method postSolvePosition\n\t     * @param {body[]} bodies\n\t     */\n\t    Resolver.postSolvePosition = function(bodies) {\n\t        for (var i = 0; i < bodies.length; i++) {\n\t            var body = bodies[i];\n\t\n\t            // reset contact count\n\t            body.totalContacts = 0;\n\t\n\t            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n\t                // update body geometry\n\t                for (var j = 0; j < body.parts.length; j++) {\n\t                    var part = body.parts[j];\n\t                    Vertices.translate(part.vertices, body.positionImpulse);\n\t                    Bounds.update(part.bounds, part.vertices, body.velocity);\n\t                    part.position.x += body.positionImpulse.x;\n\t                    part.position.y += body.positionImpulse.y;\n\t                }\n\t\n\t                // move the body without changing velocity\n\t                body.positionPrev.x += body.positionImpulse.x;\n\t                body.positionPrev.y += body.positionImpulse.y;\n\t\n\t                if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n\t                    // reset cached impulse if the body has velocity along it\n\t                    body.positionImpulse.x = 0;\n\t                    body.positionImpulse.y = 0;\n\t                } else {\n\t                    // warm the next iteration\n\t                    body.positionImpulse.x *= Resolver._positionWarming;\n\t                    body.positionImpulse.y *= Resolver._positionWarming;\n\t                }\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Prepare pairs for velocity solving.\n\t     * @method preSolveVelocity\n\t     * @param {pair[]} pairs\n\t     */\n\t    Resolver.preSolveVelocity = function(pairs) {\n\t        var i,\n\t            j,\n\t            pair,\n\t            contacts,\n\t            collision,\n\t            bodyA,\n\t            bodyB,\n\t            normal,\n\t            tangent,\n\t            contact,\n\t            contactVertex,\n\t            normalImpulse,\n\t            tangentImpulse,\n\t            offset,\n\t            impulse = Vector._temp[0],\n\t            tempA = Vector._temp[1];\n\t        \n\t        for (i = 0; i < pairs.length; i++) {\n\t            pair = pairs[i];\n\t            \n\t            if (!pair.isActive || pair.isSensor)\n\t                continue;\n\t            \n\t            contacts = pair.activeContacts;\n\t            collision = pair.collision;\n\t            bodyA = collision.parentA;\n\t            bodyB = collision.parentB;\n\t            normal = collision.normal;\n\t            tangent = collision.tangent;\n\t\n\t            // resolve each contact\n\t            for (j = 0; j < contacts.length; j++) {\n\t                contact = contacts[j];\n\t                contactVertex = contact.vertex;\n\t                normalImpulse = contact.normalImpulse;\n\t                tangentImpulse = contact.tangentImpulse;\n\t\n\t                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n\t                    // total impulse from contact\n\t                    impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n\t                    impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n\t                    \n\t                    // apply impulse from contact\n\t                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n\t                        offset = Vector.sub(contactVertex, bodyA.position, tempA);\n\t                        bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n\t                        bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n\t                        bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n\t                    }\n\t\n\t                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n\t                        offset = Vector.sub(contactVertex, bodyB.position, tempA);\n\t                        bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n\t                        bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n\t                        bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Find a solution for pair velocities.\n\t     * @method solveVelocity\n\t     * @param {pair[]} pairs\n\t     * @param {number} timeScale\n\t     */\n\t    Resolver.solveVelocity = function(pairs, timeScale) {\n\t        var timeScaleSquared = timeScale * timeScale,\n\t            impulse = Vector._temp[0],\n\t            tempA = Vector._temp[1],\n\t            tempB = Vector._temp[2],\n\t            tempC = Vector._temp[3],\n\t            tempD = Vector._temp[4],\n\t            tempE = Vector._temp[5];\n\t        \n\t        for (var i = 0; i < pairs.length; i++) {\n\t            var pair = pairs[i];\n\t            \n\t            if (!pair.isActive || pair.isSensor)\n\t                continue;\n\t            \n\t            var collision = pair.collision,\n\t                bodyA = collision.parentA,\n\t                bodyB = collision.parentB,\n\t                normal = collision.normal,\n\t                tangent = collision.tangent,\n\t                contacts = pair.activeContacts,\n\t                contactShare = 1 / contacts.length;\n\t\n\t            // update body velocities\n\t            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n\t            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n\t            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n\t            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n\t            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n\t            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\t\n\t            // resolve each contact\n\t            for (var j = 0; j < contacts.length; j++) {\n\t                var contact = contacts[j],\n\t                    contactVertex = contact.vertex,\n\t                    offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n\t                    offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n\t                    velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n\t                    velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD), \n\t                    relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n\t                    normalVelocity = Vector.dot(normal, relativeVelocity);\n\t\n\t                var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n\t                    tangentSpeed = Math.abs(tangentVelocity),\n\t                    tangentVelocityDirection = Common.sign(tangentVelocity);\n\t\n\t                // raw impulses\n\t                var normalImpulse = (1 + pair.restitution) * normalVelocity,\n\t                    normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier;\n\t\n\t                // coulomb friction\n\t                var tangentImpulse = tangentVelocity,\n\t                    maxFriction = Infinity;\n\t\n\t                if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n\t                    maxFriction = tangentSpeed;\n\t                    tangentImpulse = Common.clamp(\n\t                        pair.friction * tangentVelocityDirection * timeScaleSquared,\n\t                        -maxFriction, maxFriction\n\t                    );\n\t                }\n\t\n\t                // modify impulses accounting for mass, inertia and offset\n\t                var oAcN = Vector.cross(offsetA, normal),\n\t                    oBcN = Vector.cross(offsetB, normal),\n\t                    share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN  + bodyB.inverseInertia * oBcN * oBcN);\n\t\n\t                normalImpulse *= share;\n\t                tangentImpulse *= share;\n\t\n\t                // handle high velocity and resting collisions separately\n\t                if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n\t                    // high normal velocity so clear cached contact normal impulse\n\t                    contact.normalImpulse = 0;\n\t                } else {\n\t                    // solve resting collision constraints using Erin Catto's method (GDC08)\n\t                    // impulse constraint tends to 0\n\t                    var contactNormalImpulse = contact.normalImpulse;\n\t                    contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n\t                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n\t                }\n\t\n\t                // handle high velocity and resting collisions separately\n\t                if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n\t                    // high tangent velocity so clear cached contact tangent impulse\n\t                    contact.tangentImpulse = 0;\n\t                } else {\n\t                    // solve resting collision constraints using Erin Catto's method (GDC08)\n\t                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n\t                    var contactTangentImpulse = contact.tangentImpulse;\n\t                    contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n\t                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n\t                }\n\t\n\t                // total impulse from contact\n\t                impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n\t                impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n\t                \n\t                // apply impulse from contact\n\t                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n\t                    bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n\t                    bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n\t                    bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n\t                }\n\t\n\t                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n\t                    bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n\t                    bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n\t                    bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n\t                }\n\t            }\n\t        }\n\t    };\n\t\n\t})();\n\t\n\t},{\"../core/Common\":14,\"../geometry/Bounds\":24,\"../geometry/Vector\":26,\"../geometry/Vertices\":27}],11:[function(require,module,exports){\n\t/**\n\t* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n\t*\n\t* @class SAT\n\t*/\n\t\n\t// TODO: true circles and curves\n\t\n\tvar SAT = {};\n\t\n\tmodule.exports = SAT;\n\t\n\tvar Vertices = require('../geometry/Vertices');\n\tvar Vector = require('../geometry/Vector');\n\t\n\t(function() {\n\t\n\t    /**\n\t     * Detect collision between two bodies using the Separating Axis Theorem.\n\t     * @method collides\n\t     * @param {body} bodyA\n\t     * @param {body} bodyB\n\t     * @param {collision} previousCollision\n\t     * @return {collision} collision\n\t     */\n\t    SAT.collides = function(bodyA, bodyB, previousCollision) {\n\t        var overlapAB,\n\t            overlapBA, \n\t            minOverlap,\n\t            collision,\n\t            prevCol = previousCollision,\n\t            canReusePrevCol = false;\n\t\n\t        if (prevCol) {\n\t            // estimate total motion\n\t            var parentA = bodyA.parent,\n\t                parentB = bodyB.parent,\n\t                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed\n\t                       + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed;\n\t\n\t            // we may be able to (partially) reuse collision result \n\t            // but only safe if collision was resting\n\t            canReusePrevCol = prevCol && prevCol.collided && motion < 0.2;\n\t\n\t            // reuse collision object\n\t            collision = prevCol;\n\t        } else {\n\t            collision = { collided: false, bodyA: bodyA, bodyB: bodyB };\n\t        }\n\t\n\t        if (prevCol && canReusePrevCol) {\n\t            // if we can reuse the collision result\n\t            // we only need to test the previously found axis\n\t            var axisBodyA = collision.axisBody,\n\t                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n\t                axes = [axisBodyA.axes[prevCol.axisNumber]];\n\t\n\t            minOverlap = _overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n\t            collision.reused = true;\n\t\n\t            if (minOverlap.overlap <= 0) {\n\t                collision.collided = false;\n\t                return collision;\n\t            }\n\t        } else {\n\t            // if we can't reuse a result, perform a full SAT test\n\t\n\t            overlapAB = _overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\t\n\t            if (overlapAB.overlap <= 0) {\n\t                collision.collided = false;\n\t                return collision;\n\t            }\n\t\n\t            overlapBA = _overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\t\n\t            if (overlapBA.overlap <= 0) {\n\t                collision.collided = false;\n\t                return collision;\n\t            }\n\t\n\t            if (overlapAB.overlap < overlapBA.overlap) {\n\t                minOverlap = overlapAB;\n\t                collision.axisBody = bodyA;\n\t            } else {\n\t                minOverlap = overlapBA;\n\t                collision.axisBody = bodyB;\n\t            }\n\t\n\t            // important for reuse later\n\t            collision.axisNumber = minOverlap.axisNumber;\n\t        }\n\t\n\t        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n\t        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n\t        collision.collided = true;\n\t        collision.normal = minOverlap.axis;\n\t        collision.depth = minOverlap.overlap;\n\t        collision.parentA = collision.bodyA.parent;\n\t        collision.parentB = collision.bodyB.parent;\n\t        \n\t        bodyA = collision.bodyA;\n\t        bodyB = collision.bodyB;\n\t\n\t        // ensure normal is facing away from bodyA\n\t        if (Vector.dot(collision.normal, Vector.sub(bodyB.position, bodyA.position)) > 0) \n\t            collision.normal = Vector.neg(collision.normal);\n\t\n\t        collision.tangent = Vector.perp(collision.normal);\n\t\n\t        collision.penetration = { \n\t            x: collision.normal.x * collision.depth, \n\t            y: collision.normal.y * collision.depth \n\t        };\n\t\n\t        // find support points, there is always either exactly one or two\n\t        var verticesB = _findSupports(bodyA, bodyB, collision.normal),\n\t            supports = collision.supports || [];\n\t        supports.length = 0;\n\t\n\t        // find the supports from bodyB that are inside bodyA\n\t        if (Vertices.contains(bodyA.vertices, verticesB[0]))\n\t            supports.push(verticesB[0]);\n\t\n\t        if (Vertices.contains(bodyA.vertices, verticesB[1]))\n\t            supports.push(verticesB[1]);\n\t\n\t        // find the supports from bodyA that are inside bodyB\n\t        if (supports.length < 2) {\n\t            var verticesA = _findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n\t                \n\t            if (Vertices.contains(bodyB.vertices, verticesA[0]))\n\t                supports.push(verticesA[0]);\n\t\n\t            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1]))\n\t                supports.push(verticesA[1]);\n\t        }\n\t\n\t        // account for the edge case of overlapping but no vertex containment\n\t        if (supports.length < 1)\n\t            supports = [verticesB[0]];\n\t        \n\t        collision.supports = supports;\n\t\n\t        return collision;\n\t    };\n\t\n\t    /**\n\t     * Find the overlap between two sets of vertices.\n\t     * @method _overlapAxes\n\t     * @private\n\t     * @param {} verticesA\n\t     * @param {} verticesB\n\t     * @param {} axes\n\t     * @return result\n\t     */\n\t    var _overlapAxes = function(verticesA, verticesB, axes) {\n\t        var projectionA = Vector._temp[0], \n\t            projectionB = Vector._temp[1],\n\t            result = { overlap: Number.MAX_VALUE },\n\t            overlap,\n\t            axis;\n\t\n\t        for (var i = 0; i < axes.length; i++) {\n\t            axis = axes[i];\n\t\n\t            _projectToAxis(projectionA, verticesA, axis);\n\t            _projectToAxis(projectionB, verticesB, axis);\n\t\n\t            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\t\n\t            if (overlap <= 0) {\n\t                result.overlap = overlap;\n\t                return result;\n\t            }\n\t\n\t            if (overlap < result.overlap) {\n\t                result.overlap = overlap;\n\t                result.axis = axis;\n\t                result.axisNumber = i;\n\t            }\n\t        }\n\t\n\t        return result;\n\t    };\n\t\n\t    /**\n\t     * Projects vertices on an axis and returns an interval.\n\t     * @method _projectToAxis\n\t     * @private\n\t     * @param {} projection\n\t     * @param {} vertices\n\t     * @param {} axis\n\t     */\n\t    var _projectToAxis = function(projection, vertices, axis) {\n\t        var min = Vector.dot(vertices[0], axis),\n\t            max = min;\n\t\n\t        for (var i = 1; i < vertices.length; i += 1) {\n\t            var dot = Vector.dot(vertices[i], axis);\n\t\n\t            if (dot > max) { \n\t                max = dot; \n\t            } else if (dot < min) { \n\t                min = dot; \n\t            }\n\t        }\n\t\n\t        projection.min = min;\n\t        projection.max = max;\n\t    };\n\t    \n\t    /**\n\t     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n\t     * @method _findSupports\n\t     * @private\n\t     * @param {} bodyA\n\t     * @param {} bodyB\n\t     * @param {} normal\n\t     * @return [vector]\n\t     */\n\t    var _findSupports = function(bodyA, bodyB, normal) {\n\t        var nearestDistance = Number.MAX_VALUE,\n\t            vertexToBody = Vector._temp[0],\n\t            vertices = bodyB.vertices,\n\t            bodyAPosition = bodyA.position,\n\t            distance,\n\t            vertex,\n\t            vertexA,\n\t            vertexB;\n\t\n\t        // find closest vertex on bodyB\n\t        for (var i = 0; i < vertices.length; i++) {\n\t            vertex = vertices[i];\n\t            vertexToBody.x = vertex.x - bodyAPosition.x;\n\t            vertexToBody.y = vertex.y - bodyAPosition.y;\n\t            distance = -Vector.dot(normal, vertexToBody);\n\t\n\t            if (distance < nearestDistance) {\n\t                nearestDistance = distance;\n\t                vertexA = vertex;\n\t            }\n\t        }\n\t\n\t        // find next closest vertex using the two connected to it\n\t        var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n\t        vertex = vertices[prevIndex];\n\t        vertexToBody.x = vertex.x - bodyAPosition.x;\n\t        vertexToBody.y = vertex.y - bodyAPosition.y;\n\t        nearestDistance = -Vector.dot(normal, vertexToBody);\n\t        vertexB = vertex;\n\t\n\t        var nextIndex = (vertexA.index + 1) % vertices.length;\n\t        vertex = vertices[nextIndex];\n\t        vertexToBody.x = vertex.x - bodyAPosition.x;\n\t        vertexToBody.y = vertex.y - bodyAPosition.y;\n\t        distance = -Vector.dot(normal, vertexToBody);\n\t        if (distance < nearestDistance) {\n\t            vertexB = vertex;\n\t        }\n\t\n\t        return [vertexA, vertexB];\n\t    };\n\t\n\t})();\n\t\n\t},{\"../geometry/Vector\":26,\"../geometry/Vertices\":27}],12:[function(require,module,exports){\n\t/**\n\t* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n\t* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n\t* The stiffness of constraints can be modified to create springs or elastic.\n\t*\n\t* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\t*\n\t* @class Constraint\n\t*/\n\t\n\t// TODO: fix instability issues with torque\n\t// TODO: linked constraints\n\t// TODO: breakable constraints\n\t// TODO: collision constraints\n\t// TODO: allow constrained bodies to sleep\n\t// TODO: handle 0 length constraints properly\n\t// TODO: impulse caching and warming\n\t\n\tvar Constraint = {};\n\t\n\tmodule.exports = Constraint;\n\t\n\tvar Vertices = require('../geometry/Vertices');\n\tvar Vector = require('../geometry/Vector');\n\tvar Sleeping = require('../core/Sleeping');\n\tvar Bounds = require('../geometry/Bounds');\n\tvar Axes = require('../geometry/Axes');\n\tvar Common = require('../core/Common');\n\t\n\t(function() {\n\t\n\t    var _minLength = 0.000001,\n\t        _minDifference = 0.001;\n\t\n\t    /**\n\t     * Creates a new constraint.\n\t     * All properties have default values, and many are pre-calculated automatically based on other properties.\n\t     * See the properties section below for detailed information on what you can pass via the `options` object.\n\t     * @method create\n\t     * @param {} options\n\t     * @return {constraint} constraint\n\t     */\n\t    Constraint.create = function(options) {\n\t        var constraint = options;\n\t\n\t        // if bodies defined but no points, use body centre\n\t        if (constraint.bodyA && !constraint.pointA)\n\t            constraint.pointA = { x: 0, y: 0 };\n\t        if (constraint.bodyB && !constraint.pointB)\n\t            constraint.pointB = { x: 0, y: 0 };\n\t\n\t        // calculate static length using initial world space points\n\t        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n\t            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n\t            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n\t    \n\t        constraint.length = constraint.length || length || _minLength;\n\t\n\t        // render\n\t        var render = {\n\t            visible: true,\n\t            lineWidth: 2,\n\t            strokeStyle: '#666'\n\t        };\n\t        \n\t        constraint.render = Common.extend(render, constraint.render);\n\t\n\t        // option defaults\n\t        constraint.id = constraint.id || Common.nextId();\n\t        constraint.label = constraint.label || 'Constraint';\n\t        constraint.type = 'constraint';\n\t        constraint.stiffness = constraint.stiffness || 1;\n\t        constraint.angularStiffness = constraint.angularStiffness || 0;\n\t        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n\t        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n\t\n\t        return constraint;\n\t    };\n\t\n\t    /**\n\t     * Solves all constraints in a list of collisions.\n\t     * @private\n\t     * @method solveAll\n\t     * @param {constraint[]} constraints\n\t     * @param {number} timeScale\n\t     */\n\t    Constraint.solveAll = function(constraints, timeScale) {\n\t        for (var i = 0; i < constraints.length; i++) {\n\t            Constraint.solve(constraints[i], timeScale);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Solves a distance constraint with Gauss-Siedel method.\n\t     * @private\n\t     * @method solve\n\t     * @param {constraint} constraint\n\t     * @param {number} timeScale\n\t     */\n\t    Constraint.solve = function(constraint, timeScale) {\n\t        var bodyA = constraint.bodyA,\n\t            bodyB = constraint.bodyB,\n\t            pointA = constraint.pointA,\n\t            pointB = constraint.pointB;\n\t\n\t        // update reference angle\n\t        if (bodyA && !bodyA.isStatic) {\n\t            constraint.pointA = Vector.rotate(pointA, bodyA.angle - constraint.angleA);\n\t            constraint.angleA = bodyA.angle;\n\t        }\n\t        \n\t        // update reference angle\n\t        if (bodyB && !bodyB.isStatic) {\n\t            constraint.pointB = Vector.rotate(pointB, bodyB.angle - constraint.angleB);\n\t            constraint.angleB = bodyB.angle;\n\t        }\n\t\n\t        var pointAWorld = pointA,\n\t            pointBWorld = pointB;\n\t\n\t        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n\t        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\t\n\t        if (!pointAWorld || !pointBWorld)\n\t            return;\n\t\n\t        var delta = Vector.sub(pointAWorld, pointBWorld),\n\t            currentLength = Vector.magnitude(delta);\n\t\n\t        // prevent singularity\n\t        if (currentLength === 0)\n\t            currentLength = _minLength;\n\t\n\t        // solve distance constraint with Gauss-Siedel method\n\t        var difference = (currentLength - constraint.length) / currentLength,\n\t            normal = Vector.div(delta, currentLength),\n\t            force = Vector.mult(delta, difference * 0.5 * constraint.stiffness * timeScale * timeScale);\n\t        \n\t        // if difference is very small, we can skip\n\t        if (Math.abs(1 - (currentLength / constraint.length)) < _minDifference * timeScale)\n\t            return;\n\t\n\t        var velocityPointA,\n\t            velocityPointB,\n\t            offsetA,\n\t            offsetB,\n\t            oAn,\n\t            oBn,\n\t            bodyADenom,\n\t            bodyBDenom;\n\t    \n\t        if (bodyA && !bodyA.isStatic) {\n\t            // point body offset\n\t            offsetA = { \n\t                x: pointAWorld.x - bodyA.position.x + force.x, \n\t                y: pointAWorld.y - bodyA.position.y + force.y\n\t            };\n\t            \n\t            // update velocity\n\t            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n\t            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n\t            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n\t            \n\t            // find point velocity and body mass\n\t            velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity));\n\t            oAn = Vector.dot(offsetA, normal);\n\t            bodyADenom = bodyA.inverseMass + bodyA.inverseInertia * oAn * oAn;\n\t        } else {\n\t            velocityPointA = { x: 0, y: 0 };\n\t            bodyADenom = bodyA ? bodyA.inverseMass : 0;\n\t        }\n\t            \n\t        if (bodyB && !bodyB.isStatic) {\n\t            // point body offset\n\t            offsetB = { \n\t                x: pointBWorld.x - bodyB.position.x - force.x, \n\t                y: pointBWorld.y - bodyB.position.y - force.y \n\t            };\n\t            \n\t            // update velocity\n\t            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n\t            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n\t            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\t\n\t            // find point velocity and body mass\n\t            velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity));\n\t            oBn = Vector.dot(offsetB, normal);\n\t            bodyBDenom = bodyB.inverseMass + bodyB.inverseInertia * oBn * oBn;\n\t        } else {\n\t            velocityPointB = { x: 0, y: 0 };\n\t            bodyBDenom = bodyB ? bodyB.inverseMass : 0;\n\t        }\n\t        \n\t        var relativeVelocity = Vector.sub(velocityPointB, velocityPointA),\n\t            normalImpulse = Vector.dot(normal, relativeVelocity) / (bodyADenom + bodyBDenom);\n\t    \n\t        if (normalImpulse > 0) normalImpulse = 0;\n\t    \n\t        var normalVelocity = {\n\t            x: normal.x * normalImpulse, \n\t            y: normal.y * normalImpulse\n\t        };\n\t\n\t        var torque;\n\t \n\t        if (bodyA && !bodyA.isStatic) {\n\t            torque = Vector.cross(offsetA, normalVelocity) * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n\t\n\t            // keep track of applied impulses for post solving\n\t            bodyA.constraintImpulse.x -= force.x;\n\t            bodyA.constraintImpulse.y -= force.y;\n\t            bodyA.constraintImpulse.angle += torque;\n\t\n\t            // apply forces\n\t            bodyA.position.x -= force.x;\n\t            bodyA.position.y -= force.y;\n\t            bodyA.angle += torque;\n\t        }\n\t\n\t        if (bodyB && !bodyB.isStatic) {\n\t            torque = Vector.cross(offsetB, normalVelocity) * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n\t\n\t            // keep track of applied impulses for post solving\n\t            bodyB.constraintImpulse.x += force.x;\n\t            bodyB.constraintImpulse.y += force.y;\n\t            bodyB.constraintImpulse.angle -= torque;\n\t            \n\t            // apply forces\n\t            bodyB.position.x += force.x;\n\t            bodyB.position.y += force.y;\n\t            bodyB.angle -= torque;\n\t        }\n\t\n\t    };\n\t\n\t    /**\n\t     * Performs body updates required after solving constraints.\n\t     * @private\n\t     * @method postSolveAll\n\t     * @param {body[]} bodies\n\t     */\n\t    Constraint.postSolveAll = function(bodies) {\n\t        for (var i = 0; i < bodies.length; i++) {\n\t            var body = bodies[i],\n\t                impulse = body.constraintImpulse;\n\t\n\t            if (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n\t                continue;\n\t            }\n\t\n\t            Sleeping.set(body, false);\n\t\n\t            // update geometry and reset\n\t            for (var j = 0; j < body.parts.length; j++) {\n\t                var part = body.parts[j];\n\t                \n\t                Vertices.translate(part.vertices, impulse);\n\t\n\t                if (j > 0) {\n\t                    part.position.x += impulse.x;\n\t                    part.position.y += impulse.y;\n\t                }\n\t\n\t                if (impulse.angle !== 0) {\n\t                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n\t                    Axes.rotate(part.axes, impulse.angle);\n\t                    if (j > 0) {\n\t                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n\t                    }\n\t                }\n\t\n\t                Bounds.update(part.bounds, part.vertices, body.velocity);\n\t            }\n\t\n\t            impulse.angle = 0;\n\t            impulse.x = 0;\n\t            impulse.y = 0;\n\t        }\n\t    };\n\t\n\t    /*\n\t    *\n\t    *  Properties Documentation\n\t    *\n\t    */\n\t\n\t    /**\n\t     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n\t     *\n\t     * @property id\n\t     * @type number\n\t     */\n\t\n\t    /**\n\t     * A `String` denoting the type of object.\n\t     *\n\t     * @property type\n\t     * @type string\n\t     * @default \"constraint\"\n\t     * @readOnly\n\t     */\n\t\n\t    /**\n\t     * An arbitrary `String` name to help the user identify and manage bodies.\n\t     *\n\t     * @property label\n\t     * @type string\n\t     * @default \"Constraint\"\n\t     */\n\t\n\t    /**\n\t     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n\t     *\n\t     * @property render\n\t     * @type object\n\t     */\n\t\n\t    /**\n\t     * A flag that indicates if the constraint should be rendered.\n\t     *\n\t     * @property render.visible\n\t     * @type boolean\n\t     * @default true\n\t     */\n\t\n\t    /**\n\t     * A `Number` that defines the line width to use when rendering the constraint outline.\n\t     * A value of `0` means no outline will be rendered.\n\t     *\n\t     * @property render.lineWidth\n\t     * @type number\n\t     * @default 2\n\t     */\n\t\n\t    /**\n\t     * A `String` that defines the stroke style to use when rendering the constraint outline.\n\t     * It is the same as when using a canvas, so it accepts CSS style property values.\n\t     *\n\t     * @property render.strokeStyle\n\t     * @type string\n\t     * @default a random colour\n\t     */\n\t\n\t    /**\n\t     * The first possible `Body` that this constraint is attached to.\n\t     *\n\t     * @property bodyA\n\t     * @type body\n\t     * @default null\n\t     */\n\t\n\t    /**\n\t     * The second possible `Body` that this constraint is attached to.\n\t     *\n\t     * @property bodyB\n\t     * @type body\n\t     * @default null\n\t     */\n\t\n\t    /**\n\t     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n\t     *\n\t     * @property pointA\n\t     * @type vector\n\t     * @default { x: 0, y: 0 }\n\t     */\n\t\n\t    /**\n\t     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n\t     *\n\t     * @property pointB\n\t     * @type vector\n\t     * @default { x: 0, y: 0 }\n\t     */\n\t\n\t    /**\n\t     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n\t     * A value of `1` means the constraint should be very stiff.\n\t     * A value of `0.2` means the constraint acts like a soft spring.\n\t     *\n\t     * @property stiffness\n\t     * @type number\n\t     * @default 1\n\t     */\n\t\n\t    /**\n\t     * A `Number` that specifies the target resting length of the constraint. \n\t     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n\t     *\n\t     * @property length\n\t     * @type number\n\t     */\n\t\n\t})();\n\t\n\t},{\"../core/Common\":14,\"../core/Sleeping\":20,\"../geometry/Axes\":23,\"../geometry/Bounds\":24,\"../geometry/Vector\":26,\"../geometry/Vertices\":27}],13:[function(require,module,exports){\n\t/**\n\t* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n\t* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n\t*\n\t* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\t*\n\t* @class MouseConstraint\n\t*/\n\t\n\tvar MouseConstraint = {};\n\t\n\tmodule.exports = MouseConstraint;\n\t\n\tvar Vertices = require('../geometry/Vertices');\n\tvar Sleeping = require('../core/Sleeping');\n\tvar Mouse = require('../core/Mouse');\n\tvar Events = require('../core/Events');\n\tvar Detector = require('../collision/Detector');\n\tvar Constraint = require('./Constraint');\n\tvar Composite = require('../body/Composite');\n\tvar Common = require('../core/Common');\n\tvar Bounds = require('../geometry/Bounds');\n\t\n\t(function() {\n\t\n\t    /**\n\t     * Creates a new mouse constraint.\n\t     * All properties have default values, and many are pre-calculated automatically based on other properties.\n\t     * See the properties section below for detailed information on what you can pass via the `options` object.\n\t     * @method create\n\t     * @param {engine} engine\n\t     * @param {} options\n\t     * @return {MouseConstraint} A new MouseConstraint\n\t     */\n\t    MouseConstraint.create = function(engine, options) {\n\t        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\t\n\t        if (!mouse) {\n\t            if (engine && engine.render && engine.render.canvas) {\n\t                mouse = Mouse.create(engine.render.canvas);\n\t            } else if (options && options.element) {\n\t                mouse = Mouse.create(options.element);\n\t            } else {\n\t                mouse = Mouse.create();\n\t                Common.log('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected', 'warn');\n\t            }\n\t        }\n\t\n\t        var constraint = Constraint.create({ \n\t            label: 'Mouse Constraint',\n\t            pointA: mouse.position,\n\t            pointB: { x: 0, y: 0 },\n\t            length: 0.01, \n\t            stiffness: 0.1,\n\t            angularStiffness: 1,\n\t            render: {\n\t                strokeStyle: '#90EE90',\n\t                lineWidth: 3\n\t            }\n\t        });\n\t\n\t        var defaults = {\n\t            type: 'mouseConstraint',\n\t            mouse: mouse,\n\t            element: null,\n\t            body: null,\n\t            constraint: constraint,\n\t            collisionFilter: {\n\t                category: 0x0001,\n\t                mask: 0xFFFFFFFF,\n\t                group: 0\n\t            }\n\t        };\n\t\n\t        var mouseConstraint = Common.extend(defaults, options);\n\t\n\t        Events.on(engine, 'tick', function() {\n\t            var allBodies = Composite.allBodies(engine.world);\n\t            MouseConstraint.update(mouseConstraint, allBodies);\n\t            _triggerEvents(mouseConstraint);\n\t        });\n\t\n\t        return mouseConstraint;\n\t    };\n\t\n\t    /**\n\t     * Updates the given mouse constraint.\n\t     * @private\n\t     * @method update\n\t     * @param {MouseConstraint} mouseConstraint\n\t     * @param {body[]} bodies\n\t     */\n\t    MouseConstraint.update = function(mouseConstraint, bodies) {\n\t        var mouse = mouseConstraint.mouse,\n\t            constraint = mouseConstraint.constraint,\n\t            body = mouseConstraint.body;\n\t\n\t        if (mouse.button === 0) {\n\t            if (!constraint.bodyB) {\n\t                for (var i = 0; i < bodies.length; i++) {\n\t                    body = bodies[i];\n\t                    if (Bounds.contains(body.bounds, mouse.position) \n\t                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n\t                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n\t                            var part = body.parts[j];\n\t                            if (Vertices.contains(part.vertices, mouse.position)) {\n\t                                constraint.pointA = mouse.position;\n\t                                constraint.bodyB = mouseConstraint.body = body;\n\t                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n\t                                constraint.angleB = body.angle;\n\t\n\t                                Sleeping.set(body, false);\n\t                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\t\n\t                                break;\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            } else {\n\t                Sleeping.set(constraint.bodyB, false);\n\t                constraint.pointA = mouse.position;\n\t            }\n\t        } else {\n\t            constraint.bodyB = mouseConstraint.body = null;\n\t            constraint.pointB = null;\n\t\n\t            if (body)\n\t                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Triggers mouse constraint events.\n\t     * @method _triggerEvents\n\t     * @private\n\t     * @param {mouse} mouseConstraint\n\t     */\n\t    var _triggerEvents = function(mouseConstraint) {\n\t        var mouse = mouseConstraint.mouse,\n\t            mouseEvents = mouse.sourceEvents;\n\t\n\t        if (mouseEvents.mousemove)\n\t            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\t\n\t        if (mouseEvents.mousedown)\n\t            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\t\n\t        if (mouseEvents.mouseup)\n\t            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\t\n\t        // reset the mouse state ready for the next step\n\t        Mouse.clearSourceEvents(mouse);\n\t    };\n\t\n\t    /*\n\t    *\n\t    *  Events Documentation\n\t    *\n\t    */\n\t\n\t    /**\n\t    * Fired when the mouse has moved (or a touch moves) during the last step\n\t    *\n\t    * @event mousemove\n\t    * @param {} event An event object\n\t    * @param {mouse} event.mouse The engine's mouse instance\n\t    * @param {} event.source The source object of the event\n\t    * @param {} event.name The name of the event\n\t    */\n\t\n\t    /**\n\t    * Fired when the mouse is down (or a touch has started) during the last step\n\t    *\n\t    * @event mousedown\n\t    * @param {} event An event object\n\t    * @param {mouse} event.mouse The engine's mouse instance\n\t    * @param {} event.source The source object of the event\n\t    * @param {} event.name The name of the event\n\t    */\n\t\n\t    /**\n\t    * Fired when the mouse is up (or a touch has ended) during the last step\n\t    *\n\t    * @event mouseup\n\t    * @param {} event An event object\n\t    * @param {mouse} event.mouse The engine's mouse instance\n\t    * @param {} event.source The source object of the event\n\t    * @param {} event.name The name of the event\n\t    */\n\t\n\t    /**\n\t    * Fired when the user starts dragging a body\n\t    *\n\t    * @event startdrag\n\t    * @param {} event An event object\n\t    * @param {mouse} event.mouse The engine's mouse instance\n\t    * @param {body} event.body The body being dragged\n\t    * @param {} event.source The source object of the event\n\t    * @param {} event.name The name of the event\n\t    */\n\t\n\t    /**\n\t    * Fired when the user ends dragging a body\n\t    *\n\t    * @event enddrag\n\t    * @param {} event An event object\n\t    * @param {mouse} event.mouse The engine's mouse instance\n\t    * @param {body} event.body The body that has stopped being dragged\n\t    * @param {} event.source The source object of the event\n\t    * @param {} event.name The name of the event\n\t    */\n\t\n\t    /*\n\t    *\n\t    *  Properties Documentation\n\t    *\n\t    */\n\t\n\t    /**\n\t     * A `String` denoting the type of object.\n\t     *\n\t     * @property type\n\t     * @type string\n\t     * @default \"constraint\"\n\t     * @readOnly\n\t     */\n\t\n\t    /**\n\t     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n\t     *\n\t     * @property mouse\n\t     * @type mouse\n\t     * @default mouse\n\t     */\n\t\n\t    /**\n\t     * The `Body` that is currently being moved by the user, or `null` if no body.\n\t     *\n\t     * @property body\n\t     * @type body\n\t     * @default null\n\t     */\n\t\n\t    /**\n\t     * The `Constraint` object that is used to move the body during interaction.\n\t     *\n\t     * @property constraint\n\t     * @type constraint\n\t     */\n\t\n\t    /**\n\t     * An `Object` that specifies the collision filter properties.\n\t     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n\t     * See `body.collisionFilter` for more information.\n\t     *\n\t     * @property collisionFilter\n\t     * @type object\n\t     */\n\t\n\t})();\n\t\n\t},{\"../body/Composite\":2,\"../collision/Detector\":5,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":18,\"../core/Sleeping\":20,\"../geometry/Bounds\":24,\"../geometry/Vertices\":27,\"./Constraint\":12}],14:[function(require,module,exports){\n\t/**\n\t* The `Matter.Common` module contains utility functions that are common to all modules.\n\t*\n\t* @class Common\n\t*/\n\t\n\tvar Common = {};\n\t\n\tmodule.exports = Common;\n\t\n\t(function() {\n\t\n\t    Common._nextId = 0;\n\t    Common._seed = 0;\n\t\n\t    /**\n\t     * Extends the object in the first argument using the object in the second argument.\n\t     * @method extend\n\t     * @param {} obj\n\t     * @param {boolean} deep\n\t     * @return {} obj extended\n\t     */\n\t    Common.extend = function(obj, deep) {\n\t        var argsStart,\n\t            args,\n\t            deepClone;\n\t\n\t        if (typeof deep === 'boolean') {\n\t            argsStart = 2;\n\t            deepClone = deep;\n\t        } else {\n\t            argsStart = 1;\n\t            deepClone = true;\n\t        }\n\t\n\t        args = Array.prototype.slice.call(arguments, argsStart);\n\t\n\t        for (var i = 0; i < args.length; i++) {\n\t            var source = args[i];\n\t\n\t            if (source) {\n\t                for (var prop in source) {\n\t                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n\t                        if (!obj[prop] || obj[prop].constructor === Object) {\n\t                            obj[prop] = obj[prop] || {};\n\t                            Common.extend(obj[prop], deepClone, source[prop]);\n\t                        } else {\n\t                            obj[prop] = source[prop];\n\t                        }\n\t                    } else {\n\t                        obj[prop] = source[prop];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        \n\t        return obj;\n\t    };\n\t\n\t    /**\n\t     * Creates a new clone of the object, if deep is true references will also be cloned.\n\t     * @method clone\n\t     * @param {} obj\n\t     * @param {bool} deep\n\t     * @return {} obj cloned\n\t     */\n\t    Common.clone = function(obj, deep) {\n\t        return Common.extend({}, deep, obj);\n\t    };\n\t\n\t    /**\n\t     * Returns the list of keys for the given object.\n\t     * @method keys\n\t     * @param {} obj\n\t     * @return {string[]} keys\n\t     */\n\t    Common.keys = function(obj) {\n\t        if (Object.keys)\n\t            return Object.keys(obj);\n\t\n\t        // avoid hasOwnProperty for performance\n\t        var keys = [];\n\t        for (var key in obj)\n\t            keys.push(key);\n\t        return keys;\n\t    };\n\t\n\t    /**\n\t     * Returns the list of values for the given object.\n\t     * @method values\n\t     * @param {} obj\n\t     * @return {array} Array of the objects property values\n\t     */\n\t    Common.values = function(obj) {\n\t        var values = [];\n\t        \n\t        if (Object.keys) {\n\t            var keys = Object.keys(obj);\n\t            for (var i = 0; i < keys.length; i++) {\n\t                values.push(obj[keys[i]]);\n\t            }\n\t            return values;\n\t        }\n\t        \n\t        // avoid hasOwnProperty for performance\n\t        for (var key in obj)\n\t            values.push(obj[key]);\n\t        return values;\n\t    };\n\t\n\t    /**\n\t     * Returns a hex colour string made by lightening or darkening color by percent.\n\t     * @method shadeColor\n\t     * @param {string} color\n\t     * @param {number} percent\n\t     * @return {string} A hex colour\n\t     */\n\t    Common.shadeColor = function(color, percent) {   \n\t        // http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color\n\t        var colorInteger = parseInt(color.slice(1),16), \n\t            amount = Math.round(2.55 * percent), \n\t            R = (colorInteger >> 16) + amount, \n\t            B = (colorInteger >> 8 & 0x00FF) + amount, \n\t            G = (colorInteger & 0x0000FF) + amount;\n\t        return \"#\" + (0x1000000 + (R < 255 ? R < 1 ? 0 : R :255) * 0x10000 \n\t                + (B < 255 ? B < 1 ? 0 : B : 255) * 0x100 \n\t                + (G < 255 ? G < 1 ? 0 : G : 255)).toString(16).slice(1);\n\t    };\n\t\n\t    /**\n\t     * Shuffles the given array in-place.\n\t     * The function uses a seeded random generator.\n\t     * @method shuffle\n\t     * @param {array} array\n\t     * @return {array} array shuffled randomly\n\t     */\n\t    Common.shuffle = function(array) {\n\t        for (var i = array.length - 1; i > 0; i--) {\n\t            var j = Math.floor(Common.random() * (i + 1));\n\t            var temp = array[i];\n\t            array[i] = array[j];\n\t            array[j] = temp;\n\t        }\n\t        return array;\n\t    };\n\t\n\t    /**\n\t     * Randomly chooses a value from a list with equal probability.\n\t     * The function uses a seeded random generator.\n\t     * @method choose\n\t     * @param {array} choices\n\t     * @return {object} A random choice object from the array\n\t     */\n\t    Common.choose = function(choices) {\n\t        return choices[Math.floor(Common.random() * choices.length)];\n\t    };\n\t\n\t    /**\n\t     * Returns true if the object is a HTMLElement, otherwise false.\n\t     * @method isElement\n\t     * @param {object} obj\n\t     * @return {boolean} True if the object is a HTMLElement, otherwise false\n\t     */\n\t    Common.isElement = function(obj) {\n\t        // http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object\n\t        try {\n\t            return obj instanceof HTMLElement;\n\t        }\n\t        catch(e){\n\t            return (typeof obj===\"object\") &&\n\t              (obj.nodeType===1) && (typeof obj.style === \"object\") &&\n\t              (typeof obj.ownerDocument ===\"object\");\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Returns true if the object is an array.\n\t     * @method isArray\n\t     * @param {object} obj\n\t     * @return {boolean} True if the object is an array, otherwise false\n\t     */\n\t    Common.isArray = function(obj) {\n\t        return Object.prototype.toString.call(obj) === '[object Array]';\n\t    };\n\t    \n\t    /**\n\t     * Returns the given value clamped between a minimum and maximum value.\n\t     * @method clamp\n\t     * @param {number} value\n\t     * @param {number} min\n\t     * @param {number} max\n\t     * @return {number} The value clamped between min and max inclusive\n\t     */\n\t    Common.clamp = function(value, min, max) {\n\t        if (value < min)\n\t            return min;\n\t        if (value > max)\n\t            return max;\n\t        return value;\n\t    };\n\t    \n\t    /**\n\t     * Returns the sign of the given value.\n\t     * @method sign\n\t     * @param {number} value\n\t     * @return {number} -1 if negative, +1 if 0 or positive\n\t     */\n\t    Common.sign = function(value) {\n\t        return value < 0 ? -1 : 1;\n\t    };\n\t    \n\t    /**\n\t     * Returns the current timestamp (high-res if available).\n\t     * @method now\n\t     * @return {number} the current timestamp (high-res if available)\n\t     */\n\t    Common.now = function() {\n\t        // http://stackoverflow.com/questions/221294/how-do-you-get-a-timestamp-in-javascript\n\t        // https://gist.github.com/davidwaterston/2982531\n\t\n\t        var performance = window.performance || {};\n\t\n\t        performance.now = (function() {\n\t            return performance.now    ||\n\t            performance.webkitNow     ||\n\t            performance.msNow         ||\n\t            performance.oNow          ||\n\t            performance.mozNow        ||\n\t            function() { return +(new Date()); };\n\t        })();\n\t              \n\t        return performance.now();\n\t    };\n\t\n\t    \n\t    /**\n\t     * Returns a random value between a minimum and a maximum value inclusive.\n\t     * The function uses a seeded random generator.\n\t     * @method random\n\t     * @param {number} min\n\t     * @param {number} max\n\t     * @return {number} A random number between min and max inclusive\n\t     */\n\t    Common.random = function(min, max) {\n\t        min = (typeof min !== \"undefined\") ? min : 0;\n\t        max = (typeof max !== \"undefined\") ? max : 1;\n\t        return min + _seededRandom() * (max - min);\n\t    };\n\t\n\t    /**\n\t     * Converts a CSS hex colour string into an integer.\n\t     * @method colorToNumber\n\t     * @param {string} colorString\n\t     * @return {number} An integer representing the CSS hex string\n\t     */\n\t    Common.colorToNumber = function(colorString) {\n\t        colorString = colorString.replace('#','');\n\t\n\t        if (colorString.length == 3) {\n\t            colorString = colorString.charAt(0) + colorString.charAt(0)\n\t                        + colorString.charAt(1) + colorString.charAt(1)\n\t                        + colorString.charAt(2) + colorString.charAt(2);\n\t        }\n\t\n\t        return parseInt(colorString, 16);\n\t    };\n\t\n\t    /**\n\t     * A wrapper for console.log, for providing errors and warnings.\n\t     * @method log\n\t     * @param {string} message\n\t     * @param {string} type\n\t     */\n\t    Common.log = function(message, type) {\n\t        if (!console || !console.log || !console.warn)\n\t            return;\n\t\n\t        switch (type) {\n\t\n\t        case 'warn':\n\t            console.warn('Matter.js:', message);\n\t            break;\n\t        case 'error':\n\t            console.log('Matter.js:', message);\n\t            break;\n\t\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Returns the next unique sequential ID.\n\t     * @method nextId\n\t     * @return {Number} Unique sequential ID\n\t     */\n\t    Common.nextId = function() {\n\t        return Common._nextId++;\n\t    };\n\t\n\t    /**\n\t     * A cross browser compatible indexOf implementation.\n\t     * @method indexOf\n\t     * @param {array} haystack\n\t     * @param {object} needle\n\t     */\n\t    Common.indexOf = function(haystack, needle) {\n\t        if (haystack.indexOf)\n\t            return haystack.indexOf(needle);\n\t\n\t        for (var i = 0; i < haystack.length; i++) {\n\t            if (haystack[i] === needle)\n\t                return i;\n\t        }\n\t\n\t        return -1;\n\t    };\n\t\n\t    var _seededRandom = function() {\n\t        // https://gist.github.com/ngryman/3830489\n\t        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n\t        return Common._seed / 233280;\n\t    };\n\t\n\t})();\n\t\n\t},{}],15:[function(require,module,exports){\n\t/**\n\t* The `Matter.Engine` module contains methods for creating and manipulating engines.\n\t* An engine is a controller that manages updating the simulation of the world.\n\t* See `Matter.Runner` for an optional game loop utility.\n\t*\n\t* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\t*\n\t* @class Engine\n\t*/\n\t\n\tvar Engine = {};\n\t\n\tmodule.exports = Engine;\n\t\n\tvar World = require('../body/World');\n\tvar Sleeping = require('./Sleeping');\n\tvar Resolver = require('../collision/Resolver');\n\tvar Render = require('../render/Render');\n\tvar Pairs = require('../collision/Pairs');\n\tvar Metrics = require('./Metrics');\n\tvar Grid = require('../collision/Grid');\n\tvar Events = require('./Events');\n\tvar Composite = require('../body/Composite');\n\tvar Constraint = require('../constraint/Constraint');\n\tvar Common = require('./Common');\n\tvar Body = require('../body/Body');\n\t\n\t(function() {\n\t\n\t    /**\n\t     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n\t     * All properties have default values, and many are pre-calculated automatically based on other properties.\n\t     * See the properties section below for detailed information on what you can pass via the `options` object.\n\t     * @method create\n\t     * @param {object} [options]\n\t     * @return {engine} engine\n\t     */\n\t    Engine.create = function(element, options) {\n\t        // options may be passed as the first (and only) argument\n\t        options = Common.isElement(element) ? options : element;\n\t        element = Common.isElement(element) ? element : null;\n\t        options = options || {};\n\t\n\t        if (element || options.render) {\n\t            Common.log('Engine.create: engine.render is deprecated (see docs)', 'warn');\n\t        }\n\t\n\t        var defaults = {\n\t            positionIterations: 6,\n\t            velocityIterations: 4,\n\t            constraintIterations: 2,\n\t            enableSleeping: false,\n\t            events: [],\n\t            timing: {\n\t                timestamp: 0,\n\t                timeScale: 1\n\t            },\n\t            broadphase: {\n\t                controller: Grid\n\t            }\n\t        };\n\t\n\t        var engine = Common.extend(defaults, options);\n\t\n\t        // @deprecated\n\t        if (element || engine.render) {\n\t            var renderDefaults = {\n\t                element: element,\n\t                controller: Render\n\t            };\n\t            \n\t            engine.render = Common.extend(renderDefaults, engine.render);\n\t        }\n\t\n\t        // @deprecated\n\t        if (engine.render && engine.render.controller) {\n\t            engine.render = engine.render.controller.create(engine.render);\n\t        }\n\t\n\t        // @deprecated\n\t        if (engine.render) {\n\t            engine.render.engine = engine;\n\t        }\n\t\n\t        engine.world = options.world || World.create(engine.world);\n\t        engine.pairs = Pairs.create();\n\t        engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\n\t        engine.metrics = engine.metrics || { extended: false };\n\t\n\t\n\t        return engine;\n\t    };\n\t\n\t    /**\n\t     * Moves the simulation forward in time by `delta` ms.\n\t     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n\t     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n\t     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n\t     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n\t     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n\t     *\n\t     * Triggers `beforeUpdate` and `afterUpdate` events.\n\t     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n\t     * @method update\n\t     * @param {engine} engine\n\t     * @param {number} [delta=16.666]\n\t     * @param {number} [correction=1]\n\t     */\n\t    Engine.update = function(engine, delta, correction) {\n\t        delta = delta || 1000 / 60;\n\t        correction = correction || 1;\n\t\n\t        var world = engine.world,\n\t            timing = engine.timing,\n\t            broadphase = engine.broadphase,\n\t            broadphasePairs = [],\n\t            i;\n\t\n\t        // increment timestamp\n\t        timing.timestamp += delta * timing.timeScale;\n\t\n\t        // create an event object\n\t        var event = {\n\t            timestamp: timing.timestamp\n\t        };\n\t\n\t        Events.trigger(engine, 'beforeUpdate', event);\n\t\n\t        // get lists of all bodies and constraints, no matter what composites they are in\n\t        var allBodies = Composite.allBodies(world),\n\t            allConstraints = Composite.allConstraints(world);\n\t\n\t\n\t        // if sleeping enabled, call the sleeping controller\n\t        if (engine.enableSleeping)\n\t            Sleeping.update(allBodies, timing.timeScale);\n\t\n\t        // applies gravity to all bodies\n\t        _bodiesApplyGravity(allBodies, world.gravity);\n\t\n\t        // update all body position and rotation by integration\n\t        _bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\t\n\t        // update all constraints\n\t        for (i = 0; i < engine.constraintIterations; i++) {\n\t            Constraint.solveAll(allConstraints, timing.timeScale);\n\t        }\n\t        Constraint.postSolveAll(allBodies);\n\t\n\t        // broadphase pass: find potential collision pairs\n\t        if (broadphase.controller) {\n\t\n\t            // if world is dirty, we must flush the whole grid\n\t            if (world.isModified)\n\t                broadphase.controller.clear(broadphase);\n\t\n\t            // update the grid buckets based on current bodies\n\t            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\n\t            broadphasePairs = broadphase.pairsList;\n\t        } else {\n\t\n\t            // if no broadphase set, we just pass all bodies\n\t            broadphasePairs = allBodies;\n\t        }\n\t\n\t        // clear all composite modified flags\n\t        if (world.isModified) {\n\t            Composite.setModified(world, false, false, true);\n\t        }\n\t\n\t        // narrowphase pass: find actual collisions, then create or update collision pairs\n\t        var collisions = broadphase.detector(broadphasePairs, engine);\n\t\n\t        // update collision pairs\n\t        var pairs = engine.pairs,\n\t            timestamp = timing.timestamp;\n\t        Pairs.update(pairs, collisions, timestamp);\n\t        Pairs.removeOld(pairs, timestamp);\n\t\n\t        // wake up bodies involved in collisions\n\t        if (engine.enableSleeping)\n\t            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\t\n\t        // trigger collision events\n\t        if (pairs.collisionStart.length > 0)\n\t            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\t\n\t        // iteratively resolve position between collisions\n\t        Resolver.preSolvePosition(pairs.list);\n\t        for (i = 0; i < engine.positionIterations; i++) {\n\t            Resolver.solvePosition(pairs.list, timing.timeScale);\n\t        }\n\t        Resolver.postSolvePosition(allBodies);\n\t\n\t        // iteratively resolve velocity between collisions\n\t        Resolver.preSolveVelocity(pairs.list);\n\t        for (i = 0; i < engine.velocityIterations; i++) {\n\t            Resolver.solveVelocity(pairs.list, timing.timeScale);\n\t        }\n\t\n\t        // trigger collision events\n\t        if (pairs.collisionActive.length > 0)\n\t            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\t\n\t        if (pairs.collisionEnd.length > 0)\n\t            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\t\n\t\n\t        // clear force buffers\n\t        _bodiesClearForces(allBodies);\n\t\n\t        Events.trigger(engine, 'afterUpdate', event);\n\t\n\t        return engine;\n\t    };\n\t    \n\t    /**\n\t     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n\t     * @method merge\n\t     * @param {engine} engineA\n\t     * @param {engine} engineB\n\t     */\n\t    Engine.merge = function(engineA, engineB) {\n\t        Common.extend(engineA, engineB);\n\t        \n\t        if (engineB.world) {\n\t            engineA.world = engineB.world;\n\t\n\t            Engine.clear(engineA);\n\t\n\t            var bodies = Composite.allBodies(engineA.world);\n\t\n\t            for (var i = 0; i < bodies.length; i++) {\n\t                var body = bodies[i];\n\t                Sleeping.set(body, false);\n\t                body.id = Common.nextId();\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Clears the engine including the world, pairs and broadphase.\n\t     * @method clear\n\t     * @param {engine} engine\n\t     */\n\t    Engine.clear = function(engine) {\n\t        var world = engine.world;\n\t        \n\t        Pairs.clear(engine.pairs);\n\t\n\t        var broadphase = engine.broadphase;\n\t        if (broadphase.controller) {\n\t            var bodies = Composite.allBodies(world);\n\t            broadphase.controller.clear(broadphase);\n\t            broadphase.controller.update(broadphase, bodies, engine, true);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Zeroes the `body.force` and `body.torque` force buffers.\n\t     * @method bodiesClearForces\n\t     * @private\n\t     * @param {body[]} bodies\n\t     */\n\t    var _bodiesClearForces = function(bodies) {\n\t        for (var i = 0; i < bodies.length; i++) {\n\t            var body = bodies[i];\n\t\n\t            // reset force buffers\n\t            body.force.x = 0;\n\t            body.force.y = 0;\n\t            body.torque = 0;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Applys a mass dependant force to all given bodies.\n\t     * @method bodiesApplyGravity\n\t     * @private\n\t     * @param {body[]} bodies\n\t     * @param {vector} gravity\n\t     */\n\t    var _bodiesApplyGravity = function(bodies, gravity) {\n\t        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\t\n\t        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n\t            return;\n\t        }\n\t        \n\t        for (var i = 0; i < bodies.length; i++) {\n\t            var body = bodies[i];\n\t\n\t            if (body.isStatic || body.isSleeping)\n\t                continue;\n\t\n\t            // apply gravity\n\t            body.force.y += body.mass * gravity.y * gravityScale;\n\t            body.force.x += body.mass * gravity.x * gravityScale;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Applys `Body.update` to all given `bodies`.\n\t     * @method updateAll\n\t     * @private\n\t     * @param {body[]} bodies\n\t     * @param {number} deltaTime \n\t     * The amount of time elapsed between updates\n\t     * @param {number} timeScale\n\t     * @param {number} correction \n\t     * The Verlet correction factor (deltaTime / lastDeltaTime)\n\t     * @param {bounds} worldBounds\n\t     */\n\t    var _bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n\t        for (var i = 0; i < bodies.length; i++) {\n\t            var body = bodies[i];\n\t\n\t            if (body.isStatic || body.isSleeping)\n\t                continue;\n\t\n\t            Body.update(body, deltaTime, timeScale, correction);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * An alias for `Runner.run`, see `Matter.Runner` for more information.\n\t     * @method run\n\t     * @param {engine} engine\n\t     */\n\t\n\t    /**\n\t    * Fired just before an update\n\t    *\n\t    * @event beforeUpdate\n\t    * @param {} event An event object\n\t    * @param {number} event.timestamp The engine.timing.timestamp of the event\n\t    * @param {} event.source The source object of the event\n\t    * @param {} event.name The name of the event\n\t    */\n\t\n\t    /**\n\t    * Fired after engine update and all collision events\n\t    *\n\t    * @event afterUpdate\n\t    * @param {} event An event object\n\t    * @param {number} event.timestamp The engine.timing.timestamp of the event\n\t    * @param {} event.source The source object of the event\n\t    * @param {} event.name The name of the event\n\t    */\n\t\n\t    /**\n\t    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n\t    *\n\t    * @event collisionStart\n\t    * @param {} event An event object\n\t    * @param {} event.pairs List of affected pairs\n\t    * @param {number} event.timestamp The engine.timing.timestamp of the event\n\t    * @param {} event.source The source object of the event\n\t    * @param {} event.name The name of the event\n\t    */\n\t\n\t    /**\n\t    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n\t    *\n\t    * @event collisionActive\n\t    * @param {} event An event object\n\t    * @param {} event.pairs List of affected pairs\n\t    * @param {number} event.timestamp The engine.timing.timestamp of the event\n\t    * @param {} event.source The source object of the event\n\t    * @param {} event.name The name of the event\n\t    */\n\t\n\t    /**\n\t    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n\t    *\n\t    * @event collisionEnd\n\t    * @param {} event An event object\n\t    * @param {} event.pairs List of affected pairs\n\t    * @param {number} event.timestamp The engine.timing.timestamp of the event\n\t    * @param {} event.source The source object of the event\n\t    * @param {} event.name The name of the event\n\t    */\n\t\n\t    /*\n\t    *\n\t    *  Properties Documentation\n\t    *\n\t    */\n\t\n\t    /**\n\t     * An integer `Number` that specifies the number of position iterations to perform each update.\n\t     * The higher the value, the higher quality the simulation will be at the expense of performance.\n\t     *\n\t     * @property positionIterations\n\t     * @type number\n\t     * @default 6\n\t     */\n\t\n\t    /**\n\t     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n\t     * The higher the value, the higher quality the simulation will be at the expense of performance.\n\t     *\n\t     * @property velocityIterations\n\t     * @type number\n\t     * @default 4\n\t     */\n\t\n\t    /**\n\t     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n\t     * The higher the value, the higher quality the simulation will be at the expense of performance.\n\t     * The default value of `2` is usually very adequate.\n\t     *\n\t     * @property constraintIterations\n\t     * @type number\n\t     * @default 2\n\t     */\n\t\n\t    /**\n\t     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n\t     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n\t     *\n\t     * @property enableSleeping\n\t     * @type boolean\n\t     * @default false\n\t     */\n\t\n\t    /**\n\t     * An `Object` containing properties regarding the timing systems of the engine. \n\t     *\n\t     * @property timing\n\t     * @type object\n\t     */\n\t\n\t    /**\n\t     * A `Number` that specifies the global scaling factor of time for all bodies.\n\t     * A value of `0` freezes the simulation.\n\t     * A value of `0.1` gives a slow-motion effect.\n\t     * A value of `1.2` gives a speed-up effect.\n\t     *\n\t     * @property timing.timeScale\n\t     * @type number\n\t     * @default 1\n\t     */\n\t\n\t    /**\n\t     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n\t     * It is incremented on every `Engine.update` by the given `delta` argument. \n\t     *\n\t     * @property timing.timestamp\n\t     * @type number\n\t     * @default 0\n\t     */\n\t\n\t    /**\n\t     * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\n\t     * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\n\t     *\n\t     * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\n\t     * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\n\t     *\n\t     * @property render\n\t     * @type render\n\t     * @deprecated see Demo.js for an example of creating a renderer\n\t     * @default a Matter.Render instance\n\t     */\n\t\n\t    /**\n\t     * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\n\t     *\n\t     * @property broadphase\n\t     * @type grid\n\t     * @default a Matter.Grid instance\n\t     */\n\t\n\t    /**\n\t     * A `World` composite object that will contain all simulated bodies and constraints.\n\t     *\n\t     * @property world\n\t     * @type world\n\t     * @default a Matter.World instance\n\t     */\n\t\n\t})();\n\t\n\t},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Grid\":6,\"../collision/Pairs\":8,\"../collision/Resolver\":10,\"../constraint/Constraint\":12,\"../render/Render\":29,\"./Common\":14,\"./Events\":16,\"./Metrics\":17,\"./Sleeping\":20}],16:[function(require,module,exports){\n\t/**\n\t* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n\t*\n\t* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\t*\n\t* @class Events\n\t*/\n\t\n\tvar Events = {};\n\t\n\tmodule.exports = Events;\n\t\n\tvar Common = require('./Common');\n\t\n\t(function() {\n\t\n\t    /**\n\t     * Subscribes a callback function to the given object's `eventName`.\n\t     * @method on\n\t     * @param {} object\n\t     * @param {string} eventNames\n\t     * @param {function} callback\n\t     */\n\t    Events.on = function(object, eventNames, callback) {\n\t        var names = eventNames.split(' '),\n\t            name;\n\t\n\t        for (var i = 0; i < names.length; i++) {\n\t            name = names[i];\n\t            object.events = object.events || {};\n\t            object.events[name] = object.events[name] || [];\n\t            object.events[name].push(callback);\n\t        }\n\t\n\t        return callback;\n\t    };\n\t\n\t    /**\n\t     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n\t     * @method off\n\t     * @param {} object\n\t     * @param {string} eventNames\n\t     * @param {function} callback\n\t     */\n\t    Events.off = function(object, eventNames, callback) {\n\t        if (!eventNames) {\n\t            object.events = {};\n\t            return;\n\t        }\n\t\n\t        // handle Events.off(object, callback)\n\t        if (typeof eventNames === 'function') {\n\t            callback = eventNames;\n\t            eventNames = Common.keys(object.events).join(' ');\n\t        }\n\t\n\t        var names = eventNames.split(' ');\n\t\n\t        for (var i = 0; i < names.length; i++) {\n\t            var callbacks = object.events[names[i]],\n\t                newCallbacks = [];\n\t\n\t            if (callback && callbacks) {\n\t                for (var j = 0; j < callbacks.length; j++) {\n\t                    if (callbacks[j] !== callback)\n\t                        newCallbacks.push(callbacks[j]);\n\t                }\n\t            }\n\t\n\t            object.events[names[i]] = newCallbacks;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n\t     * @method trigger\n\t     * @param {} object\n\t     * @param {string} eventNames\n\t     * @param {} event\n\t     */\n\t    Events.trigger = function(object, eventNames, event) {\n\t        var names,\n\t            name,\n\t            callbacks,\n\t            eventClone;\n\t\n\t        if (object.events) {\n\t            if (!event)\n\t                event = {};\n\t\n\t            names = eventNames.split(' ');\n\t\n\t            for (var i = 0; i < names.length; i++) {\n\t                name = names[i];\n\t                callbacks = object.events[name];\n\t\n\t                if (callbacks) {\n\t                    eventClone = Common.clone(event, false);\n\t                    eventClone.name = name;\n\t                    eventClone.source = object;\n\t\n\t                    for (var j = 0; j < callbacks.length; j++) {\n\t                        callbacks[j].apply(object, [eventClone]);\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    };\n\t\n\t})();\n\t\n\t},{\"./Common\":14}],17:[function(require,module,exports){\n\t\n\t},{\"../body/Composite\":2,\"./Common\":14}],18:[function(require,module,exports){\n\t/**\n\t* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n\t*\n\t* @class Mouse\n\t*/\n\t\n\tvar Mouse = {};\n\t\n\tmodule.exports = Mouse;\n\t\n\tvar Common = require('../core/Common');\n\t\n\t(function() {\n\t\n\t    /**\n\t     * Creates a mouse input.\n\t     * @method create\n\t     * @param {HTMLElement} element\n\t     * @return {mouse} A new mouse\n\t     */\n\t    Mouse.create = function(element) {\n\t        var mouse = {};\n\t\n\t        if (!element) {\n\t            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n\t        }\n\t        \n\t        mouse.element = element || document.body;\n\t        mouse.absolute = { x: 0, y: 0 };\n\t        mouse.position = { x: 0, y: 0 };\n\t        mouse.mousedownPosition = { x: 0, y: 0 };\n\t        mouse.mouseupPosition = { x: 0, y: 0 };\n\t        mouse.offset = { x: 0, y: 0 };\n\t        mouse.scale = { x: 1, y: 1 };\n\t        mouse.wheelDelta = 0;\n\t        mouse.button = -1;\n\t        mouse.pixelRatio = mouse.element.getAttribute('data-pixel-ratio') || 1;\n\t\n\t        mouse.sourceEvents = {\n\t            mousemove: null,\n\t            mousedown: null,\n\t            mouseup: null,\n\t            mousewheel: null\n\t        };\n\t        \n\t        mouse.mousemove = function(event) { \n\t            var position = _getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n\t                touches = event.changedTouches;\n\t\n\t            if (touches) {\n\t                mouse.button = 0;\n\t                event.preventDefault();\n\t            }\n\t\n\t            mouse.absolute.x = position.x;\n\t            mouse.absolute.y = position.y;\n\t            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n\t            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n\t            mouse.sourceEvents.mousemove = event;\n\t        };\n\t        \n\t        mouse.mousedown = function(event) {\n\t            var position = _getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n\t                touches = event.changedTouches;\n\t\n\t            if (touches) {\n\t                mouse.button = 0;\n\t                event.preventDefault();\n\t            } else {\n\t                mouse.button = event.button;\n\t            }\n\t\n\t            mouse.absolute.x = position.x;\n\t            mouse.absolute.y = position.y;\n\t            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n\t            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n\t            mouse.mousedownPosition.x = mouse.position.x;\n\t            mouse.mousedownPosition.y = mouse.position.y;\n\t            mouse.sourceEvents.mousedown = event;\n\t        };\n\t        \n\t        mouse.mouseup = function(event) {\n\t            var position = _getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n\t                touches = event.changedTouches;\n\t\n\t            if (touches) {\n\t                event.preventDefault();\n\t            }\n\t            \n\t            mouse.button = -1;\n\t            mouse.absolute.x = position.x;\n\t            mouse.absolute.y = position.y;\n\t            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n\t            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n\t            mouse.mouseupPosition.x = mouse.position.x;\n\t            mouse.mouseupPosition.y = mouse.position.y;\n\t            mouse.sourceEvents.mouseup = event;\n\t        };\n\t\n\t        mouse.mousewheel = function(event) {\n\t            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n\t            event.preventDefault();\n\t        };\n\t\n\t        Mouse.setElement(mouse, mouse.element);\n\t\n\t        return mouse;\n\t    };\n\t\n\t    /**\n\t     * Sets the element the mouse is bound to (and relative to).\n\t     * @method setElement\n\t     * @param {mouse} mouse\n\t     * @param {HTMLElement} element\n\t     */\n\t    Mouse.setElement = function(mouse, element) {\n\t        mouse.element = element;\n\t\n\t        element.addEventListener('mousemove', mouse.mousemove);\n\t        element.addEventListener('mousedown', mouse.mousedown);\n\t        element.addEventListener('mouseup', mouse.mouseup);\n\t        \n\t        element.addEventListener('mousewheel', mouse.mousewheel);\n\t        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\t\n\t        element.addEventListener('touchmove', mouse.mousemove);\n\t        element.addEventListener('touchstart', mouse.mousedown);\n\t        element.addEventListener('touchend', mouse.mouseup);\n\t    };\n\t\n\t    /**\n\t     * Clears all captured source events.\n\t     * @method clearSourceEvents\n\t     * @param {mouse} mouse\n\t     */\n\t    Mouse.clearSourceEvents = function(mouse) {\n\t        mouse.sourceEvents.mousemove = null;\n\t        mouse.sourceEvents.mousedown = null;\n\t        mouse.sourceEvents.mouseup = null;\n\t        mouse.sourceEvents.mousewheel = null;\n\t        mouse.wheelDelta = 0;\n\t    };\n\t\n\t    /**\n\t     * Sets the mouse position offset.\n\t     * @method setOffset\n\t     * @param {mouse} mouse\n\t     * @param {vector} offset\n\t     */\n\t    Mouse.setOffset = function(mouse, offset) {\n\t        mouse.offset.x = offset.x;\n\t        mouse.offset.y = offset.y;\n\t        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n\t        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n\t    };\n\t\n\t    /**\n\t     * Sets the mouse position scale.\n\t     * @method setScale\n\t     * @param {mouse} mouse\n\t     * @param {vector} scale\n\t     */\n\t    Mouse.setScale = function(mouse, scale) {\n\t        mouse.scale.x = scale.x;\n\t        mouse.scale.y = scale.y;\n\t        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n\t        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n\t    };\n\t    \n\t    /**\n\t     * Gets the mouse position relative to an element given a screen pixel ratio.\n\t     * @method _getRelativeMousePosition\n\t     * @private\n\t     * @param {} event\n\t     * @param {} element\n\t     * @param {number} pixelRatio\n\t     * @return {}\n\t     */\n\t    var _getRelativeMousePosition = function(event, element, pixelRatio) {\n\t        var elementBounds = element.getBoundingClientRect(),\n\t            rootNode = (document.documentElement || document.body.parentNode || document.body),\n\t            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n\t            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n\t            touches = event.changedTouches,\n\t            x, y;\n\t        \n\t        if (touches) {\n\t            x = touches[0].pageX - elementBounds.left - scrollX;\n\t            y = touches[0].pageY - elementBounds.top - scrollY;\n\t        } else {\n\t            x = event.pageX - elementBounds.left - scrollX;\n\t            y = event.pageY - elementBounds.top - scrollY;\n\t        }\n\t\n\t        return { \n\t            x: x / (element.clientWidth / element.width * pixelRatio),\n\t            y: y / (element.clientHeight / element.height * pixelRatio)\n\t        };\n\t    };\n\t\n\t})();\n\t\n\t},{\"../core/Common\":14}],19:[function(require,module,exports){\n\t/**\n\t* The `Matter.Runner` module is an optional utility which provides a game loop, \n\t* that handles continuously updating a `Matter.Engine` for you within a browser.\n\t* It is intended for development and debugging purposes, but may also be suitable for simple games.\n\t* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n\t* Instead just call `Engine.update(engine, delta)` in your own loop.\n\t*\n\t* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\t*\n\t* @class Runner\n\t*/\n\t\n\tvar Runner = {};\n\t\n\tmodule.exports = Runner;\n\t\n\tvar Events = require('./Events');\n\tvar Engine = require('./Engine');\n\tvar Common = require('./Common');\n\t\n\t(function() {\n\t\n\t    var _requestAnimationFrame,\n\t        _cancelAnimationFrame;\n\t\n\t    if (typeof window !== 'undefined') {\n\t        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n\t                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame \n\t                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\t   \n\t        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n\t                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n\t    }\n\t\n\t    /**\n\t     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n\t     * @method create\n\t     * @param {} options\n\t     */\n\t    Runner.create = function(options) {\n\t        var defaults = {\n\t            fps: 60,\n\t            correction: 1,\n\t            deltaSampleSize: 60,\n\t            counterTimestamp: 0,\n\t            frameCounter: 0,\n\t            deltaHistory: [],\n\t            timePrev: null,\n\t            timeScalePrev: 1,\n\t            frameRequestId: null,\n\t            isFixed: false,\n\t            enabled: true\n\t        };\n\t\n\t        var runner = Common.extend(defaults, options);\n\t\n\t        runner.delta = runner.delta || 1000 / runner.fps;\n\t        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n\t        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n\t        runner.fps = 1000 / runner.delta;\n\t\n\t        return runner;\n\t    };\n\t\n\t    /**\n\t     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n\t     * @method run\n\t     * @param {engine} engine\n\t     */\n\t    Runner.run = function(runner, engine) {\n\t        // create runner if engine is first argument\n\t        if (typeof runner.positionIterations !== 'undefined') {\n\t            engine = runner;\n\t            runner = Runner.create();\n\t        }\n\t\n\t        (function render(time){\n\t            runner.frameRequestId = _requestAnimationFrame(render);\n\t\n\t            if (time && runner.enabled) {\n\t                Runner.tick(runner, engine, time);\n\t            }\n\t        })();\n\t\n\t        return runner;\n\t    };\n\t\n\t    /**\n\t     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n\t     * Features delta smoothing, time correction and fixed or dynamic timing.\n\t     * Triggers `beforeTick`, `tick` and `afterTick` events on the engine.\n\t     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n\t     * @method tick\n\t     * @param {runner} runner\n\t     * @param {engine} engine\n\t     * @param {number} time\n\t     */\n\t    Runner.tick = function(runner, engine, time) {\n\t        var timing = engine.timing,\n\t            correction = 1,\n\t            delta;\n\t\n\t        // create an event object\n\t        var event = {\n\t            timestamp: timing.timestamp\n\t        };\n\t\n\t        Events.trigger(runner, 'beforeTick', event);\n\t        Events.trigger(engine, 'beforeTick', event); // @deprecated\n\t\n\t        if (runner.isFixed) {\n\t            // fixed timestep\n\t            delta = runner.delta;\n\t        } else {\n\t            // dynamic timestep based on wall clock between calls\n\t            delta = (time - runner.timePrev) || runner.delta;\n\t            runner.timePrev = time;\n\t\n\t            // optimistically filter delta over a few frames, to improve stability\n\t            runner.deltaHistory.push(delta);\n\t            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n\t            delta = Math.min.apply(null, runner.deltaHistory);\n\t            \n\t            // limit delta\n\t            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n\t            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\t\n\t            // correction for delta\n\t            correction = delta / runner.delta;\n\t\n\t            // update engine timing object\n\t            runner.delta = delta;\n\t        }\n\t\n\t        // time correction for time scaling\n\t        if (runner.timeScalePrev !== 0)\n\t            correction *= timing.timeScale / runner.timeScalePrev;\n\t\n\t        if (timing.timeScale === 0)\n\t            correction = 0;\n\t\n\t        runner.timeScalePrev = timing.timeScale;\n\t        runner.correction = correction;\n\t\n\t        // fps counter\n\t        runner.frameCounter += 1;\n\t        if (time - runner.counterTimestamp >= 1000) {\n\t            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n\t            runner.counterTimestamp = time;\n\t            runner.frameCounter = 0;\n\t        }\n\t\n\t        Events.trigger(runner, 'tick', event);\n\t        Events.trigger(engine, 'tick', event); // @deprecated\n\t\n\t        // if world has been modified, clear the render scene graph\n\t        if (engine.world.isModified \n\t            && engine.render\n\t            && engine.render.controller\n\t            && engine.render.controller.clear) {\n\t            engine.render.controller.clear(engine.render);\n\t        }\n\t\n\t        // update\n\t        Events.trigger(runner, 'beforeUpdate', event);\n\t        Engine.update(engine, delta, correction);\n\t        Events.trigger(runner, 'afterUpdate', event);\n\t\n\t        // render\n\t        // @deprecated\n\t        if (engine.render && engine.render.controller) {\n\t            Events.trigger(runner, 'beforeRender', event);\n\t            Events.trigger(engine, 'beforeRender', event); // @deprecated\n\t\n\t            engine.render.controller.world(engine.render);\n\t\n\t            Events.trigger(runner, 'afterRender', event);\n\t            Events.trigger(engine, 'afterRender', event); // @deprecated\n\t        }\n\t\n\t        Events.trigger(runner, 'afterTick', event);\n\t        Events.trigger(engine, 'afterTick', event); // @deprecated\n\t    };\n\t\n\t    /**\n\t     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n\t     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n\t     * @method stop\n\t     * @param {runner} runner\n\t     */\n\t    Runner.stop = function(runner) {\n\t        _cancelAnimationFrame(runner.frameRequestId);\n\t    };\n\t\n\t    /**\n\t     * Alias for `Runner.run`.\n\t     * @method start\n\t     * @param {runner} runner\n\t     * @param {engine} engine\n\t     */\n\t    Runner.start = function(runner, engine) {\n\t        Runner.run(runner, engine);\n\t    };\n\t\n\t    /*\n\t    *\n\t    *  Events Documentation\n\t    *\n\t    */\n\t\n\t    /**\n\t    * Fired at the start of a tick, before any updates to the engine or timing\n\t    *\n\t    * @event beforeTick\n\t    * @param {} event An event object\n\t    * @param {number} event.timestamp The engine.timing.timestamp of the event\n\t    * @param {} event.source The source object of the event\n\t    * @param {} event.name The name of the event\n\t    */\n\t\n\t    /**\n\t    * Fired after engine timing updated, but just before update\n\t    *\n\t    * @event tick\n\t    * @param {} event An event object\n\t    * @param {number} event.timestamp The engine.timing.timestamp of the event\n\t    * @param {} event.source The source object of the event\n\t    * @param {} event.name The name of the event\n\t    */\n\t\n\t    /**\n\t    * Fired at the end of a tick, after engine update and after rendering\n\t    *\n\t    * @event afterTick\n\t    * @param {} event An event object\n\t    * @param {number} event.timestamp The engine.timing.timestamp of the event\n\t    * @param {} event.source The source object of the event\n\t    * @param {} event.name The name of the event\n\t    */\n\t\n\t    /**\n\t    * Fired before update\n\t    *\n\t    * @event beforeUpdate\n\t    * @param {} event An event object\n\t    * @param {number} event.timestamp The engine.timing.timestamp of the event\n\t    * @param {} event.source The source object of the event\n\t    * @param {} event.name The name of the event\n\t    */\n\t\n\t    /**\n\t    * Fired after update\n\t    *\n\t    * @event afterUpdate\n\t    * @param {} event An event object\n\t    * @param {number} event.timestamp The engine.timing.timestamp of the event\n\t    * @param {} event.source The source object of the event\n\t    * @param {} event.name The name of the event\n\t    */\n\t\n\t    /**\n\t    * Fired before rendering\n\t    *\n\t    * @event beforeRender\n\t    * @param {} event An event object\n\t    * @param {number} event.timestamp The engine.timing.timestamp of the event\n\t    * @param {} event.source The source object of the event\n\t    * @param {} event.name The name of the event\n\t    * @deprecated\n\t    */\n\t\n\t    /**\n\t    * Fired after rendering\n\t    *\n\t    * @event afterRender\n\t    * @param {} event An event object\n\t    * @param {number} event.timestamp The engine.timing.timestamp of the event\n\t    * @param {} event.source The source object of the event\n\t    * @param {} event.name The name of the event\n\t    * @deprecated\n\t    */\n\t\n\t    /*\n\t    *\n\t    *  Properties Documentation\n\t    *\n\t    */\n\t\n\t    /**\n\t     * A flag that specifies whether the runner is running or not.\n\t     *\n\t     * @property enabled\n\t     * @type boolean\n\t     * @default true\n\t     */\n\t\n\t    /**\n\t     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n\t     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n\t     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n\t     *\n\t     * @property isFixed\n\t     * @type boolean\n\t     * @default false\n\t     */\n\t\n\t    /**\n\t     * A `Number` that specifies the time step between updates in milliseconds.\n\t     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n\t     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n\t     *\n\t     * @property delta\n\t     * @type number\n\t     * @default 1000 / 60\n\t     */\n\t\n\t})();\n\t\n\t},{\"./Common\":14,\"./Engine\":15,\"./Events\":16}],20:[function(require,module,exports){\n\t/**\n\t* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n\t*\n\t* @class Sleeping\n\t*/\n\t\n\tvar Sleeping = {};\n\t\n\tmodule.exports = Sleeping;\n\t\n\tvar Events = require('./Events');\n\t\n\t(function() {\n\t\n\t    Sleeping._motionWakeThreshold = 0.18;\n\t    Sleeping._motionSleepThreshold = 0.08;\n\t    Sleeping._minBias = 0.9;\n\t\n\t    /**\n\t     * Puts bodies to sleep or wakes them up depending on their motion.\n\t     * @method update\n\t     * @param {body[]} bodies\n\t     * @param {number} timeScale\n\t     */\n\t    Sleeping.update = function(bodies, timeScale) {\n\t        var timeFactor = timeScale * timeScale * timeScale;\n\t\n\t        // update bodies sleeping status\n\t        for (var i = 0; i < bodies.length; i++) {\n\t            var body = bodies[i],\n\t                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\t\n\t            // wake up bodies if they have a force applied\n\t            if (body.force.x !== 0 || body.force.y !== 0) {\n\t                Sleeping.set(body, false);\n\t                continue;\n\t            }\n\t\n\t            var minMotion = Math.min(body.motion, motion),\n\t                maxMotion = Math.max(body.motion, motion);\n\t        \n\t            // biased average motion estimation between frames\n\t            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n\t            \n\t            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n\t                body.sleepCounter += 1;\n\t                \n\t                if (body.sleepCounter >= body.sleepThreshold)\n\t                    Sleeping.set(body, true);\n\t            } else if (body.sleepCounter > 0) {\n\t                body.sleepCounter -= 1;\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n\t     * @method afterCollisions\n\t     * @param {pair[]} pairs\n\t     * @param {number} timeScale\n\t     */\n\t    Sleeping.afterCollisions = function(pairs, timeScale) {\n\t        var timeFactor = timeScale * timeScale * timeScale;\n\t\n\t        // wake up bodies involved in collisions\n\t        for (var i = 0; i < pairs.length; i++) {\n\t            var pair = pairs[i];\n\t            \n\t            // don't wake inactive pairs\n\t            if (!pair.isActive)\n\t                continue;\n\t\n\t            var collision = pair.collision,\n\t                bodyA = collision.bodyA.parent, \n\t                bodyB = collision.bodyB.parent;\n\t        \n\t            // don't wake if at least one body is static\n\t            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n\t                continue;\n\t        \n\t            if (bodyA.isSleeping || bodyB.isSleeping) {\n\t                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n\t                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\t\n\t                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n\t                    Sleeping.set(sleepingBody, false);\n\t                }\n\t            }\n\t        }\n\t    };\n\t  \n\t    /**\n\t     * Set a body as sleeping or awake.\n\t     * @method set\n\t     * @param {body} body\n\t     * @param {boolean} isSleeping\n\t     */\n\t    Sleeping.set = function(body, isSleeping) {\n\t        var wasSleeping = body.isSleeping;\n\t\n\t        if (isSleeping) {\n\t            body.isSleeping = true;\n\t            body.sleepCounter = body.sleepThreshold;\n\t\n\t            body.positionImpulse.x = 0;\n\t            body.positionImpulse.y = 0;\n\t\n\t            body.positionPrev.x = body.position.x;\n\t            body.positionPrev.y = body.position.y;\n\t\n\t            body.anglePrev = body.angle;\n\t            body.speed = 0;\n\t            body.angularSpeed = 0;\n\t            body.motion = 0;\n\t\n\t            if (!wasSleeping) {\n\t                Events.trigger(body, 'sleepStart');\n\t            }\n\t        } else {\n\t            body.isSleeping = false;\n\t            body.sleepCounter = 0;\n\t\n\t            if (wasSleeping) {\n\t                Events.trigger(body, 'sleepEnd');\n\t            }\n\t        }\n\t    };\n\t\n\t})();\n\t\n\t},{\"./Events\":16}],21:[function(require,module,exports){\n\t/**\n\t* The `Matter.Bodies` module contains factory methods for creating rigid body models \n\t* with commonly used body configurations (such as rectangles, circles and other polygons).\n\t*\n\t* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\t*\n\t* @class Bodies\n\t*/\n\t\n\t// TODO: true circle bodies\n\t\n\tvar Bodies = {};\n\t\n\tmodule.exports = Bodies;\n\t\n\tvar Vertices = require('../geometry/Vertices');\n\tvar Common = require('../core/Common');\n\tvar Body = require('../body/Body');\n\tvar Bounds = require('../geometry/Bounds');\n\tvar Vector = require('../geometry/Vector');\n\t\n\t(function() {\n\t\n\t    /**\n\t     * Creates a new rigid body model with a rectangle hull. \n\t     * The options parameter is an object that specifies any properties you wish to override the defaults.\n\t     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n\t     * @method rectangle\n\t     * @param {number} x\n\t     * @param {number} y\n\t     * @param {number} width\n\t     * @param {number} height\n\t     * @param {object} [options]\n\t     * @return {body} A new rectangle body\n\t     */\n\t    Bodies.rectangle = function(x, y, width, height, options) {\n\t        options = options || {};\n\t\n\t        var rectangle = { \n\t            label: 'Rectangle Body',\n\t            position: { x: x, y: y },\n\t            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n\t        };\n\t\n\t        if (options.chamfer) {\n\t            var chamfer = options.chamfer;\n\t            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n\t                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n\t            delete options.chamfer;\n\t        }\n\t\n\t        return Body.create(Common.extend({}, rectangle, options));\n\t    };\n\t    \n\t    /**\n\t     * Creates a new rigid body model with a trapezoid hull. \n\t     * The options parameter is an object that specifies any properties you wish to override the defaults.\n\t     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n\t     * @method trapezoid\n\t     * @param {number} x\n\t     * @param {number} y\n\t     * @param {number} width\n\t     * @param {number} height\n\t     * @param {number} slope\n\t     * @param {object} [options]\n\t     * @return {body} A new trapezoid body\n\t     */\n\t    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n\t        options = options || {};\n\t\n\t        slope *= 0.5;\n\t        var roof = (1 - (slope * 2)) * width;\n\t        \n\t        var x1 = width * slope,\n\t            x2 = x1 + roof,\n\t            x3 = x2 + x1,\n\t            verticesPath;\n\t\n\t        if (slope < 0.5) {\n\t            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n\t        } else {\n\t            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n\t        }\n\t\n\t        var trapezoid = { \n\t            label: 'Trapezoid Body',\n\t            position: { x: x, y: y },\n\t            vertices: Vertices.fromPath(verticesPath)\n\t        };\n\t\n\t        if (options.chamfer) {\n\t            var chamfer = options.chamfer;\n\t            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n\t                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n\t            delete options.chamfer;\n\t        }\n\t\n\t        return Body.create(Common.extend({}, trapezoid, options));\n\t    };\n\t\n\t    /**\n\t     * Creates a new rigid body model with a circle hull. \n\t     * The options parameter is an object that specifies any properties you wish to override the defaults.\n\t     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n\t     * @method circle\n\t     * @param {number} x\n\t     * @param {number} y\n\t     * @param {number} radius\n\t     * @param {object} [options]\n\t     * @param {number} [maxSides]\n\t     * @return {body} A new circle body\n\t     */\n\t    Bodies.circle = function(x, y, radius, options, maxSides) {\n\t        options = options || {};\n\t\n\t        var circle = {\n\t            label: 'Circle Body',\n\t            circleRadius: radius\n\t        };\n\t        \n\t        // approximate circles with polygons until true circles implemented in SAT\n\t        maxSides = maxSides || 25;\n\t        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\t\n\t        // optimisation: always use even number of sides (half the number of unique axes)\n\t        if (sides % 2 === 1)\n\t            sides += 1;\n\t\n\t        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n\t    };\n\t\n\t    /**\n\t     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n\t     * The options parameter is an object that specifies any properties you wish to override the defaults.\n\t     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n\t     * @method polygon\n\t     * @param {number} x\n\t     * @param {number} y\n\t     * @param {number} sides\n\t     * @param {number} radius\n\t     * @param {object} [options]\n\t     * @return {body} A new regular polygon body\n\t     */\n\t    Bodies.polygon = function(x, y, sides, radius, options) {\n\t        options = options || {};\n\t\n\t        if (sides < 3)\n\t            return Bodies.circle(x, y, radius, options);\n\t\n\t        var theta = 2 * Math.PI / sides,\n\t            path = '',\n\t            offset = theta * 0.5;\n\t\n\t        for (var i = 0; i < sides; i += 1) {\n\t            var angle = offset + (i * theta),\n\t                xx = Math.cos(angle) * radius,\n\t                yy = Math.sin(angle) * radius;\n\t\n\t            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n\t        }\n\t\n\t        var polygon = { \n\t            label: 'Polygon Body',\n\t            position: { x: x, y: y },\n\t            vertices: Vertices.fromPath(path)\n\t        };\n\t\n\t        if (options.chamfer) {\n\t            var chamfer = options.chamfer;\n\t            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n\t                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n\t            delete options.chamfer;\n\t        }\n\t\n\t        return Body.create(Common.extend({}, polygon, options));\n\t    };\n\t\n\t    /**\n\t     * Creates a body using the supplied vertices (or an array containing multiple sets of vertices).\n\t     * If the vertices are convex, they will pass through as supplied.\n\t     * Otherwise if the vertices are concave, they will be decomposed if [poly-decomp.js](https://github.com/schteppe/poly-decomp.js) is available.\n\t     * Note that this process is not guaranteed to support complex sets of vertices (e.g. those with holes may fail).\n\t     * By default the decomposition will discard collinear edges (to improve performance).\n\t     * It can also optionally discard any parts that have an area less than `minimumArea`.\n\t     * If the vertices can not be decomposed, the result will fall back to using the convex hull.\n\t     * The options parameter is an object that specifies any `Matter.Body` properties you wish to override the defaults.\n\t     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n\t     * @method fromVertices\n\t     * @param {number} x\n\t     * @param {number} y\n\t     * @param [[vector]] vertexSets\n\t     * @param {object} [options]\n\t     * @param {bool} [flagInternal=false]\n\t     * @param {number} [removeCollinear=0.01]\n\t     * @param {number} [minimumArea=10]\n\t     * @return {body}\n\t     */\n\t    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea) {\n\t        var body,\n\t            parts,\n\t            isConvex,\n\t            vertices,\n\t            i,\n\t            j,\n\t            k,\n\t            v,\n\t            z;\n\t\n\t        options = options || {};\n\t        parts = [];\n\t\n\t        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n\t        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n\t        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n\t\n\t        if (!window.decomp) {\n\t            Common.log('Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.', 'warn');\n\t        }\n\t\n\t        // ensure vertexSets is an array of arrays\n\t        if (!Common.isArray(vertexSets[0])) {\n\t            vertexSets = [vertexSets];\n\t        }\n\t\n\t        for (v = 0; v < vertexSets.length; v += 1) {\n\t            vertices = vertexSets[v];\n\t            isConvex = Vertices.isConvex(vertices);\n\t\n\t            if (isConvex || !window.decomp) {\n\t                if (isConvex) {\n\t                    vertices = Vertices.clockwiseSort(vertices);\n\t                } else {\n\t                    // fallback to convex hull when decomposition is not possible\n\t                    vertices = Vertices.hull(vertices);\n\t                }\n\t\n\t                parts.push({\n\t                    position: { x: x, y: y },\n\t                    vertices: vertices\n\t                });\n\t            } else {\n\t                // initialise a decomposition\n\t                var concave = new decomp.Polygon();\n\t                for (i = 0; i < vertices.length; i++) {\n\t                    concave.vertices.push([vertices[i].x, vertices[i].y]);\n\t                }\n\t\n\t                // vertices are concave and simple, we can decompose into parts\n\t                concave.makeCCW();\n\t                if (removeCollinear !== false)\n\t                    concave.removeCollinearPoints(removeCollinear);\n\t\n\t                // use the quick decomposition algorithm (Bayazit)\n\t                var decomposed = concave.quickDecomp();\n\t\n\t                // for each decomposed chunk\n\t                for (i = 0; i < decomposed.length; i++) {\n\t                    var chunk = decomposed[i],\n\t                        chunkVertices = [];\n\t\n\t                    // convert vertices into the correct structure\n\t                    for (j = 0; j < chunk.vertices.length; j++) {\n\t                        chunkVertices.push({ x: chunk.vertices[j][0], y: chunk.vertices[j][1] });\n\t                    }\n\t\n\t                    // skip small chunks\n\t                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n\t                        continue;\n\t\n\t                    // create a compound part\n\t                    parts.push({\n\t                        position: Vertices.centre(chunkVertices),\n\t                        vertices: chunkVertices\n\t                    });\n\t                }\n\t            }\n\t        }\n\t\n\t        // create body parts\n\t        for (i = 0; i < parts.length; i++) {\n\t            parts[i] = Body.create(Common.extend(parts[i], options));\n\t        }\n\t\n\t        // flag internal edges (coincident part edges)\n\t        if (flagInternal) {\n\t            var coincident_max_dist = 5;\n\t\n\t            for (i = 0; i < parts.length; i++) {\n\t                var partA = parts[i];\n\t\n\t                for (j = i + 1; j < parts.length; j++) {\n\t                    var partB = parts[j];\n\t\n\t                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n\t                        var pav = partA.vertices,\n\t                            pbv = partB.vertices;\n\t\n\t                        // iterate vertices of both parts\n\t                        for (k = 0; k < partA.vertices.length; k++) {\n\t                            for (z = 0; z < partB.vertices.length; z++) {\n\t                                // find distances between the vertices\n\t                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n\t                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\t\n\t                                // if both vertices are very close, consider the edge concident (internal)\n\t                                if (da < coincident_max_dist && db < coincident_max_dist) {\n\t                                    pav[k].isInternal = true;\n\t                                    pbv[z].isInternal = true;\n\t                                }\n\t                            }\n\t                        }\n\t\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t        if (parts.length > 1) {\n\t            // create the parent body to be returned, that contains generated compound parts\n\t            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n\t            Body.setPosition(body, { x: x, y: y });\n\t\n\t            return body;\n\t        } else {\n\t            return parts[0];\n\t        }\n\t    };\n\t\n\t})();\n\t},{\"../body/Body\":1,\"../core/Common\":14,\"../geometry/Bounds\":24,\"../geometry/Vector\":26,\"../geometry/Vertices\":27}],22:[function(require,module,exports){\n\t/**\n\t* The `Matter.Composites` module contains factory methods for creating composite bodies\n\t* with commonly used configurations (such as stacks and chains).\n\t*\n\t* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\t*\n\t* @class Composites\n\t*/\n\t\n\tvar Composites = {};\n\t\n\tmodule.exports = Composites;\n\t\n\tvar Composite = require('../body/Composite');\n\tvar Constraint = require('../constraint/Constraint');\n\tvar Common = require('../core/Common');\n\tvar Body = require('../body/Body');\n\tvar Bodies = require('./Bodies');\n\t\n\t(function() {\n\t\n\t    /**\n\t     * Create a new composite containing bodies created in the callback in a grid arrangement.\n\t     * This function uses the body's bounds to prevent overlaps.\n\t     * @method stack\n\t     * @param {number} xx\n\t     * @param {number} yy\n\t     * @param {number} columns\n\t     * @param {number} rows\n\t     * @param {number} columnGap\n\t     * @param {number} rowGap\n\t     * @param {function} callback\n\t     * @return {composite} A new composite containing objects created in the callback\n\t     */\n\t    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n\t        var stack = Composite.create({ label: 'Stack' }),\n\t            x = xx,\n\t            y = yy,\n\t            lastBody,\n\t            i = 0;\n\t\n\t        for (var row = 0; row < rows; row++) {\n\t            var maxHeight = 0;\n\t            \n\t            for (var column = 0; column < columns; column++) {\n\t                var body = callback(x, y, column, row, lastBody, i);\n\t                    \n\t                if (body) {\n\t                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n\t                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\t\n\t                    if (bodyHeight > maxHeight)\n\t                        maxHeight = bodyHeight;\n\t                    \n\t                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\t\n\t                    x = body.bounds.max.x + columnGap;\n\t\n\t                    Composite.addBody(stack, body);\n\t                    \n\t                    lastBody = body;\n\t                    i += 1;\n\t                } else {\n\t                    x += columnGap;\n\t                }\n\t            }\n\t            \n\t            y += maxHeight + rowGap;\n\t            x = xx;\n\t        }\n\t\n\t        return stack;\n\t    };\n\t    \n\t    /**\n\t     * Chains all bodies in the given composite together using constraints.\n\t     * @method chain\n\t     * @param {composite} composite\n\t     * @param {number} xOffsetA\n\t     * @param {number} yOffsetA\n\t     * @param {number} xOffsetB\n\t     * @param {number} yOffsetB\n\t     * @param {object} options\n\t     * @return {composite} A new composite containing objects chained together with constraints\n\t     */\n\t    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n\t        var bodies = composite.bodies;\n\t        \n\t        for (var i = 1; i < bodies.length; i++) {\n\t            var bodyA = bodies[i - 1],\n\t                bodyB = bodies[i],\n\t                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n\t                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n\t                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n\t                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n\t        \n\t            var defaults = {\n\t                bodyA: bodyA,\n\t                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n\t                bodyB: bodyB,\n\t                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n\t            };\n\t            \n\t            var constraint = Common.extend(defaults, options);\n\t        \n\t            Composite.addConstraint(composite, Constraint.create(constraint));\n\t        }\n\t\n\t        composite.label += ' Chain';\n\t        \n\t        return composite;\n\t    };\n\t\n\t    /**\n\t     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n\t     * @method mesh\n\t     * @param {composite} composite\n\t     * @param {number} columns\n\t     * @param {number} rows\n\t     * @param {boolean} crossBrace\n\t     * @param {object} options\n\t     * @return {composite} The composite containing objects meshed together with constraints\n\t     */\n\t    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n\t        var bodies = composite.bodies,\n\t            row,\n\t            col,\n\t            bodyA,\n\t            bodyB,\n\t            bodyC;\n\t        \n\t        for (row = 0; row < rows; row++) {\n\t            for (col = 1; col < columns; col++) {\n\t                bodyA = bodies[(col - 1) + (row * columns)];\n\t                bodyB = bodies[col + (row * columns)];\n\t                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\t            }\n\t\n\t            if (row > 0) {\n\t                for (col = 0; col < columns; col++) {\n\t                    bodyA = bodies[col + ((row - 1) * columns)];\n\t                    bodyB = bodies[col + (row * columns)];\n\t                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\t\n\t                    if (crossBrace && col > 0) {\n\t                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n\t                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n\t                    }\n\t\n\t                    if (crossBrace && col < columns - 1) {\n\t                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n\t                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t        composite.label += ' Mesh';\n\t        \n\t        return composite;\n\t    };\n\t    \n\t    /**\n\t     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n\t     * This function uses the body's bounds to prevent overlaps.\n\t     * @method pyramid\n\t     * @param {number} xx\n\t     * @param {number} yy\n\t     * @param {number} columns\n\t     * @param {number} rows\n\t     * @param {number} columnGap\n\t     * @param {number} rowGap\n\t     * @param {function} callback\n\t     * @return {composite} A new composite containing objects created in the callback\n\t     */\n\t    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n\t        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n\t            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n\t                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n\t            \n\t            if (row > actualRows)\n\t                return;\n\t            \n\t            // reverse row order\n\t            row = actualRows - row;\n\t            \n\t            var start = row,\n\t                end = columns - 1 - row;\n\t\n\t            if (column < start || column > end)\n\t                return;\n\t            \n\t            // retroactively fix the first body's position, since width was unknown\n\t            if (i === 1) {\n\t                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n\t            }\n\t\n\t            var xOffset = lastBody ? column * lastBodyWidth : 0;\n\t            \n\t            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Creates a composite with a Newton's Cradle setup of bodies and constraints.\n\t     * @method newtonsCradle\n\t     * @param {number} xx\n\t     * @param {number} yy\n\t     * @param {number} number\n\t     * @param {number} size\n\t     * @param {number} length\n\t     * @return {composite} A new composite newtonsCradle body\n\t     */\n\t    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n\t        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\t\n\t        for (var i = 0; i < number; i++) {\n\t            var separation = 1.9,\n\t                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n\t                            { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n\t                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\t\n\t            Composite.addBody(newtonsCradle, circle);\n\t            Composite.addConstraint(newtonsCradle, constraint);\n\t        }\n\t\n\t        return newtonsCradle;\n\t    };\n\t    \n\t    /**\n\t     * Creates a composite with simple car setup of bodies and constraints.\n\t     * @method car\n\t     * @param {number} xx\n\t     * @param {number} yy\n\t     * @param {number} width\n\t     * @param {number} height\n\t     * @param {number} wheelSize\n\t     * @return {composite} A new composite car body\n\t     */\n\t    Composites.car = function(xx, yy, width, height, wheelSize) {\n\t        var group = Body.nextGroup(true),\n\t            wheelBase = -20,\n\t            wheelAOffset = -width * 0.5 + wheelBase,\n\t            wheelBOffset = width * 0.5 - wheelBase,\n\t            wheelYOffset = 0;\n\t    \n\t        var car = Composite.create({ label: 'Car' }),\n\t            body = Bodies.trapezoid(xx, yy, width, height, 0.3, { \n\t                collisionFilter: {\n\t                    group: group\n\t                },\n\t                friction: 0.01,\n\t                chamfer: {\n\t                    radius: 10\n\t                }\n\t            });\n\t    \n\t        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n\t            collisionFilter: {\n\t                group: group\n\t            },\n\t            friction: 0.8,\n\t            density: 0.01\n\t        });\n\t                    \n\t        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n\t            collisionFilter: {\n\t                group: group\n\t            },\n\t            friction: 0.8,\n\t            density: 0.01\n\t        });\n\t                    \n\t        var axelA = Constraint.create({\n\t            bodyA: body,\n\t            pointA: { x: wheelAOffset, y: wheelYOffset },\n\t            bodyB: wheelA,\n\t            stiffness: 0.2\n\t        });\n\t                        \n\t        var axelB = Constraint.create({\n\t            bodyA: body,\n\t            pointA: { x: wheelBOffset, y: wheelYOffset },\n\t            bodyB: wheelB,\n\t            stiffness: 0.2\n\t        });\n\t        \n\t        Composite.addBody(car, body);\n\t        Composite.addBody(car, wheelA);\n\t        Composite.addBody(car, wheelB);\n\t        Composite.addConstraint(car, axelA);\n\t        Composite.addConstraint(car, axelB);\n\t\n\t        return car;\n\t    };\n\t\n\t    /**\n\t     * Creates a simple soft body like object.\n\t     * @method softBody\n\t     * @param {number} xx\n\t     * @param {number} yy\n\t     * @param {number} columns\n\t     * @param {number} rows\n\t     * @param {number} columnGap\n\t     * @param {number} rowGap\n\t     * @param {boolean} crossBrace\n\t     * @param {number} particleRadius\n\t     * @param {} particleOptions\n\t     * @param {} constraintOptions\n\t     * @return {composite} A new composite softBody\n\t     */\n\t    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n\t        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n\t        constraintOptions = Common.extend({ stiffness: 0.4 }, constraintOptions);\n\t\n\t        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n\t            return Bodies.circle(x, y, particleRadius, particleOptions);\n\t        });\n\t\n\t        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\t\n\t        softBody.label = 'Soft Body';\n\t\n\t        return softBody;\n\t    };\n\t\n\t})();\n\t\n\t},{\"../body/Body\":1,\"../body/Composite\":2,\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Bodies\":21}],23:[function(require,module,exports){\n\t/**\n\t* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n\t*\n\t* @class Axes\n\t*/\n\t\n\tvar Axes = {};\n\t\n\tmodule.exports = Axes;\n\t\n\tvar Vector = require('../geometry/Vector');\n\tvar Common = require('../core/Common');\n\t\n\t(function() {\n\t\n\t    /**\n\t     * Creates a new set of axes from the given vertices.\n\t     * @method fromVertices\n\t     * @param {vertices} vertices\n\t     * @return {axes} A new axes from the given vertices\n\t     */\n\t    Axes.fromVertices = function(vertices) {\n\t        var axes = {};\n\t\n\t        // find the unique axes, using edge normal gradients\n\t        for (var i = 0; i < vertices.length; i++) {\n\t            var j = (i + 1) % vertices.length, \n\t                normal = Vector.normalise({ \n\t                    x: vertices[j].y - vertices[i].y, \n\t                    y: vertices[i].x - vertices[j].x\n\t                }),\n\t                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n\t            \n\t            // limit precision\n\t            gradient = gradient.toFixed(3).toString();\n\t            axes[gradient] = normal;\n\t        }\n\t\n\t        return Common.values(axes);\n\t    };\n\t\n\t    /**\n\t     * Rotates a set of axes by the given angle.\n\t     * @method rotate\n\t     * @param {axes} axes\n\t     * @param {number} angle\n\t     */\n\t    Axes.rotate = function(axes, angle) {\n\t        if (angle === 0)\n\t            return;\n\t        \n\t        var cos = Math.cos(angle),\n\t            sin = Math.sin(angle);\n\t\n\t        for (var i = 0; i < axes.length; i++) {\n\t            var axis = axes[i],\n\t                xx;\n\t            xx = axis.x * cos - axis.y * sin;\n\t            axis.y = axis.x * sin + axis.y * cos;\n\t            axis.x = xx;\n\t        }\n\t    };\n\t\n\t})();\n\t\n\t},{\"../core/Common\":14,\"../geometry/Vector\":26}],24:[function(require,module,exports){\n\t/**\n\t* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n\t*\n\t* @class Bounds\n\t*/\n\t\n\tvar Bounds = {};\n\t\n\tmodule.exports = Bounds;\n\t\n\t(function() {\n\t\n\t    /**\n\t     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n\t     * @method create\n\t     * @param {vertices} vertices\n\t     * @return {bounds} A new bounds object\n\t     */\n\t    Bounds.create = function(vertices) {\n\t        var bounds = { \n\t            min: { x: 0, y: 0 }, \n\t            max: { x: 0, y: 0 }\n\t        };\n\t\n\t        if (vertices)\n\t            Bounds.update(bounds, vertices);\n\t        \n\t        return bounds;\n\t    };\n\t\n\t    /**\n\t     * Updates bounds using the given vertices and extends the bounds given a velocity.\n\t     * @method update\n\t     * @param {bounds} bounds\n\t     * @param {vertices} vertices\n\t     * @param {vector} velocity\n\t     */\n\t    Bounds.update = function(bounds, vertices, velocity) {\n\t        bounds.min.x = Infinity;\n\t        bounds.max.x = -Infinity;\n\t        bounds.min.y = Infinity;\n\t        bounds.max.y = -Infinity;\n\t\n\t        for (var i = 0; i < vertices.length; i++) {\n\t            var vertex = vertices[i];\n\t            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n\t            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n\t            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n\t            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n\t        }\n\t        \n\t        if (velocity) {\n\t            if (velocity.x > 0) {\n\t                bounds.max.x += velocity.x;\n\t            } else {\n\t                bounds.min.x += velocity.x;\n\t            }\n\t            \n\t            if (velocity.y > 0) {\n\t                bounds.max.y += velocity.y;\n\t            } else {\n\t                bounds.min.y += velocity.y;\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Returns true if the bounds contains the given point.\n\t     * @method contains\n\t     * @param {bounds} bounds\n\t     * @param {vector} point\n\t     * @return {boolean} True if the bounds contain the point, otherwise false\n\t     */\n\t    Bounds.contains = function(bounds, point) {\n\t        return point.x >= bounds.min.x && point.x <= bounds.max.x \n\t               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n\t    };\n\t\n\t    /**\n\t     * Returns true if the two bounds intersect.\n\t     * @method overlaps\n\t     * @param {bounds} boundsA\n\t     * @param {bounds} boundsB\n\t     * @return {boolean} True if the bounds overlap, otherwise false\n\t     */\n\t    Bounds.overlaps = function(boundsA, boundsB) {\n\t        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n\t                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n\t    };\n\t\n\t    /**\n\t     * Translates the bounds by the given vector.\n\t     * @method translate\n\t     * @param {bounds} bounds\n\t     * @param {vector} vector\n\t     */\n\t    Bounds.translate = function(bounds, vector) {\n\t        bounds.min.x += vector.x;\n\t        bounds.max.x += vector.x;\n\t        bounds.min.y += vector.y;\n\t        bounds.max.y += vector.y;\n\t    };\n\t\n\t    /**\n\t     * Shifts the bounds to the given position.\n\t     * @method shift\n\t     * @param {bounds} bounds\n\t     * @param {vector} position\n\t     */\n\t    Bounds.shift = function(bounds, position) {\n\t        var deltaX = bounds.max.x - bounds.min.x,\n\t            deltaY = bounds.max.y - bounds.min.y;\n\t            \n\t        bounds.min.x = position.x;\n\t        bounds.max.x = position.x + deltaX;\n\t        bounds.min.y = position.y;\n\t        bounds.max.y = position.y + deltaY;\n\t    };\n\t    \n\t})();\n\t\n\t},{}],25:[function(require,module,exports){\n\t/**\n\t* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n\t*\n\t* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n\t*\n\t* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\t*\n\t* @class Svg\n\t*/\n\t\n\tvar Svg = {};\n\t\n\tmodule.exports = Svg;\n\t\n\tvar Bounds = require('../geometry/Bounds');\n\t\n\t(function() {\n\t\n\t    /**\n\t     * Converts an SVG path into an array of vector points.\n\t     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n\t     * See `Bodies.fromVertices` which provides support for this.\n\t     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n\t     * @method pathToVertices\n\t     * @param {SVGPathElement} path\n\t     * @param {Number} [sampleLength=15]\n\t     * @return {Vector[]} points\n\t     */\n\t    Svg.pathToVertices = function(path, sampleLength) {\n\t        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n\t        var i, il, total, point, segment, segments, \n\t            segmentsQueue, lastSegment, \n\t            lastPoint, segmentIndex, points = [],\n\t            lx, ly, length = 0, x = 0, y = 0;\n\t\n\t        sampleLength = sampleLength || 15;\n\t\n\t        var addPoint = function(px, py, pathSegType) {\n\t            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n\t            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\t\n\t            // when the last point doesn't equal the current point add the current point\n\t            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n\t                if (lastPoint && isRelative) {\n\t                    lx = lastPoint.x;\n\t                    ly = lastPoint.y;\n\t                } else {\n\t                    lx = 0;\n\t                    ly = 0;\n\t                }\n\t\n\t                var point = {\n\t                    x: lx + px,\n\t                    y: ly + py\n\t                };\n\t\n\t                // set last point\n\t                if (isRelative || !lastPoint) {\n\t                    lastPoint = point;\n\t                }\n\t\n\t                points.push(point);\n\t\n\t                x = lx + px;\n\t                y = ly + py;\n\t            }\n\t        };\n\t\n\t        var addSegmentPoint = function(segment) {\n\t            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\t\n\t            // skip path ends\n\t            if (segType === 'Z') \n\t                return;\n\t\n\t            // map segment to x and y\n\t            switch (segType) {\n\t\n\t            case 'M':\n\t            case 'L':\n\t            case 'T':\n\t            case 'C':\n\t            case 'S':\n\t            case 'Q':\n\t                x = segment.x;\n\t                y = segment.y;\n\t                break;\n\t            case 'H':\n\t                x = segment.x;\n\t                break;\n\t            case 'V':\n\t                y = segment.y;\n\t                break;\n\t            }\n\t\n\t            addPoint(x, y, segment.pathSegType);\n\t        };\n\t\n\t        // ensure path is absolute\n\t        _svgPathToAbsolute(path);\n\t\n\t        // get total length\n\t        total = path.getTotalLength();\n\t\n\t        // queue segments\n\t        segments = [];\n\t        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n\t            segments.push(path.pathSegList.getItem(i));\n\t\n\t        segmentsQueue = segments.concat();\n\t\n\t        // sample through path\n\t        while (length < total) {\n\t            // get segment at position\n\t            segmentIndex = path.getPathSegAtLength(length);\n\t            segment = segments[segmentIndex];\n\t\n\t            // new segment\n\t            if (segment != lastSegment) {\n\t                while (segmentsQueue.length && segmentsQueue[0] != segment)\n\t                    addSegmentPoint(segmentsQueue.shift());\n\t\n\t                lastSegment = segment;\n\t            }\n\t\n\t            // add points in between when curving\n\t            // TODO: adaptive sampling\n\t            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\t\n\t            case 'C':\n\t            case 'T':\n\t            case 'S':\n\t            case 'Q':\n\t            case 'A':\n\t                point = path.getPointAtLength(length);\n\t                addPoint(point.x, point.y, 0);\n\t                break;\n\t\n\t            }\n\t\n\t            // increment by sample value\n\t            length += sampleLength;\n\t        }\n\t\n\t        // add remaining segments not passed by sampling\n\t        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n\t            addSegmentPoint(segmentsQueue[i]);\n\t\n\t        return points;\n\t    };\n\t\n\t    var _svgPathToAbsolute = function(path) {\n\t        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n\t        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n\t            x = 0, y = 0, len = segs.numberOfItems;\n\t\n\t        for (var i = 0; i < len; ++i) {\n\t            var seg = segs.getItem(i),\n\t                segType = seg.pathSegTypeAsLetter;\n\t\n\t            if (/[MLHVCSQTA]/.test(segType)) {\n\t                if ('x' in seg) x = seg.x;\n\t                if ('y' in seg) y = seg.y;\n\t            } else {\n\t                if ('x1' in seg) x1 = x + seg.x1;\n\t                if ('x2' in seg) x2 = x + seg.x2;\n\t                if ('y1' in seg) y1 = y + seg.y1;\n\t                if ('y2' in seg) y2 = y + seg.y2;\n\t                if ('x' in seg) x += seg.x;\n\t                if ('y' in seg) y += seg.y;\n\t\n\t                switch (segType) {\n\t\n\t                case 'm':\n\t                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n\t                    break;\n\t                case 'l':\n\t                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n\t                    break;\n\t                case 'h':\n\t                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n\t                    break;\n\t                case 'v':\n\t                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n\t                    break;\n\t                case 'c':\n\t                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n\t                    break;\n\t                case 's':\n\t                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n\t                    break;\n\t                case 'q':\n\t                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n\t                    break;\n\t                case 't':\n\t                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n\t                    break;\n\t                case 'a':\n\t                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n\t                    break;\n\t                case 'z':\n\t                case 'Z':\n\t                    x = x0;\n\t                    y = y0;\n\t                    break;\n\t\n\t                }\n\t            }\n\t\n\t            if (segType == 'M' || segType == 'm') {\n\t                x0 = x;\n\t                y0 = y;\n\t            }\n\t        }\n\t    };\n\t\n\t})();\n\t},{\"../geometry/Bounds\":24}],26:[function(require,module,exports){\n\t/**\n\t* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n\t* Vectors are the basis of all the geometry related operations in the engine.\n\t* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n\t*\n\t* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\t*\n\t* @class Vector\n\t*/\n\t\n\t// TODO: consider params for reusing vector objects\n\t\n\tvar Vector = {};\n\t\n\tmodule.exports = Vector;\n\t\n\t(function() {\n\t\n\t    /**\n\t     * Creates a new vector.\n\t     * @method create\n\t     * @param {number} x\n\t     * @param {number} y\n\t     * @return {vector} A new vector\n\t     */\n\t    Vector.create = function(x, y) {\n\t        return { x: x || 0, y: y || 0 };\n\t    };\n\t\n\t    /**\n\t     * Returns a new vector with `x` and `y` copied from the given `vector`.\n\t     * @method clone\n\t     * @param {vector} vector\n\t     * @return {vector} A new cloned vector\n\t     */\n\t    Vector.clone = function(vector) {\n\t        return { x: vector.x, y: vector.y };\n\t    };\n\t\n\t    /**\n\t     * Returns the magnitude (length) of a vector.\n\t     * @method magnitude\n\t     * @param {vector} vector\n\t     * @return {number} The magnitude of the vector\n\t     */\n\t    Vector.magnitude = function(vector) {\n\t        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n\t    };\n\t\n\t    /**\n\t     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n\t     * @method magnitudeSquared\n\t     * @param {vector} vector\n\t     * @return {number} The squared magnitude of the vector\n\t     */\n\t    Vector.magnitudeSquared = function(vector) {\n\t        return (vector.x * vector.x) + (vector.y * vector.y);\n\t    };\n\t\n\t    /**\n\t     * Rotates the vector about (0, 0) by specified angle.\n\t     * @method rotate\n\t     * @param {vector} vector\n\t     * @param {number} angle\n\t     * @return {vector} A new vector rotated about (0, 0)\n\t     */\n\t    Vector.rotate = function(vector, angle) {\n\t        var cos = Math.cos(angle), sin = Math.sin(angle);\n\t        return {\n\t            x: vector.x * cos - vector.y * sin,\n\t            y: vector.x * sin + vector.y * cos\n\t        };\n\t    };\n\t\n\t    /**\n\t     * Rotates the vector about a specified point by specified angle.\n\t     * @method rotateAbout\n\t     * @param {vector} vector\n\t     * @param {number} angle\n\t     * @param {vector} point\n\t     * @param {vector} [output]\n\t     * @return {vector} A new vector rotated about the point\n\t     */\n\t    Vector.rotateAbout = function(vector, angle, point, output) {\n\t        var cos = Math.cos(angle), sin = Math.sin(angle);\n\t        if (!output) output = {};\n\t        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n\t        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n\t        output.x = x;\n\t        return output;\n\t    };\n\t\n\t    /**\n\t     * Normalises a vector (such that its magnitude is `1`).\n\t     * @method normalise\n\t     * @param {vector} vector\n\t     * @return {vector} A new vector normalised\n\t     */\n\t    Vector.normalise = function(vector) {\n\t        var magnitude = Vector.magnitude(vector);\n\t        if (magnitude === 0)\n\t            return { x: 0, y: 0 };\n\t        return { x: vector.x / magnitude, y: vector.y / magnitude };\n\t    };\n\t\n\t    /**\n\t     * Returns the dot-product of two vectors.\n\t     * @method dot\n\t     * @param {vector} vectorA\n\t     * @param {vector} vectorB\n\t     * @return {number} The dot product of the two vectors\n\t     */\n\t    Vector.dot = function(vectorA, vectorB) {\n\t        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n\t    };\n\t\n\t    /**\n\t     * Returns the cross-product of two vectors.\n\t     * @method cross\n\t     * @param {vector} vectorA\n\t     * @param {vector} vectorB\n\t     * @return {number} The cross product of the two vectors\n\t     */\n\t    Vector.cross = function(vectorA, vectorB) {\n\t        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n\t    };\n\t\n\t    /**\n\t     * Returns the cross-product of three vectors.\n\t     * @method cross3\n\t     * @param {vector} vectorA\n\t     * @param {vector} vectorB\n\t     * @param {vector} vectorC\n\t     * @return {number} The cross product of the three vectors\n\t     */\n\t    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n\t        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n\t    };\n\t\n\t    /**\n\t     * Adds the two vectors.\n\t     * @method add\n\t     * @param {vector} vectorA\n\t     * @param {vector} vectorB\n\t     * @param {vector} [output]\n\t     * @return {vector} A new vector of vectorA and vectorB added\n\t     */\n\t    Vector.add = function(vectorA, vectorB, output) {\n\t        if (!output) output = {};\n\t        output.x = vectorA.x + vectorB.x;\n\t        output.y = vectorA.y + vectorB.y;\n\t        return output;\n\t    };\n\t\n\t    /**\n\t     * Subtracts the two vectors.\n\t     * @method sub\n\t     * @param {vector} vectorA\n\t     * @param {vector} vectorB\n\t     * @param {vector} [output]\n\t     * @return {vector} A new vector of vectorA and vectorB subtracted\n\t     */\n\t    Vector.sub = function(vectorA, vectorB, output) {\n\t        if (!output) output = {};\n\t        output.x = vectorA.x - vectorB.x;\n\t        output.y = vectorA.y - vectorB.y;\n\t        return output;\n\t    };\n\t\n\t    /**\n\t     * Multiplies a vector and a scalar.\n\t     * @method mult\n\t     * @param {vector} vector\n\t     * @param {number} scalar\n\t     * @return {vector} A new vector multiplied by scalar\n\t     */\n\t    Vector.mult = function(vector, scalar) {\n\t        return { x: vector.x * scalar, y: vector.y * scalar };\n\t    };\n\t\n\t    /**\n\t     * Divides a vector and a scalar.\n\t     * @method div\n\t     * @param {vector} vector\n\t     * @param {number} scalar\n\t     * @return {vector} A new vector divided by scalar\n\t     */\n\t    Vector.div = function(vector, scalar) {\n\t        return { x: vector.x / scalar, y: vector.y / scalar };\n\t    };\n\t\n\t    /**\n\t     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n\t     * @method perp\n\t     * @param {vector} vector\n\t     * @param {bool} [negate=false]\n\t     * @return {vector} The perpendicular vector\n\t     */\n\t    Vector.perp = function(vector, negate) {\n\t        negate = negate === true ? -1 : 1;\n\t        return { x: negate * -vector.y, y: negate * vector.x };\n\t    };\n\t\n\t    /**\n\t     * Negates both components of a vector such that it points in the opposite direction.\n\t     * @method neg\n\t     * @param {vector} vector\n\t     * @return {vector} The negated vector\n\t     */\n\t    Vector.neg = function(vector) {\n\t        return { x: -vector.x, y: -vector.y };\n\t    };\n\t\n\t    /**\n\t     * Returns the angle in radians between the two vectors relative to the x-axis.\n\t     * @method angle\n\t     * @param {vector} vectorA\n\t     * @param {vector} vectorB\n\t     * @return {number} The angle in radians\n\t     */\n\t    Vector.angle = function(vectorA, vectorB) {\n\t        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n\t    };\n\t\n\t    /**\n\t     * Temporary vector pool (not thread-safe).\n\t     * @property _temp\n\t     * @type {vector[]}\n\t     * @private\n\t     */\n\t    Vector._temp = [Vector.create(), Vector.create(), \n\t                    Vector.create(), Vector.create(), \n\t                    Vector.create(), Vector.create()];\n\t\n\t})();\n\t},{}],27:[function(require,module,exports){\n\t/**\n\t* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n\t* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n\t* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n\t*\n\t* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\t*\n\t* @class Vertices\n\t*/\n\t\n\tvar Vertices = {};\n\t\n\tmodule.exports = Vertices;\n\t\n\tvar Vector = require('../geometry/Vector');\n\tvar Common = require('../core/Common');\n\t\n\t(function() {\n\t\n\t    /**\n\t     * Creates a new set of `Matter.Body` compatible vertices.\n\t     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n\t     *\n\t     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n\t     *\n\t     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n\t     * but with some additional references required for efficient collision detection routines.\n\t     *\n\t     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n\t     *\n\t     * @method create\n\t     * @param {vector[]} points\n\t     * @param {body} body\n\t     */\n\t    Vertices.create = function(points, body) {\n\t        var vertices = [];\n\t\n\t        for (var i = 0; i < points.length; i++) {\n\t            var point = points[i],\n\t                vertex = {\n\t                    x: point.x,\n\t                    y: point.y,\n\t                    index: i,\n\t                    body: body,\n\t                    isInternal: false\n\t                };\n\t\n\t            vertices.push(vertex);\n\t        }\n\t\n\t        return vertices;\n\t    };\n\t\n\t    /**\n\t     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n\t     * into a `Matter.Vertices` object for the given `Matter.Body`.\n\t     * For parsing SVG paths, see `Svg.pathToVertices`.\n\t     * @method fromPath\n\t     * @param {string} path\n\t     * @param {body} body\n\t     * @return {vertices} vertices\n\t     */\n\t    Vertices.fromPath = function(path, body) {\n\t        var pathPattern = /L?\\s*([\\-\\d\\.e]+)[\\s,]*([\\-\\d\\.e]+)*/ig,\n\t            points = [];\n\t\n\t        path.replace(pathPattern, function(match, x, y) {\n\t            points.push({ x: parseFloat(x), y: parseFloat(y) });\n\t        });\n\t\n\t        return Vertices.create(points, body);\n\t    };\n\t\n\t    /**\n\t     * Returns the centre (centroid) of the set of vertices.\n\t     * @method centre\n\t     * @param {vertices} vertices\n\t     * @return {vector} The centre point\n\t     */\n\t    Vertices.centre = function(vertices) {\n\t        var area = Vertices.area(vertices, true),\n\t            centre = { x: 0, y: 0 },\n\t            cross,\n\t            temp,\n\t            j;\n\t\n\t        for (var i = 0; i < vertices.length; i++) {\n\t            j = (i + 1) % vertices.length;\n\t            cross = Vector.cross(vertices[i], vertices[j]);\n\t            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n\t            centre = Vector.add(centre, temp);\n\t        }\n\t\n\t        return Vector.div(centre, 6 * area);\n\t    };\n\t\n\t    /**\n\t     * Returns the average (mean) of the set of vertices.\n\t     * @method mean\n\t     * @param {vertices} vertices\n\t     * @return {vector} The average point\n\t     */\n\t    Vertices.mean = function(vertices) {\n\t        var average = { x: 0, y: 0 };\n\t\n\t        for (var i = 0; i < vertices.length; i++) {\n\t            average.x += vertices[i].x;\n\t            average.y += vertices[i].y;\n\t        }\n\t\n\t        return Vector.div(average, vertices.length);\n\t    };\n\t\n\t    /**\n\t     * Returns the area of the set of vertices.\n\t     * @method area\n\t     * @param {vertices} vertices\n\t     * @param {bool} signed\n\t     * @return {number} The area\n\t     */\n\t    Vertices.area = function(vertices, signed) {\n\t        var area = 0,\n\t            j = vertices.length - 1;\n\t\n\t        for (var i = 0; i < vertices.length; i++) {\n\t            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n\t            j = i;\n\t        }\n\t\n\t        if (signed)\n\t            return area / 2;\n\t\n\t        return Math.abs(area) / 2;\n\t    };\n\t\n\t    /**\n\t     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n\t     * @method inertia\n\t     * @param {vertices} vertices\n\t     * @param {number} mass\n\t     * @return {number} The polygon's moment of inertia\n\t     */\n\t    Vertices.inertia = function(vertices, mass) {\n\t        var numerator = 0,\n\t            denominator = 0,\n\t            v = vertices,\n\t            cross,\n\t            j;\n\t\n\t        // find the polygon's moment of inertia, using second moment of area\n\t        // http://www.physicsforums.com/showthread.php?t=25293\n\t        for (var n = 0; n < v.length; n++) {\n\t            j = (n + 1) % v.length;\n\t            cross = Math.abs(Vector.cross(v[j], v[n]));\n\t            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n\t            denominator += cross;\n\t        }\n\t\n\t        return (mass / 6) * (numerator / denominator);\n\t    };\n\t\n\t    /**\n\t     * Translates the set of vertices in-place.\n\t     * @method translate\n\t     * @param {vertices} vertices\n\t     * @param {vector} vector\n\t     * @param {number} scalar\n\t     */\n\t    Vertices.translate = function(vertices, vector, scalar) {\n\t        var i;\n\t        if (scalar) {\n\t            for (i = 0; i < vertices.length; i++) {\n\t                vertices[i].x += vector.x * scalar;\n\t                vertices[i].y += vector.y * scalar;\n\t            }\n\t        } else {\n\t            for (i = 0; i < vertices.length; i++) {\n\t                vertices[i].x += vector.x;\n\t                vertices[i].y += vector.y;\n\t            }\n\t        }\n\t\n\t        return vertices;\n\t    };\n\t\n\t    /**\n\t     * Rotates the set of vertices in-place.\n\t     * @method rotate\n\t     * @param {vertices} vertices\n\t     * @param {number} angle\n\t     * @param {vector} point\n\t     */\n\t    Vertices.rotate = function(vertices, angle, point) {\n\t        if (angle === 0)\n\t            return;\n\t\n\t        var cos = Math.cos(angle),\n\t            sin = Math.sin(angle);\n\t\n\t        for (var i = 0; i < vertices.length; i++) {\n\t            var vertice = vertices[i],\n\t                dx = vertice.x - point.x,\n\t                dy = vertice.y - point.y;\n\t                \n\t            vertice.x = point.x + (dx * cos - dy * sin);\n\t            vertice.y = point.y + (dx * sin + dy * cos);\n\t        }\n\t\n\t        return vertices;\n\t    };\n\t\n\t    /**\n\t     * Returns `true` if the `point` is inside the set of `vertices`.\n\t     * @method contains\n\t     * @param {vertices} vertices\n\t     * @param {vector} point\n\t     * @return {boolean} True if the vertices contains point, otherwise false\n\t     */\n\t    Vertices.contains = function(vertices, point) {\n\t        for (var i = 0; i < vertices.length; i++) {\n\t            var vertice = vertices[i],\n\t                nextVertice = vertices[(i + 1) % vertices.length];\n\t            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n\t                return false;\n\t            }\n\t        }\n\t\n\t        return true;\n\t    };\n\t\n\t    /**\n\t     * Scales the vertices from a point (default is centre) in-place.\n\t     * @method scale\n\t     * @param {vertices} vertices\n\t     * @param {number} scaleX\n\t     * @param {number} scaleY\n\t     * @param {vector} point\n\t     */\n\t    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n\t        if (scaleX === 1 && scaleY === 1)\n\t            return vertices;\n\t\n\t        point = point || Vertices.centre(vertices);\n\t\n\t        var vertex,\n\t            delta;\n\t\n\t        for (var i = 0; i < vertices.length; i++) {\n\t            vertex = vertices[i];\n\t            delta = Vector.sub(vertex, point);\n\t            vertices[i].x = point.x + delta.x * scaleX;\n\t            vertices[i].y = point.y + delta.y * scaleY;\n\t        }\n\t\n\t        return vertices;\n\t    };\n\t\n\t    /**\n\t     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n\t     * The radius parameter is a single number or an array to specify the radius for each vertex.\n\t     * @method chamfer\n\t     * @param {vertices} vertices\n\t     * @param {number[]} radius\n\t     * @param {number} quality\n\t     * @param {number} qualityMin\n\t     * @param {number} qualityMax\n\t     */\n\t    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n\t        radius = radius || [8];\n\t\n\t        if (!radius.length)\n\t            radius = [radius];\n\t\n\t        // quality defaults to -1, which is auto\n\t        quality = (typeof quality !== 'undefined') ? quality : -1;\n\t        qualityMin = qualityMin || 2;\n\t        qualityMax = qualityMax || 14;\n\t\n\t        var newVertices = [];\n\t\n\t        for (var i = 0; i < vertices.length; i++) {\n\t            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n\t                vertex = vertices[i],\n\t                nextVertex = vertices[(i + 1) % vertices.length],\n\t                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\t\n\t            if (currentRadius === 0) {\n\t                newVertices.push(vertex);\n\t                continue;\n\t            }\n\t\n\t            var prevNormal = Vector.normalise({ \n\t                x: vertex.y - prevVertex.y, \n\t                y: prevVertex.x - vertex.x\n\t            });\n\t\n\t            var nextNormal = Vector.normalise({ \n\t                x: nextVertex.y - vertex.y, \n\t                y: vertex.x - nextVertex.x\n\t            });\n\t\n\t            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n\t                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n\t                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n\t                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\t\n\t            var precision = quality;\n\t\n\t            if (quality === -1) {\n\t                // automatically decide precision\n\t                precision = Math.pow(currentRadius, 0.32) * 1.75;\n\t            }\n\t\n\t            precision = Common.clamp(precision, qualityMin, qualityMax);\n\t\n\t            // use an even value for precision, more likely to reduce axes by using symmetry\n\t            if (precision % 2 === 1)\n\t                precision += 1;\n\t\n\t            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n\t                theta = alpha / precision;\n\t\n\t            for (var j = 0; j < precision; j++) {\n\t                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n\t            }\n\t        }\n\t\n\t        return newVertices;\n\t    };\n\t\n\t    /**\n\t     * Sorts the input vertices into clockwise order in place.\n\t     * @method clockwiseSort\n\t     * @param {vertices} vertices\n\t     * @return {vertices} vertices\n\t     */\n\t    Vertices.clockwiseSort = function(vertices) {\n\t        var centre = Vertices.mean(vertices);\n\t\n\t        vertices.sort(function(vertexA, vertexB) {\n\t            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n\t        });\n\t\n\t        return vertices;\n\t    };\n\t\n\t    /**\n\t     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n\t     * @method isConvex\n\t     * @param {vertices} vertices\n\t     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n\t     */\n\t    Vertices.isConvex = function(vertices) {\n\t        // http://paulbourke.net/geometry/polygonmesh/\n\t\n\t        var flag = 0,\n\t            n = vertices.length,\n\t            i,\n\t            j,\n\t            k,\n\t            z;\n\t\n\t        if (n < 3)\n\t            return null;\n\t\n\t        for (i = 0; i < n; i++) {\n\t            j = (i + 1) % n;\n\t            k = (i + 2) % n;\n\t            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n\t            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\t\n\t            if (z < 0) {\n\t                flag |= 1;\n\t            } else if (z > 0) {\n\t                flag |= 2;\n\t            }\n\t\n\t            if (flag === 3) {\n\t                return false;\n\t            }\n\t        }\n\t\n\t        if (flag !== 0){\n\t            return true;\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Returns the convex hull of the input vertices as a new array of points.\n\t     * @method hull\n\t     * @param {vertices} vertices\n\t     * @return [vertex] vertices\n\t     */\n\t    Vertices.hull = function(vertices) {\n\t        // http://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain\n\t\n\t        var upper = [],\n\t            lower = [], \n\t            vertex,\n\t            i;\n\t\n\t        // sort vertices on x-axis (y-axis for ties)\n\t        vertices = vertices.slice(0);\n\t        vertices.sort(function(vertexA, vertexB) {\n\t            var dx = vertexA.x - vertexB.x;\n\t            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n\t        });\n\t\n\t        // build lower hull\n\t        for (i = 0; i < vertices.length; i++) {\n\t            vertex = vertices[i];\n\t\n\t            while (lower.length >= 2 \n\t                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n\t                lower.pop();\n\t            }\n\t\n\t            lower.push(vertex);\n\t        }\n\t\n\t        // build upper hull\n\t        for (i = vertices.length - 1; i >= 0; i--) {\n\t            vertex = vertices[i];\n\t\n\t            while (upper.length >= 2 \n\t                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n\t                upper.pop();\n\t            }\n\t\n\t            upper.push(vertex);\n\t        }\n\t\n\t        // concatenation of the lower and upper hulls gives the convex hull\n\t        // omit last points because they are repeated at the beginning of the other list\n\t        upper.pop();\n\t        lower.pop();\n\t\n\t        return upper.concat(lower);\n\t    };\n\t\n\t})();\n\t\n\t},{\"../core/Common\":14,\"../geometry/Vector\":26}],28:[function(require,module,exports){\n\tvar Matter = module.exports = {};\n\tMatter.version = 'master';\n\t\n\tMatter.Body = require('../body/Body');\n\tMatter.Composite = require('../body/Composite');\n\tMatter.World = require('../body/World');\n\t\n\tMatter.Contact = require('../collision/Contact');\n\tMatter.Detector = require('../collision/Detector');\n\tMatter.Grid = require('../collision/Grid');\n\tMatter.Pairs = require('../collision/Pairs');\n\tMatter.Pair = require('../collision/Pair');\n\tMatter.Query = require('../collision/Query');\n\tMatter.Resolver = require('../collision/Resolver');\n\tMatter.SAT = require('../collision/SAT');\n\t\n\tMatter.Constraint = require('../constraint/Constraint');\n\tMatter.MouseConstraint = require('../constraint/MouseConstraint');\n\t\n\tMatter.Common = require('../core/Common');\n\tMatter.Engine = require('../core/Engine');\n\tMatter.Events = require('../core/Events');\n\tMatter.Mouse = require('../core/Mouse');\n\tMatter.Runner = require('../core/Runner');\n\tMatter.Sleeping = require('../core/Sleeping');\n\t\n\t\n\tMatter.Bodies = require('../factory/Bodies');\n\tMatter.Composites = require('../factory/Composites');\n\t\n\tMatter.Axes = require('../geometry/Axes');\n\tMatter.Bounds = require('../geometry/Bounds');\n\tMatter.Svg = require('../geometry/Svg');\n\tMatter.Vector = require('../geometry/Vector');\n\tMatter.Vertices = require('../geometry/Vertices');\n\t\n\tMatter.Render = require('../render/Render');\n\tMatter.RenderPixi = require('../render/RenderPixi');\n\t\n\t// aliases\n\t\n\tMatter.World.add = Matter.Composite.add;\n\tMatter.World.remove = Matter.Composite.remove;\n\tMatter.World.addComposite = Matter.Composite.addComposite;\n\tMatter.World.addBody = Matter.Composite.addBody;\n\tMatter.World.addConstraint = Matter.Composite.addConstraint;\n\tMatter.World.clear = Matter.Composite.clear;\n\tMatter.Engine.run = Matter.Runner.run;\n\t\n\t},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Contact\":4,\"../collision/Detector\":5,\"../collision/Grid\":6,\"../collision/Pair\":7,\"../collision/Pairs\":8,\"../collision/Query\":9,\"../collision/Resolver\":10,\"../collision/SAT\":11,\"../constraint/Constraint\":12,\"../constraint/MouseConstraint\":13,\"../core/Common\":14,\"../core/Engine\":15,\"../core/Events\":16,\"../core/Metrics\":17,\"../core/Mouse\":18,\"../core/Runner\":19,\"../core/Sleeping\":20,\"../factory/Bodies\":21,\"../factory/Composites\":22,\"../geometry/Axes\":23,\"../geometry/Bounds\":24,\"../geometry/Svg\":25,\"../geometry/Vector\":26,\"../geometry/Vertices\":27,\"../render/Render\":29,\"../render/RenderPixi\":30}],29:[function(require,module,exports){\n\t/**\n\t* The `Matter.Render` module is a simple HTML5 canvas based renderer for visualising instances of `Matter.Engine`.\n\t* It is intended for development and debugging purposes, but may also be suitable for simple games.\n\t* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n\t*\n\t* @class Render\n\t*/\n\t\n\tvar Render = {};\n\t\n\tmodule.exports = Render;\n\t\n\tvar Common = require('../core/Common');\n\tvar Composite = require('../body/Composite');\n\tvar Bounds = require('../geometry/Bounds');\n\tvar Events = require('../core/Events');\n\tvar Grid = require('../collision/Grid');\n\tvar Vector = require('../geometry/Vector');\n\t\n\t(function() {\n\t    \n\t    var _requestAnimationFrame,\n\t        _cancelAnimationFrame;\n\t\n\t    if (typeof window !== 'undefined') {\n\t        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n\t                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame \n\t                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\t   \n\t        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n\t                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n\t    }\n\t\n\t    /**\n\t     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n\t     * All properties have default values, and many are pre-calculated automatically based on other properties.\n\t     * See the properties section below for detailed information on what you can pass via the `options` object.\n\t     * @method create\n\t     * @param {object} [options]\n\t     * @return {render} A new renderer\n\t     */\n\t    Render.create = function(options) {\n\t        var defaults = {\n\t            controller: Render,\n\t            engine: null,\n\t            element: null,\n\t            canvas: null,\n\t            mouse: null,\n\t            frameRequestId: null,\n\t            options: {\n\t                width: 800,\n\t                height: 600,\n\t                pixelRatio: 1,\n\t                background: '#fafafa',\n\t                wireframeBackground: '#222',\n\t                hasBounds: !!options.bounds,\n\t                enabled: true,\n\t                wireframes: true,\n\t                showSleeping: true,\n\t                showDebug: false,\n\t                showBroadphase: false,\n\t                showBounds: false,\n\t                showVelocity: false,\n\t                showCollisions: false,\n\t                showSeparations: false,\n\t                showAxes: false,\n\t                showPositions: false,\n\t                showAngleIndicator: false,\n\t                showIds: false,\n\t                showShadows: false,\n\t                showVertexNumbers: false,\n\t                showConvexHulls: false,\n\t                showInternalEdges: false,\n\t                showMousePosition: false\n\t            }\n\t        };\n\t\n\t        var render = Common.extend(defaults, options);\n\t\n\t        if (render.canvas) {\n\t            render.canvas.width = render.options.width || render.canvas.width;\n\t            render.canvas.height = render.options.height || render.canvas.height;\n\t        }\n\t\n\t        render.mouse = options.mouse;\n\t        render.engine = options.engine;\n\t        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n\t        render.context = render.canvas.getContext('2d');\n\t        render.textures = {};\n\t\n\t        render.bounds = render.bounds || { \n\t            min: { \n\t                x: 0,\n\t                y: 0\n\t            }, \n\t            max: { \n\t                x: render.canvas.width,\n\t                y: render.canvas.height\n\t            }\n\t        };\n\t\n\t        if (render.options.pixelRatio !== 1) {\n\t            Render.setPixelRatio(render, render.options.pixelRatio);\n\t        }\n\t\n\t        if (Common.isElement(render.element)) {\n\t            render.element.appendChild(render.canvas);\n\t        } else {\n\t            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n\t        }\n\t\n\t        return render;\n\t    };\n\t\n\t    /**\n\t     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n\t     * @method run\n\t     * @param {render} render\n\t     */\n\t    Render.run = function(render) {\n\t        (function loop(time){\n\t            render.frameRequestId = _requestAnimationFrame(loop);\n\t            Render.world(render);\n\t        })();\n\t    };\n\t\n\t    /**\n\t     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n\t     * @method stop\n\t     * @param {render} render\n\t     */\n\t    Render.stop = function(render) {\n\t        _cancelAnimationFrame(render.frameRequestId);\n\t    };\n\t\n\t    /**\n\t     * Sets the pixel ratio of the renderer and updates the canvas.\n\t     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n\t     * @method setPixelRatio\n\t     * @param {render} render\n\t     * @param {number} pixelRatio\n\t     */\n\t    Render.setPixelRatio = function(render, pixelRatio) {\n\t        var options = render.options,\n\t            canvas = render.canvas;\n\t\n\t        if (pixelRatio === 'auto') {\n\t            pixelRatio = _getPixelRatio(canvas);\n\t        }\n\t\n\t        options.pixelRatio = pixelRatio;\n\t        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n\t        canvas.width = options.width * pixelRatio;\n\t        canvas.height = options.height * pixelRatio;\n\t        canvas.style.width = options.width + 'px';\n\t        canvas.style.height = options.height + 'px';\n\t        render.context.scale(pixelRatio, pixelRatio);\n\t    };\n\t\n\t    /**\n\t     * Renders the given `engine`'s `Matter.World` object.\n\t     * This is the entry point for all rendering and should be called every time the scene changes.\n\t     * @method world\n\t     * @param {render} render\n\t     */\n\t    Render.world = function(render) {\n\t        var engine = render.engine,\n\t            world = engine.world,\n\t            canvas = render.canvas,\n\t            context = render.context,\n\t            options = render.options,\n\t            allBodies = Composite.allBodies(world),\n\t            allConstraints = Composite.allConstraints(world),\n\t            background = options.wireframes ? options.wireframeBackground : options.background,\n\t            bodies = [],\n\t            constraints = [],\n\t            i;\n\t\n\t        var event = {\n\t            timestamp: engine.timing.timestamp\n\t        };\n\t\n\t        Events.trigger(render, 'beforeRender', event);\n\t\n\t        // apply background if it has changed\n\t        if (render.currentBackground !== background)\n\t            _applyBackground(render, background);\n\t\n\t        // clear the canvas with a transparent fill, to allow the canvas background to show\n\t        context.globalCompositeOperation = 'source-in';\n\t        context.fillStyle = \"transparent\";\n\t        context.fillRect(0, 0, canvas.width, canvas.height);\n\t        context.globalCompositeOperation = 'source-over';\n\t\n\t        // handle bounds\n\t        if (options.hasBounds) {\n\t            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n\t                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n\t                boundsScaleX = boundsWidth / options.width,\n\t                boundsScaleY = boundsHeight / options.height;\n\t\n\t            // filter out bodies that are not in view\n\t            for (i = 0; i < allBodies.length; i++) {\n\t                var body = allBodies[i];\n\t                if (Bounds.overlaps(body.bounds, render.bounds))\n\t                    bodies.push(body);\n\t            }\n\t\n\t            // filter out constraints that are not in view\n\t            for (i = 0; i < allConstraints.length; i++) {\n\t                var constraint = allConstraints[i],\n\t                    bodyA = constraint.bodyA,\n\t                    bodyB = constraint.bodyB,\n\t                    pointAWorld = constraint.pointA,\n\t                    pointBWorld = constraint.pointB;\n\t\n\t                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n\t                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\t\n\t                if (!pointAWorld || !pointBWorld)\n\t                    continue;\n\t\n\t                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n\t                    constraints.push(constraint);\n\t            }\n\t\n\t            // transform the view\n\t            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n\t            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n\t        } else {\n\t            constraints = allConstraints;\n\t            bodies = allBodies;\n\t        }\n\t\n\t        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n\t            // fully featured rendering of bodies\n\t            Render.bodies(render, bodies, context);\n\t        } else {\n\t            if (options.showConvexHulls)\n\t                Render.bodyConvexHulls(render, bodies, context);\n\t\n\t            // optimised method for wireframes only\n\t            Render.bodyWireframes(render, bodies, context);\n\t        }\n\t\n\t        if (options.showBounds)\n\t            Render.bodyBounds(render, bodies, context);\n\t\n\t        if (options.showAxes || options.showAngleIndicator)\n\t            Render.bodyAxes(render, bodies, context);\n\t        \n\t        if (options.showPositions)\n\t            Render.bodyPositions(render, bodies, context);\n\t\n\t        if (options.showVelocity)\n\t            Render.bodyVelocity(render, bodies, context);\n\t\n\t        if (options.showIds)\n\t            Render.bodyIds(render, bodies, context);\n\t\n\t        if (options.showSeparations)\n\t            Render.separations(render, engine.pairs.list, context);\n\t\n\t        if (options.showCollisions)\n\t            Render.collisions(render, engine.pairs.list, context);\n\t\n\t        if (options.showVertexNumbers)\n\t            Render.vertexNumbers(render, bodies, context);\n\t\n\t        if (options.showMousePosition)\n\t            Render.mousePosition(render, render.mouse, context);\n\t\n\t        Render.constraints(constraints, context);\n\t\n\t        if (options.showBroadphase && engine.broadphase.controller === Grid)\n\t            Render.grid(render, engine.broadphase, context);\n\t\n\t        if (options.showDebug)\n\t            Render.debug(render, context);\n\t\n\t        if (options.hasBounds) {\n\t            // revert view transforms\n\t            context.setTransform(options.pixelRatio, 0, 0, options.pixelRatio, 0, 0);\n\t        }\n\t\n\t        Events.trigger(render, 'afterRender', event);\n\t    };\n\t\n\t    /**\n\t     * Description\n\t     * @private\n\t     * @method debug\n\t     * @param {render} render\n\t     * @param {RenderingContext} context\n\t     */\n\t    Render.debug = function(render, context) {\n\t        var c = context,\n\t            engine = render.engine,\n\t            world = engine.world,\n\t            metrics = engine.metrics,\n\t            options = render.options,\n\t            bodies = Composite.allBodies(world),\n\t            space = \"    \";\n\t\n\t        if (engine.timing.timestamp - (render.debugTimestamp || 0) >= 500) {\n\t            var text = \"\";\n\t\n\t            if (metrics.timing) {\n\t                text += \"fps: \" + Math.round(metrics.timing.fps) + space;\n\t            }\n\t\n\t\n\t            render.debugString = text;\n\t            render.debugTimestamp = engine.timing.timestamp;\n\t        }\n\t\n\t        if (render.debugString) {\n\t            c.font = \"12px Arial\";\n\t\n\t            if (options.wireframes) {\n\t                c.fillStyle = 'rgba(255,255,255,0.5)';\n\t            } else {\n\t                c.fillStyle = 'rgba(0,0,0,0.5)';\n\t            }\n\t\n\t            var split = render.debugString.split('\\n');\n\t\n\t            for (var i = 0; i < split.length; i++) {\n\t                c.fillText(split[i], 50, 50 + i * 18);\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Description\n\t     * @private\n\t     * @method constraints\n\t     * @param {constraint[]} constraints\n\t     * @param {RenderingContext} context\n\t     */\n\t    Render.constraints = function(constraints, context) {\n\t        var c = context;\n\t\n\t        for (var i = 0; i < constraints.length; i++) {\n\t            var constraint = constraints[i];\n\t\n\t            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n\t                continue;\n\t\n\t            var bodyA = constraint.bodyA,\n\t                bodyB = constraint.bodyB;\n\t\n\t            if (bodyA) {\n\t                c.beginPath();\n\t                c.moveTo(bodyA.position.x + constraint.pointA.x, bodyA.position.y + constraint.pointA.y);\n\t            } else {\n\t                c.beginPath();\n\t                c.moveTo(constraint.pointA.x, constraint.pointA.y);\n\t            }\n\t\n\t            if (bodyB) {\n\t                c.lineTo(bodyB.position.x + constraint.pointB.x, bodyB.position.y + constraint.pointB.y);\n\t            } else {\n\t                c.lineTo(constraint.pointB.x, constraint.pointB.y);\n\t            }\n\t\n\t            c.lineWidth = constraint.render.lineWidth;\n\t            c.strokeStyle = constraint.render.strokeStyle;\n\t            c.stroke();\n\t        }\n\t    };\n\t    \n\t    /**\n\t     * Description\n\t     * @private\n\t     * @method bodyShadows\n\t     * @param {render} render\n\t     * @param {body[]} bodies\n\t     * @param {RenderingContext} context\n\t     */\n\t    Render.bodyShadows = function(render, bodies, context) {\n\t        var c = context,\n\t            engine = render.engine;\n\t\n\t        for (var i = 0; i < bodies.length; i++) {\n\t            var body = bodies[i];\n\t\n\t            if (!body.render.visible)\n\t                continue;\n\t\n\t            if (body.circleRadius) {\n\t                c.beginPath();\n\t                c.arc(body.position.x, body.position.y, body.circleRadius, 0, 2 * Math.PI);\n\t                c.closePath();\n\t            } else {\n\t                c.beginPath();\n\t                c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\t                for (var j = 1; j < body.vertices.length; j++) {\n\t                    c.lineTo(body.vertices[j].x, body.vertices[j].y);\n\t                }\n\t                c.closePath();\n\t            }\n\t\n\t            var distanceX = body.position.x - render.options.width * 0.5,\n\t                distanceY = body.position.y - render.options.height * 0.2,\n\t                distance = Math.abs(distanceX) + Math.abs(distanceY);\n\t\n\t            c.shadowColor = 'rgba(0,0,0,0.15)';\n\t            c.shadowOffsetX = 0.05 * distanceX;\n\t            c.shadowOffsetY = 0.05 * distanceY;\n\t            c.shadowBlur = 1 + 12 * Math.min(1, distance / 1000);\n\t\n\t            c.fill();\n\t\n\t            c.shadowColor = null;\n\t            c.shadowOffsetX = null;\n\t            c.shadowOffsetY = null;\n\t            c.shadowBlur = null;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Description\n\t     * @private\n\t     * @method bodies\n\t     * @param {render} render\n\t     * @param {body[]} bodies\n\t     * @param {RenderingContext} context\n\t     */\n\t    Render.bodies = function(render, bodies, context) {\n\t        var c = context,\n\t            engine = render.engine,\n\t            options = render.options,\n\t            showInternalEdges = options.showInternalEdges || !options.wireframes,\n\t            body,\n\t            part,\n\t            i,\n\t            k;\n\t\n\t        for (i = 0; i < bodies.length; i++) {\n\t            body = bodies[i];\n\t\n\t            if (!body.render.visible)\n\t                continue;\n\t\n\t            // handle compound parts\n\t            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n\t                part = body.parts[k];\n\t\n\t                if (!part.render.visible)\n\t                    continue;\n\t\n\t                if (options.showSleeping && body.isSleeping) {\n\t                    c.globalAlpha = 0.5 * part.render.opacity;\n\t                } else if (part.render.opacity !== 1) {\n\t                    c.globalAlpha = part.render.opacity;\n\t                }\n\t\n\t                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n\t                    // part sprite\n\t                    var sprite = part.render.sprite,\n\t                        texture = _getTexture(render, sprite.texture);\n\t\n\t                    c.translate(part.position.x, part.position.y); \n\t                    c.rotate(part.angle);\n\t\n\t                    c.drawImage(\n\t                        texture,\n\t                        texture.width * -sprite.xOffset * sprite.xScale, \n\t                        texture.height * -sprite.yOffset * sprite.yScale, \n\t                        texture.width * sprite.xScale, \n\t                        texture.height * sprite.yScale\n\t                    );\n\t\n\t                    // revert translation, hopefully faster than save / restore\n\t                    c.rotate(-part.angle);\n\t                    c.translate(-part.position.x, -part.position.y); \n\t                } else {\n\t                    // part polygon\n\t                    if (part.circleRadius) {\n\t                        c.beginPath();\n\t                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n\t                    } else {\n\t                        c.beginPath();\n\t                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\t\n\t                        for (var j = 1; j < part.vertices.length; j++) {\n\t                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n\t                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n\t                            } else {\n\t                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n\t                            }\n\t\n\t                            if (part.vertices[j].isInternal && !showInternalEdges) {\n\t                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n\t                            }\n\t                        }\n\t                        \n\t                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n\t                        c.closePath();\n\t                    }\n\t\n\t                    if (!options.wireframes) {\n\t                        c.fillStyle = part.render.fillStyle;\n\t                        c.lineWidth = part.render.lineWidth;\n\t                        c.strokeStyle = part.render.strokeStyle;\n\t                        c.fill();\n\t                    } else {\n\t                        c.lineWidth = 1;\n\t                        c.strokeStyle = '#bbb';\n\t                    }\n\t\n\t                    c.stroke();\n\t                }\n\t\n\t                c.globalAlpha = 1;\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Optimised method for drawing body wireframes in one pass\n\t     * @private\n\t     * @method bodyWireframes\n\t     * @param {render} render\n\t     * @param {body[]} bodies\n\t     * @param {RenderingContext} context\n\t     */\n\t    Render.bodyWireframes = function(render, bodies, context) {\n\t        var c = context,\n\t            showInternalEdges = render.options.showInternalEdges,\n\t            body,\n\t            part,\n\t            i,\n\t            j,\n\t            k;\n\t\n\t        c.beginPath();\n\t\n\t        // render all bodies\n\t        for (i = 0; i < bodies.length; i++) {\n\t            body = bodies[i];\n\t\n\t            if (!body.render.visible)\n\t                continue;\n\t\n\t            // handle compound parts\n\t            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n\t                part = body.parts[k];\n\t\n\t                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\t\n\t                for (j = 1; j < part.vertices.length; j++) {\n\t                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n\t                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n\t                    } else {\n\t                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n\t                    }\n\t\n\t                    if (part.vertices[j].isInternal && !showInternalEdges) {\n\t                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n\t                    }\n\t                }\n\t                \n\t                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n\t            }\n\t        }\n\t\n\t        c.lineWidth = 1;\n\t        c.strokeStyle = '#bbb';\n\t        c.stroke();\n\t    };\n\t\n\t    /**\n\t     * Optimised method for drawing body convex hull wireframes in one pass\n\t     * @private\n\t     * @method bodyConvexHulls\n\t     * @param {render} render\n\t     * @param {body[]} bodies\n\t     * @param {RenderingContext} context\n\t     */\n\t    Render.bodyConvexHulls = function(render, bodies, context) {\n\t        var c = context,\n\t            body,\n\t            part,\n\t            i,\n\t            j,\n\t            k;\n\t\n\t        c.beginPath();\n\t\n\t        // render convex hulls\n\t        for (i = 0; i < bodies.length; i++) {\n\t            body = bodies[i];\n\t\n\t            if (!body.render.visible || body.parts.length === 1)\n\t                continue;\n\t\n\t            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\t\n\t            for (j = 1; j < body.vertices.length; j++) {\n\t                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n\t            }\n\t            \n\t            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n\t        }\n\t\n\t        c.lineWidth = 1;\n\t        c.strokeStyle = 'rgba(255,255,255,0.2)';\n\t        c.stroke();\n\t    };\n\t\n\t    /**\n\t     * Renders body vertex numbers.\n\t     * @private\n\t     * @method vertexNumbers\n\t     * @param {render} render\n\t     * @param {body[]} bodies\n\t     * @param {RenderingContext} context\n\t     */\n\t    Render.vertexNumbers = function(render, bodies, context) {\n\t        var c = context,\n\t            i,\n\t            j,\n\t            k;\n\t\n\t        for (i = 0; i < bodies.length; i++) {\n\t            var parts = bodies[i].parts;\n\t            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n\t                var part = parts[k];\n\t                for (j = 0; j < part.vertices.length; j++) {\n\t                    c.fillStyle = 'rgba(255,255,255,0.2)';\n\t                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n\t                }\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Renders mouse position.\n\t     * @private\n\t     * @method mousePosition\n\t     * @param {render} render\n\t     * @param {mouse} mouse\n\t     * @param {RenderingContext} context\n\t     */\n\t    Render.mousePosition = function(render, mouse, context) {\n\t        var c = context;\n\t        c.fillStyle = 'rgba(255,255,255,0.8)';\n\t        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n\t    };\n\t\n\t    /**\n\t     * Draws body bounds\n\t     * @private\n\t     * @method bodyBounds\n\t     * @param {render} render\n\t     * @param {body[]} bodies\n\t     * @param {RenderingContext} context\n\t     */\n\t    Render.bodyBounds = function(render, bodies, context) {\n\t        var c = context,\n\t            engine = render.engine,\n\t            options = render.options;\n\t\n\t        c.beginPath();\n\t\n\t        for (var i = 0; i < bodies.length; i++) {\n\t            var body = bodies[i];\n\t\n\t            if (body.render.visible) {\n\t                var parts = bodies[i].parts;\n\t                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n\t                    var part = parts[j];\n\t                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n\t                }\n\t            }\n\t        }\n\t\n\t        if (options.wireframes) {\n\t            c.strokeStyle = 'rgba(255,255,255,0.08)';\n\t        } else {\n\t            c.strokeStyle = 'rgba(0,0,0,0.1)';\n\t        }\n\t\n\t        c.lineWidth = 1;\n\t        c.stroke();\n\t    };\n\t\n\t    /**\n\t     * Draws body angle indicators and axes\n\t     * @private\n\t     * @method bodyAxes\n\t     * @param {render} render\n\t     * @param {body[]} bodies\n\t     * @param {RenderingContext} context\n\t     */\n\t    Render.bodyAxes = function(render, bodies, context) {\n\t        var c = context,\n\t            engine = render.engine,\n\t            options = render.options,\n\t            part,\n\t            i,\n\t            j,\n\t            k;\n\t\n\t        c.beginPath();\n\t\n\t        for (i = 0; i < bodies.length; i++) {\n\t            var body = bodies[i],\n\t                parts = body.parts;\n\t\n\t            if (!body.render.visible)\n\t                continue;\n\t\n\t            if (options.showAxes) {\n\t                // render all axes\n\t                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n\t                    part = parts[j];\n\t                    for (k = 0; k < part.axes.length; k++) {\n\t                        var axis = part.axes[k];\n\t                        c.moveTo(part.position.x, part.position.y);\n\t                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n\t                    }\n\t                }\n\t            } else {\n\t                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n\t                    part = parts[j];\n\t                    for (k = 0; k < part.axes.length; k++) {\n\t                        // render a single axis indicator\n\t                        c.moveTo(part.position.x, part.position.y);\n\t                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2, \n\t                                 (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t        if (options.wireframes) {\n\t            c.strokeStyle = 'indianred';\n\t        } else {\n\t            c.strokeStyle = 'rgba(0,0,0,0.8)';\n\t            c.globalCompositeOperation = 'overlay';\n\t        }\n\t\n\t        c.lineWidth = 1;\n\t        c.stroke();\n\t        c.globalCompositeOperation = 'source-over';\n\t    };\n\t\n\t    /**\n\t     * Draws body positions\n\t     * @private\n\t     * @method bodyPositions\n\t     * @param {render} render\n\t     * @param {body[]} bodies\n\t     * @param {RenderingContext} context\n\t     */\n\t    Render.bodyPositions = function(render, bodies, context) {\n\t        var c = context,\n\t            engine = render.engine,\n\t            options = render.options,\n\t            body,\n\t            part,\n\t            i,\n\t            k;\n\t\n\t        c.beginPath();\n\t\n\t        // render current positions\n\t        for (i = 0; i < bodies.length; i++) {\n\t            body = bodies[i];\n\t\n\t            if (!body.render.visible)\n\t                continue;\n\t\n\t            // handle compound parts\n\t            for (k = 0; k < body.parts.length; k++) {\n\t                part = body.parts[k];\n\t                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n\t                c.closePath();\n\t            }\n\t        }\n\t\n\t        if (options.wireframes) {\n\t            c.fillStyle = 'indianred';\n\t        } else {\n\t            c.fillStyle = 'rgba(0,0,0,0.5)';\n\t        }\n\t        c.fill();\n\t\n\t        c.beginPath();\n\t\n\t        // render previous positions\n\t        for (i = 0; i < bodies.length; i++) {\n\t            body = bodies[i];\n\t            if (body.render.visible) {\n\t                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n\t                c.closePath();\n\t            }\n\t        }\n\t\n\t        c.fillStyle = 'rgba(255,165,0,0.8)';\n\t        c.fill();\n\t    };\n\t\n\t    /**\n\t     * Draws body velocity\n\t     * @private\n\t     * @method bodyVelocity\n\t     * @param {render} render\n\t     * @param {body[]} bodies\n\t     * @param {RenderingContext} context\n\t     */\n\t    Render.bodyVelocity = function(render, bodies, context) {\n\t        var c = context;\n\t\n\t        c.beginPath();\n\t\n\t        for (var i = 0; i < bodies.length; i++) {\n\t            var body = bodies[i];\n\t\n\t            if (!body.render.visible)\n\t                continue;\n\t\n\t            c.moveTo(body.position.x, body.position.y);\n\t            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n\t        }\n\t\n\t        c.lineWidth = 3;\n\t        c.strokeStyle = 'cornflowerblue';\n\t        c.stroke();\n\t    };\n\t\n\t    /**\n\t     * Draws body ids\n\t     * @private\n\t     * @method bodyIds\n\t     * @param {render} render\n\t     * @param {body[]} bodies\n\t     * @param {RenderingContext} context\n\t     */\n\t    Render.bodyIds = function(render, bodies, context) {\n\t        var c = context,\n\t            i,\n\t            j;\n\t\n\t        for (i = 0; i < bodies.length; i++) {\n\t            if (!bodies[i].render.visible)\n\t                continue;\n\t\n\t            var parts = bodies[i].parts;\n\t            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n\t                var part = parts[j];\n\t                c.font = \"12px Arial\";\n\t                c.fillStyle = 'rgba(255,255,255,0.5)';\n\t                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Description\n\t     * @private\n\t     * @method collisions\n\t     * @param {render} render\n\t     * @param {pair[]} pairs\n\t     * @param {RenderingContext} context\n\t     */\n\t    Render.collisions = function(render, pairs, context) {\n\t        var c = context,\n\t            options = render.options,\n\t            pair,\n\t            collision,\n\t            corrected,\n\t            bodyA,\n\t            bodyB,\n\t            i,\n\t            j;\n\t\n\t        c.beginPath();\n\t\n\t        // render collision positions\n\t        for (i = 0; i < pairs.length; i++) {\n\t            pair = pairs[i];\n\t\n\t            if (!pair.isActive)\n\t                continue;\n\t\n\t            collision = pair.collision;\n\t            for (j = 0; j < pair.activeContacts.length; j++) {\n\t                var contact = pair.activeContacts[j],\n\t                    vertex = contact.vertex;\n\t                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n\t            }\n\t        }\n\t\n\t        if (options.wireframes) {\n\t            c.fillStyle = 'rgba(255,255,255,0.7)';\n\t        } else {\n\t            c.fillStyle = 'orange';\n\t        }\n\t        c.fill();\n\t\n\t        c.beginPath();\n\t            \n\t        // render collision normals\n\t        for (i = 0; i < pairs.length; i++) {\n\t            pair = pairs[i];\n\t\n\t            if (!pair.isActive)\n\t                continue;\n\t\n\t            collision = pair.collision;\n\t\n\t            if (pair.activeContacts.length > 0) {\n\t                var normalPosX = pair.activeContacts[0].vertex.x,\n\t                    normalPosY = pair.activeContacts[0].vertex.y;\n\t\n\t                if (pair.activeContacts.length === 2) {\n\t                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n\t                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n\t                }\n\t                \n\t                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n\t                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n\t                } else {\n\t                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n\t                }\n\t\n\t                c.lineTo(normalPosX, normalPosY);\n\t            }\n\t        }\n\t\n\t        if (options.wireframes) {\n\t            c.strokeStyle = 'rgba(255,165,0,0.7)';\n\t        } else {\n\t            c.strokeStyle = 'orange';\n\t        }\n\t\n\t        c.lineWidth = 1;\n\t        c.stroke();\n\t    };\n\t\n\t    /**\n\t     * Description\n\t     * @private\n\t     * @method separations\n\t     * @param {render} render\n\t     * @param {pair[]} pairs\n\t     * @param {RenderingContext} context\n\t     */\n\t    Render.separations = function(render, pairs, context) {\n\t        var c = context,\n\t            options = render.options,\n\t            pair,\n\t            collision,\n\t            corrected,\n\t            bodyA,\n\t            bodyB,\n\t            i,\n\t            j;\n\t\n\t        c.beginPath();\n\t\n\t        // render separations\n\t        for (i = 0; i < pairs.length; i++) {\n\t            pair = pairs[i];\n\t\n\t            if (!pair.isActive)\n\t                continue;\n\t\n\t            collision = pair.collision;\n\t            bodyA = collision.bodyA;\n\t            bodyB = collision.bodyB;\n\t\n\t            var k = 1;\n\t\n\t            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n\t            if (bodyB.isStatic) k = 0;\n\t\n\t            c.moveTo(bodyB.position.x, bodyB.position.y);\n\t            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\t\n\t            k = 1;\n\t\n\t            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n\t            if (bodyA.isStatic) k = 0;\n\t\n\t            c.moveTo(bodyA.position.x, bodyA.position.y);\n\t            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n\t        }\n\t\n\t        if (options.wireframes) {\n\t            c.strokeStyle = 'rgba(255,165,0,0.5)';\n\t        } else {\n\t            c.strokeStyle = 'orange';\n\t        }\n\t        c.stroke();\n\t    };\n\t\n\t    /**\n\t     * Description\n\t     * @private\n\t     * @method grid\n\t     * @param {render} render\n\t     * @param {grid} grid\n\t     * @param {RenderingContext} context\n\t     */\n\t    Render.grid = function(render, grid, context) {\n\t        var c = context,\n\t            options = render.options;\n\t\n\t        if (options.wireframes) {\n\t            c.strokeStyle = 'rgba(255,180,0,0.1)';\n\t        } else {\n\t            c.strokeStyle = 'rgba(255,180,0,0.5)';\n\t        }\n\t\n\t        c.beginPath();\n\t\n\t        var bucketKeys = Common.keys(grid.buckets);\n\t\n\t        for (var i = 0; i < bucketKeys.length; i++) {\n\t            var bucketId = bucketKeys[i];\n\t\n\t            if (grid.buckets[bucketId].length < 2)\n\t                continue;\n\t\n\t            var region = bucketId.split(',');\n\t            c.rect(0.5 + parseInt(region[0], 10) * grid.bucketWidth, \n\t                    0.5 + parseInt(region[1], 10) * grid.bucketHeight, \n\t                    grid.bucketWidth, \n\t                    grid.bucketHeight);\n\t        }\n\t\n\t        c.lineWidth = 1;\n\t        c.stroke();\n\t    };\n\t\n\t    /**\n\t     * Description\n\t     * @private\n\t     * @method inspector\n\t     * @param {inspector} inspector\n\t     * @param {RenderingContext} context\n\t     */\n\t    Render.inspector = function(inspector, context) {\n\t        var engine = inspector.engine,\n\t            selected = inspector.selected,\n\t            render = inspector.render,\n\t            options = render.options,\n\t            bounds;\n\t\n\t        if (options.hasBounds) {\n\t            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n\t                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n\t                boundsScaleX = boundsWidth / render.options.width,\n\t                boundsScaleY = boundsHeight / render.options.height;\n\t            \n\t            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n\t            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n\t        }\n\t\n\t        for (var i = 0; i < selected.length; i++) {\n\t            var item = selected[i].data;\n\t\n\t            context.translate(0.5, 0.5);\n\t            context.lineWidth = 1;\n\t            context.strokeStyle = 'rgba(255,165,0,0.9)';\n\t            context.setLineDash([1,2]);\n\t\n\t            switch (item.type) {\n\t\n\t            case 'body':\n\t\n\t                // render body selections\n\t                bounds = item.bounds;\n\t                context.beginPath();\n\t                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3), \n\t                             Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n\t                context.closePath();\n\t                context.stroke();\n\t\n\t                break;\n\t\n\t            case 'constraint':\n\t\n\t                // render constraint selections\n\t                var point = item.pointA;\n\t                if (item.bodyA)\n\t                    point = item.pointB;\n\t                context.beginPath();\n\t                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n\t                context.closePath();\n\t                context.stroke();\n\t\n\t                break;\n\t\n\t            }\n\t\n\t            context.setLineDash([]);\n\t            context.translate(-0.5, -0.5);\n\t        }\n\t\n\t        // render selection region\n\t        if (inspector.selectStart !== null) {\n\t            context.translate(0.5, 0.5);\n\t            context.lineWidth = 1;\n\t            context.strokeStyle = 'rgba(255,165,0,0.6)';\n\t            context.fillStyle = 'rgba(255,165,0,0.1)';\n\t            bounds = inspector.selectBounds;\n\t            context.beginPath();\n\t            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y), \n\t                         Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n\t            context.closePath();\n\t            context.stroke();\n\t            context.fill();\n\t            context.translate(-0.5, -0.5);\n\t        }\n\t\n\t        if (options.hasBounds)\n\t            context.setTransform(1, 0, 0, 1, 0, 0);\n\t    };\n\t\n\t    /**\n\t     * Description\n\t     * @method _createCanvas\n\t     * @private\n\t     * @param {} width\n\t     * @param {} height\n\t     * @return canvas\n\t     */\n\t    var _createCanvas = function(width, height) {\n\t        var canvas = document.createElement('canvas');\n\t        canvas.width = width;\n\t        canvas.height = height;\n\t        canvas.oncontextmenu = function() { return false; };\n\t        canvas.onselectstart = function() { return false; };\n\t        return canvas;\n\t    };\n\t\n\t    /**\n\t     * Gets the pixel ratio of the canvas.\n\t     * @method _getPixelRatio\n\t     * @private\n\t     * @param {HTMLElement} canvas\n\t     * @return {Number} pixel ratio\n\t     */\n\t    var _getPixelRatio = function(canvas) {\n\t        var context = canvas.getContext('2d'),\n\t            devicePixelRatio = window.devicePixelRatio || 1,\n\t            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n\t                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n\t                                      || context.backingStorePixelRatio || 1;\n\t\n\t        return devicePixelRatio / backingStorePixelRatio;\n\t    };\n\t\n\t    /**\n\t     * Gets the requested texture (an Image) via its path\n\t     * @method _getTexture\n\t     * @private\n\t     * @param {render} render\n\t     * @param {string} imagePath\n\t     * @return {Image} texture\n\t     */\n\t    var _getTexture = function(render, imagePath) {\n\t        var image = render.textures[imagePath];\n\t\n\t        if (image)\n\t            return image;\n\t\n\t        image = render.textures[imagePath] = new Image();\n\t        image.src = imagePath;\n\t\n\t        return image;\n\t    };\n\t\n\t    /**\n\t     * Applies the background to the canvas using CSS.\n\t     * @method applyBackground\n\t     * @private\n\t     * @param {render} render\n\t     * @param {string} background\n\t     */\n\t    var _applyBackground = function(render, background) {\n\t        var cssBackground = background;\n\t\n\t        if (/(jpg|gif|png)$/.test(background))\n\t            cssBackground = 'url(' + background + ')';\n\t\n\t        render.canvas.style.background = cssBackground;\n\t        render.canvas.style.backgroundSize = \"contain\";\n\t        render.currentBackground = background;\n\t    };\n\t\n\t    /*\n\t    *\n\t    *  Events Documentation\n\t    *\n\t    */\n\t\n\t    /**\n\t    * Fired before rendering\n\t    *\n\t    * @event beforeRender\n\t    * @param {} event An event object\n\t    * @param {number} event.timestamp The engine.timing.timestamp of the event\n\t    * @param {} event.source The source object of the event\n\t    * @param {} event.name The name of the event\n\t    */\n\t\n\t    /**\n\t    * Fired after rendering\n\t    *\n\t    * @event afterRender\n\t    * @param {} event An event object\n\t    * @param {number} event.timestamp The engine.timing.timestamp of the event\n\t    * @param {} event.source The source object of the event\n\t    * @param {} event.name The name of the event\n\t    */\n\t\n\t    /*\n\t    *\n\t    *  Properties Documentation\n\t    *\n\t    */\n\t\n\t    /**\n\t     * A back-reference to the `Matter.Render` module.\n\t     *\n\t     * @property controller\n\t     * @type render\n\t     */\n\t\n\t    /**\n\t     * A reference to the `Matter.Engine` instance to be used.\n\t     *\n\t     * @property engine\n\t     * @type engine\n\t     */\n\t\n\t    /**\n\t     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n\t     *\n\t     * @property element\n\t     * @type HTMLElement\n\t     * @default null\n\t     */\n\t\n\t    /**\n\t     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n\t     *\n\t     * @property canvas\n\t     * @type HTMLCanvasElement\n\t     * @default null\n\t     */\n\t\n\t    /**\n\t     * The configuration options of the renderer.\n\t     *\n\t     * @property options\n\t     * @type {}\n\t     */\n\t\n\t    /**\n\t     * The target width in pixels of the `render.canvas` to be created.\n\t     *\n\t     * @property options.width\n\t     * @type number\n\t     * @default 800\n\t     */\n\t\n\t    /**\n\t     * The target height in pixels of the `render.canvas` to be created.\n\t     *\n\t     * @property options.height\n\t     * @type number\n\t     * @default 600\n\t     */\n\t\n\t    /**\n\t     * A flag that specifies if `render.bounds` should be used when rendering.\n\t     *\n\t     * @property options.hasBounds\n\t     * @type boolean\n\t     * @default false\n\t     */\n\t\n\t    /**\n\t     * A `Bounds` object that specifies the drawing view region. \n\t     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n\t     * This allows for creating views that can pan or zoom around the scene.\n\t     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n\t     *\n\t     * @property bounds\n\t     * @type bounds\n\t     */\n\t\n\t    /**\n\t     * The 2d rendering context from the `render.canvas` element.\n\t     *\n\t     * @property context\n\t     * @type CanvasRenderingContext2D\n\t     */\n\t\n\t    /**\n\t     * The sprite texture cache.\n\t     *\n\t     * @property textures\n\t     * @type {}\n\t     */\n\t\n\t})();\n\t\n\t},{\"../body/Composite\":2,\"../collision/Grid\":6,\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":24,\"../geometry/Vector\":26}],30:[function(require,module,exports){\n\t/**\n\t* The `Matter.RenderPixi` module is an example renderer using pixi.js.\n\t* See also `Matter.Render` for a canvas based renderer.\n\t*\n\t* @class RenderPixi\n\t* @deprecated the Matter.RenderPixi module will soon be removed from the Matter.js core.\n\t* It will likely be moved to its own repository (but maintenance will be limited).\n\t*/\n\t\n\tvar RenderPixi = {};\n\t\n\tmodule.exports = RenderPixi;\n\t\n\tvar Composite = require('../body/Composite');\n\tvar Common = require('../core/Common');\n\t\n\t(function() {\n\t\n\t    var _requestAnimationFrame,\n\t        _cancelAnimationFrame;\n\t\n\t    if (typeof window !== 'undefined') {\n\t        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n\t                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame \n\t                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\t   \n\t        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n\t                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n\t    }\n\t    \n\t    /**\n\t     * Creates a new Pixi.js WebGL renderer\n\t     * @method create\n\t     * @param {object} options\n\t     * @return {RenderPixi} A new renderer\n\t     * @deprecated\n\t     */\n\t    RenderPixi.create = function(options) {\n\t        Common.log('RenderPixi.create: Matter.RenderPixi is deprecated (see docs)', 'warn');\n\t\n\t        var defaults = {\n\t            controller: RenderPixi,\n\t            engine: null,\n\t            element: null,\n\t            frameRequestId: null,\n\t            canvas: null,\n\t            renderer: null,\n\t            container: null,\n\t            spriteContainer: null,\n\t            pixiOptions: null,\n\t            options: {\n\t                width: 800,\n\t                height: 600,\n\t                background: '#fafafa',\n\t                wireframeBackground: '#222',\n\t                hasBounds: false,\n\t                enabled: true,\n\t                wireframes: true,\n\t                showSleeping: true,\n\t                showDebug: false,\n\t                showBroadphase: false,\n\t                showBounds: false,\n\t                showVelocity: false,\n\t                showCollisions: false,\n\t                showAxes: false,\n\t                showPositions: false,\n\t                showAngleIndicator: false,\n\t                showIds: false,\n\t                showShadows: false\n\t            }\n\t        };\n\t\n\t        var render = Common.extend(defaults, options),\n\t            transparent = !render.options.wireframes && render.options.background === 'transparent';\n\t\n\t        // init pixi\n\t        render.pixiOptions = render.pixiOptions || {\n\t            view: render.canvas,\n\t            transparent: transparent,\n\t            antialias: true,\n\t            backgroundColor: options.background\n\t        };\n\t\n\t        render.mouse = options.mouse;\n\t        render.engine = options.engine;\n\t        render.renderer = render.renderer || new PIXI.WebGLRenderer(render.options.width, render.options.height, render.pixiOptions);\n\t        render.container = render.container || new PIXI.Container();\n\t        render.spriteContainer = render.spriteContainer || new PIXI.Container();\n\t        render.canvas = render.canvas || render.renderer.view;\n\t        render.bounds = render.bounds || { \n\t            min: {\n\t                x: 0,\n\t                y: 0\n\t            }, \n\t            max: { \n\t                x: render.options.width,\n\t                y: render.options.height\n\t            }\n\t        };\n\t\n\t        // caches\n\t        render.textures = {};\n\t        render.sprites = {};\n\t        render.primitives = {};\n\t\n\t        // use a sprite batch for performance\n\t        render.container.addChild(render.spriteContainer);\n\t\n\t        // insert canvas\n\t        if (Common.isElement(render.element)) {\n\t            render.element.appendChild(render.canvas);\n\t        } else {\n\t            Common.log('No \"render.element\" passed, \"render.canvas\" was not inserted into document.', 'warn');\n\t        }\n\t\n\t        // prevent menus on canvas\n\t        render.canvas.oncontextmenu = function() { return false; };\n\t        render.canvas.onselectstart = function() { return false; };\n\t\n\t        return render;\n\t    };\n\t\n\t    /**\n\t     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n\t     * @method run\n\t     * @param {render} render\n\t     * @deprecated\n\t     */\n\t    RenderPixi.run = function(render) {\n\t        (function loop(time){\n\t            render.frameRequestId = _requestAnimationFrame(loop);\n\t            RenderPixi.world(render);\n\t        })();\n\t    };\n\t\n\t    /**\n\t     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n\t     * @method stop\n\t     * @param {render} render\n\t     * @deprecated\n\t     */\n\t    RenderPixi.stop = function(render) {\n\t        _cancelAnimationFrame(render.frameRequestId);\n\t    };\n\t\n\t    /**\n\t     * Clears the scene graph\n\t     * @method clear\n\t     * @param {RenderPixi} render\n\t     * @deprecated\n\t     */\n\t    RenderPixi.clear = function(render) {\n\t        var container = render.container,\n\t            spriteContainer = render.spriteContainer;\n\t\n\t        // clear stage container\n\t        while (container.children[0]) { \n\t            container.removeChild(container.children[0]); \n\t        }\n\t\n\t        // clear sprite batch\n\t        while (spriteContainer.children[0]) { \n\t            spriteContainer.removeChild(spriteContainer.children[0]); \n\t        }\n\t\n\t        var bgSprite = render.sprites['bg-0'];\n\t\n\t        // clear caches\n\t        render.textures = {};\n\t        render.sprites = {};\n\t        render.primitives = {};\n\t\n\t        // set background sprite\n\t        render.sprites['bg-0'] = bgSprite;\n\t        if (bgSprite)\n\t            container.addChildAt(bgSprite, 0);\n\t\n\t        // add sprite batch back into container\n\t        render.container.addChild(render.spriteContainer);\n\t\n\t        // reset background state\n\t        render.currentBackground = null;\n\t\n\t        // reset bounds transforms\n\t        container.scale.set(1, 1);\n\t        container.position.set(0, 0);\n\t    };\n\t\n\t    /**\n\t     * Sets the background of the canvas \n\t     * @method setBackground\n\t     * @param {RenderPixi} render\n\t     * @param {string} background\n\t     * @deprecated\n\t     */\n\t    RenderPixi.setBackground = function(render, background) {\n\t        if (render.currentBackground !== background) {\n\t            var isColor = background.indexOf && background.indexOf('#') !== -1,\n\t                bgSprite = render.sprites['bg-0'];\n\t\n\t            if (isColor) {\n\t                // if solid background color\n\t                var color = Common.colorToNumber(background);\n\t                render.renderer.backgroundColor = color;\n\t\n\t                // remove background sprite if existing\n\t                if (bgSprite)\n\t                    render.container.removeChild(bgSprite); \n\t            } else {\n\t                // initialise background sprite if needed\n\t                if (!bgSprite) {\n\t                    var texture = _getTexture(render, background);\n\t\n\t                    bgSprite = render.sprites['bg-0'] = new PIXI.Sprite(texture);\n\t                    bgSprite.position.x = 0;\n\t                    bgSprite.position.y = 0;\n\t                    render.container.addChildAt(bgSprite, 0);\n\t                }\n\t            }\n\t\n\t            render.currentBackground = background;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Description\n\t     * @method world\n\t     * @param {engine} engine\n\t     * @deprecated\n\t     */\n\t    RenderPixi.world = function(render) {\n\t        var engine = render.engine,\n\t            world = engine.world,\n\t            renderer = render.renderer,\n\t            container = render.container,\n\t            options = render.options,\n\t            bodies = Composite.allBodies(world),\n\t            allConstraints = Composite.allConstraints(world),\n\t            constraints = [],\n\t            i;\n\t\n\t        if (options.wireframes) {\n\t            RenderPixi.setBackground(render, options.wireframeBackground);\n\t        } else {\n\t            RenderPixi.setBackground(render, options.background);\n\t        }\n\t\n\t        // handle bounds\n\t        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n\t            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n\t            boundsScaleX = boundsWidth / render.options.width,\n\t            boundsScaleY = boundsHeight / render.options.height;\n\t\n\t        if (options.hasBounds) {\n\t            // Hide bodies that are not in view\n\t            for (i = 0; i < bodies.length; i++) {\n\t                var body = bodies[i];\n\t                body.render.sprite.visible = Bounds.overlaps(body.bounds, render.bounds);\n\t            }\n\t\n\t            // filter out constraints that are not in view\n\t            for (i = 0; i < allConstraints.length; i++) {\n\t                var constraint = allConstraints[i],\n\t                    bodyA = constraint.bodyA,\n\t                    bodyB = constraint.bodyB,\n\t                    pointAWorld = constraint.pointA,\n\t                    pointBWorld = constraint.pointB;\n\t\n\t                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n\t                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\t\n\t                if (!pointAWorld || !pointBWorld)\n\t                    continue;\n\t\n\t                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n\t                    constraints.push(constraint);\n\t            }\n\t\n\t            // transform the view\n\t            container.scale.set(1 / boundsScaleX, 1 / boundsScaleY);\n\t            container.position.set(-render.bounds.min.x * (1 / boundsScaleX), -render.bounds.min.y * (1 / boundsScaleY));\n\t        } else {\n\t            constraints = allConstraints;\n\t        }\n\t\n\t        for (i = 0; i < bodies.length; i++)\n\t            RenderPixi.body(render, bodies[i]);\n\t\n\t        for (i = 0; i < constraints.length; i++)\n\t            RenderPixi.constraint(render, constraints[i]);\n\t\n\t        renderer.render(container);\n\t    };\n\t\n\t\n\t    /**\n\t     * Description\n\t     * @method constraint\n\t     * @param {engine} engine\n\t     * @param {constraint} constraint\n\t     * @deprecated\n\t     */\n\t    RenderPixi.constraint = function(render, constraint) {\n\t        var engine = render.engine,\n\t            bodyA = constraint.bodyA,\n\t            bodyB = constraint.bodyB,\n\t            pointA = constraint.pointA,\n\t            pointB = constraint.pointB,\n\t            container = render.container,\n\t            constraintRender = constraint.render,\n\t            primitiveId = 'c-' + constraint.id,\n\t            primitive = render.primitives[primitiveId];\n\t\n\t        // initialise constraint primitive if not existing\n\t        if (!primitive)\n\t            primitive = render.primitives[primitiveId] = new PIXI.Graphics();\n\t\n\t        // don't render if constraint does not have two end points\n\t        if (!constraintRender.visible || !constraint.pointA || !constraint.pointB) {\n\t            primitive.clear();\n\t            return;\n\t        }\n\t\n\t        // add to scene graph if not already there\n\t        if (Common.indexOf(container.children, primitive) === -1)\n\t            container.addChild(primitive);\n\t\n\t        // render the constraint on every update, since they can change dynamically\n\t        primitive.clear();\n\t        primitive.beginFill(0, 0);\n\t        primitive.lineStyle(constraintRender.lineWidth, Common.colorToNumber(constraintRender.strokeStyle), 1);\n\t        \n\t        if (bodyA) {\n\t            primitive.moveTo(bodyA.position.x + pointA.x, bodyA.position.y + pointA.y);\n\t        } else {\n\t            primitive.moveTo(pointA.x, pointA.y);\n\t        }\n\t\n\t        if (bodyB) {\n\t            primitive.lineTo(bodyB.position.x + pointB.x, bodyB.position.y + pointB.y);\n\t        } else {\n\t            primitive.lineTo(pointB.x, pointB.y);\n\t        }\n\t\n\t        primitive.endFill();\n\t    };\n\t    \n\t    /**\n\t     * Description\n\t     * @method body\n\t     * @param {engine} engine\n\t     * @param {body} body\n\t     * @deprecated\n\t     */\n\t    RenderPixi.body = function(render, body) {\n\t        var engine = render.engine,\n\t            bodyRender = body.render;\n\t\n\t        if (!bodyRender.visible)\n\t            return;\n\t\n\t        if (bodyRender.sprite && bodyRender.sprite.texture) {\n\t            var spriteId = 'b-' + body.id,\n\t                sprite = render.sprites[spriteId],\n\t                spriteContainer = render.spriteContainer;\n\t\n\t            // initialise body sprite if not existing\n\t            if (!sprite)\n\t                sprite = render.sprites[spriteId] = _createBodySprite(render, body);\n\t\n\t            // add to scene graph if not already there\n\t            if (Common.indexOf(spriteContainer.children, sprite) === -1)\n\t                spriteContainer.addChild(sprite);\n\t\n\t            // update body sprite\n\t            sprite.position.x = body.position.x;\n\t            sprite.position.y = body.position.y;\n\t            sprite.rotation = body.angle;\n\t            sprite.scale.x = bodyRender.sprite.xScale || 1;\n\t            sprite.scale.y = bodyRender.sprite.yScale || 1;\n\t        } else {\n\t            var primitiveId = 'b-' + body.id,\n\t                primitive = render.primitives[primitiveId],\n\t                container = render.container;\n\t\n\t            // initialise body primitive if not existing\n\t            if (!primitive) {\n\t                primitive = render.primitives[primitiveId] = _createBodyPrimitive(render, body);\n\t                primitive.initialAngle = body.angle;\n\t            }\n\t\n\t            // add to scene graph if not already there\n\t            if (Common.indexOf(container.children, primitive) === -1)\n\t                container.addChild(primitive);\n\t\n\t            // update body primitive\n\t            primitive.position.x = body.position.x;\n\t            primitive.position.y = body.position.y;\n\t            primitive.rotation = body.angle - primitive.initialAngle;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Creates a body sprite\n\t     * @method _createBodySprite\n\t     * @private\n\t     * @param {RenderPixi} render\n\t     * @param {body} body\n\t     * @return {PIXI.Sprite} sprite\n\t     * @deprecated\n\t     */\n\t    var _createBodySprite = function(render, body) {\n\t        var bodyRender = body.render,\n\t            texturePath = bodyRender.sprite.texture,\n\t            texture = _getTexture(render, texturePath),\n\t            sprite = new PIXI.Sprite(texture);\n\t\n\t        sprite.anchor.x = body.render.sprite.xOffset;\n\t        sprite.anchor.y = body.render.sprite.yOffset;\n\t\n\t        return sprite;\n\t    };\n\t\n\t    /**\n\t     * Creates a body primitive\n\t     * @method _createBodyPrimitive\n\t     * @private\n\t     * @param {RenderPixi} render\n\t     * @param {body} body\n\t     * @return {PIXI.Graphics} graphics\n\t     * @deprecated\n\t     */\n\t    var _createBodyPrimitive = function(render, body) {\n\t        var bodyRender = body.render,\n\t            options = render.options,\n\t            primitive = new PIXI.Graphics(),\n\t            fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n\t            strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n\t            strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n\t            strokeStyleWireframe = Common.colorToNumber('#bbb'),\n\t            strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n\t            part;\n\t\n\t        primitive.clear();\n\t\n\t        // handle compound parts\n\t        for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n\t            part = body.parts[k];\n\t\n\t            if (!options.wireframes) {\n\t                primitive.beginFill(fillStyle, 1);\n\t                primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n\t            } else {\n\t                primitive.beginFill(0, 0);\n\t                primitive.lineStyle(1, strokeStyleWireframe, 1);\n\t            }\n\t\n\t            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\t\n\t            for (var j = 1; j < part.vertices.length; j++) {\n\t                primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n\t            }\n\t\n\t            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\t\n\t            primitive.endFill();\n\t\n\t            // angle indicator\n\t            if (options.showAngleIndicator || options.showAxes) {\n\t                primitive.beginFill(0, 0);\n\t\n\t                if (options.wireframes) {\n\t                    primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n\t                } else {\n\t                    primitive.lineStyle(1, strokeStyleIndicator);\n\t                }\n\t\n\t                primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n\t                primitive.lineTo(((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2 - body.position.x), \n\t                                 ((part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2 - body.position.y));\n\t\n\t                primitive.endFill();\n\t            }\n\t        }\n\t\n\t        return primitive;\n\t    };\n\t\n\t    /**\n\t     * Gets the requested texture (a PIXI.Texture) via its path\n\t     * @method _getTexture\n\t     * @private\n\t     * @param {RenderPixi} render\n\t     * @param {string} imagePath\n\t     * @return {PIXI.Texture} texture\n\t     * @deprecated\n\t     */\n\t    var _getTexture = function(render, imagePath) {\n\t        var texture = render.textures[imagePath];\n\t\n\t        if (!texture)\n\t            texture = render.textures[imagePath] = PIXI.Texture.fromImage(imagePath);\n\t\n\t        return texture;\n\t    };\n\t\n\t})();\n\t\n\t},{\"../body/Composite\":2,\"../core/Common\":14}]},{},[28])(28)\n\t});\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n\t * jQuery v2.1.3 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license\n\t */\n\t!function(a,b){\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error(\"jQuery requires a window with a document\");return b(a)}:b(a)}(\"undefined\"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l=a.document,m=\"2.1.3\",n=function(a,b){return new n.fn.init(a,b)},o=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,p=/^-ms-/,q=/-([\\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:\"\",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return n.each(this,a,b)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for(\"boolean\"==typeof g&&(j=g,g=arguments[h]||{},h++),\"object\"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:\"jQuery\"+(m+Math.random()).replace(/\\D/g,\"\"),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return\"function\"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){return!n.isArray(a)&&a-parseFloat(a)+1>=0},isPlainObject:function(a){return\"object\"!==n.type(a)||a.nodeType||n.isWindow(a)?!1:a.constructor&&!j.call(a.constructor.prototype,\"isPrototypeOf\")?!1:!0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+\"\":\"object\"==typeof a||\"function\"==typeof a?h[i.call(a)]||\"object\":typeof a},globalEval:function(a){var b,c=eval;a=n.trim(a),a&&(1===a.indexOf(\"use strict\")?(b=l.createElement(\"script\"),b.text=a,l.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,\"ms-\").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=s(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?\"\":(a+\"\").replace(o,\"\")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,\"string\"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:g.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=s(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return\"string\"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(e=d.call(arguments,2),f=function(){return a.apply(b||this,e.concat(d.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:k}),n.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"),function(a,b){h[\"[object \"+b+\"]\"]=b.toLowerCase()});function s(a){var b=a.length,c=n.type(a);return\"function\"===c||n.isWindow(a)?!1:1===a.nodeType&&b?!0:\"array\"===c||0===b||\"number\"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u=\"sizzle\"+1*new Date,v=a.document,w=0,x=0,y=hb(),z=hb(),A=hb(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K=\"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",L=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",M=\"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",N=M.replace(\"w\",\"w#\"),O=\"\\\\[\"+L+\"*(\"+M+\")(?:\"+L+\"*([*^$|!~]?=)\"+L+\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\"+N+\"))|)\"+L+\"*\\\\]\",P=\":(\"+M+\")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\"+O+\")*)|.*)\\\\)|)\",Q=new RegExp(L+\"+\",\"g\"),R=new RegExp(\"^\"+L+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+L+\"+$\",\"g\"),S=new RegExp(\"^\"+L+\"*,\"+L+\"*\"),T=new RegExp(\"^\"+L+\"*([>+~]|\"+L+\")\"+L+\"*\"),U=new RegExp(\"=\"+L+\"*([^\\\\]'\\\"]*?)\"+L+\"*\\\\]\",\"g\"),V=new RegExp(P),W=new RegExp(\"^\"+N+\"$\"),X={ID:new RegExp(\"^#(\"+M+\")\"),CLASS:new RegExp(\"^\\\\.(\"+M+\")\"),TAG:new RegExp(\"^(\"+M.replace(\"w\",\"w*\")+\")\"),ATTR:new RegExp(\"^\"+O),PSEUDO:new RegExp(\"^\"+P),CHILD:new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\"+L+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+L+\"*(?:([+-]|)\"+L+\"*(\\\\d+)|))\"+L+\"*\\\\)|)\",\"i\"),bool:new RegExp(\"^(?:\"+K+\")$\",\"i\"),needsContext:new RegExp(\"^\"+L+\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+L+\"*((?:-\\\\d)?\\\\d*)\"+L+\"*\\\\)|)(?=[^-]|$)\",\"i\")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\\d$/i,$=/^[^{]+\\{\\s*\\[native \\w/,_=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,ab=/[+~]/,bb=/'|\\\\/g,cb=new RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\"+L+\"?|(\"+L+\")|.)\",\"ig\"),db=function(a,b,c){var d=\"0x\"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},eb=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(fb){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function gb(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],k=b.nodeType,\"string\"!=typeof a||!a||1!==k&&9!==k&&11!==k)return d;if(!e&&p){if(11!==k&&(f=_.exec(a)))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return H.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName)return H.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=1!==k&&a,1===k&&\"object\"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute(\"id\"))?s=r.replace(bb,\"\\\\$&\"):b.setAttribute(\"id\",s),s=\"[id='\"+s+\"'] \",l=o.length;while(l--)o[l]=s+rb(o[l]);w=ab.test(a)&&pb(b.parentNode)||b,x=o.join(\",\")}if(x)try{return H.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute(\"id\")}}}return i(a.replace(R,\"$1\"),b,d,e)}function hb(){var a=[];function b(c,e){return a.push(c+\" \")>d.cacheLength&&delete b[a.shift()],b[c+\" \"]=e}return b}function ib(a){return a[u]=!0,a}function jb(a){var b=n.createElement(\"div\");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function kb(a,b){var c=a.split(\"|\"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function lb(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function mb(a){return function(b){var c=b.nodeName.toLowerCase();return\"input\"===c&&b.type===a}}function nb(a){return function(b){var c=b.nodeName.toLowerCase();return(\"input\"===c||\"button\"===c)&&b.type===a}}function ob(a){return ib(function(b){return b=+b,ib(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function pb(a){return a&&\"undefined\"!=typeof a.getElementsByTagName&&a}c=gb.support={},f=gb.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?\"HTML\"!==b.nodeName:!1},m=gb.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=g.documentElement,e=g.defaultView,e&&e!==e.top&&(e.addEventListener?e.addEventListener(\"unload\",eb,!1):e.attachEvent&&e.attachEvent(\"onunload\",eb)),p=!f(g),c.attributes=jb(function(a){return a.className=\"i\",!a.getAttribute(\"className\")}),c.getElementsByTagName=jb(function(a){return a.appendChild(g.createComment(\"\")),!a.getElementsByTagName(\"*\").length}),c.getElementsByClassName=$.test(g.getElementsByClassName),c.getById=jb(function(a){return o.appendChild(a).id=u,!g.getElementsByName||!g.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if(\"undefined\"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(cb,db);return function(a){return a.getAttribute(\"id\")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(cb,db);return function(a){var c=\"undefined\"!=typeof a.getAttributeNode&&a.getAttributeNode(\"id\");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return\"undefined\"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if(\"*\"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(g.querySelectorAll))&&(jb(function(a){o.appendChild(a).innerHTML=\"<a id='\"+u+\"'></a><select id='\"+u+\"-\\f]' msallowcapture=''><option selected=''></option></select>\",a.querySelectorAll(\"[msallowcapture^='']\").length&&q.push(\"[*^$]=\"+L+\"*(?:''|\\\"\\\")\"),a.querySelectorAll(\"[selected]\").length||q.push(\"\\\\[\"+L+\"*(?:value|\"+K+\")\"),a.querySelectorAll(\"[id~=\"+u+\"-]\").length||q.push(\"~=\"),a.querySelectorAll(\":checked\").length||q.push(\":checked\"),a.querySelectorAll(\"a#\"+u+\"+*\").length||q.push(\".#.+[+~]\")}),jb(function(a){var b=g.createElement(\"input\");b.setAttribute(\"type\",\"hidden\"),a.appendChild(b).setAttribute(\"name\",\"D\"),a.querySelectorAll(\"[name=d]\").length&&q.push(\"name\"+L+\"*[*^$|!~]?=\"),a.querySelectorAll(\":enabled\").length||q.push(\":enabled\",\":disabled\"),a.querySelectorAll(\"*,:x\"),q.push(\",.*:\")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&jb(function(a){c.disconnectedMatch=s.call(a,\"div\"),s.call(a,\"[s!='']:x\"),r.push(\"!=\",P)}),q=q.length&&new RegExp(q.join(\"|\")),r=r.length&&new RegExp(r.join(\"|\")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===g||a.ownerDocument===v&&t(v,a)?-1:b===g||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,h=[a],i=[b];if(!e||!f)return a===g?-1:b===g?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return lb(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?lb(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},g):n},gb.matches=function(a,b){return gb(a,null,null,b)},gb.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,\"='$1']\"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return gb(b,n,null,[a]).length>0},gb.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},gb.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},gb.error=function(a){throw new Error(\"Syntax error, unrecognized expression: \"+a)},gb.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=gb.getText=function(a){var b,c=\"\",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if(\"string\"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=gb.selectors={cacheLength:50,createPseudo:ib,match:X,attrHandle:{},find:{},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(cb,db),a[3]=(a[3]||a[4]||a[5]||\"\").replace(cb,db),\"~=\"===a[2]&&(a[3]=\" \"+a[3]+\" \"),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),\"nth\"===a[1].slice(0,3)?(a[3]||gb.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*(\"even\"===a[3]||\"odd\"===a[3])),a[5]=+(a[7]+a[8]||\"odd\"===a[3])):a[3]&&gb.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||\"\":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(\")\",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(cb,db).toLowerCase();return\"*\"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+\" \"];return b||(b=new RegExp(\"(^|\"+L+\")\"+a+\"(\"+L+\"|$)\"))&&y(a,function(a){return b.test(\"string\"==typeof a.className&&a.className||\"undefined\"!=typeof a.getAttribute&&a.getAttribute(\"class\")||\"\")})},ATTR:function(a,b,c){return function(d){var e=gb.attr(d,a);return null==e?\"!=\"===b:b?(e+=\"\",\"=\"===b?e===c:\"!=\"===b?e!==c:\"^=\"===b?c&&0===e.indexOf(c):\"*=\"===b?c&&e.indexOf(c)>-1:\"$=\"===b?c&&e.slice(-c.length)===c:\"~=\"===b?(\" \"+e.replace(Q,\" \")+\" \").indexOf(c)>-1:\"|=\"===b?e===c||e.slice(0,c.length+1)===c+\"-\":!1):!0}},CHILD:function(a,b,c,d,e){var f=\"nth\"!==a.slice(0,3),g=\"last\"!==a.slice(-4),h=\"of-type\"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?\"nextSibling\":\"previousSibling\",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p=\"only\"===a&&!o&&\"nextSibling\"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||gb.error(\"unsupported pseudo: \"+a);return e[u]?e(b):e.length>1?(c=[a,a,\"\",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ib(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ib(function(a){var b=[],c=[],d=h(a.replace(R,\"$1\"));return d[u]?ib(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ib(function(a){return function(b){return gb(a,b).length>0}}),contains:ib(function(a){return a=a.replace(cb,db),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ib(function(a){return W.test(a||\"\")||gb.error(\"unsupported lang: \"+a),a=a.replace(cb,db).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute(\"xml:lang\")||b.getAttribute(\"lang\"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+\"-\");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return\"input\"===b&&!!a.checked||\"option\"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return\"input\"===b&&\"button\"===a.type||\"button\"===b},text:function(a){var b;return\"input\"===a.nodeName.toLowerCase()&&\"text\"===a.type&&(null==(b=a.getAttribute(\"type\"))||\"text\"===b.toLowerCase())},first:ob(function(){return[0]}),last:ob(function(a,b){return[b-1]}),eq:ob(function(a,b,c){return[0>c?c+b:c]}),even:ob(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:ob(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:ob(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:ob(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=mb(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=nb(b);function qb(){}qb.prototype=d.filters=d.pseudos,d.setFilters=new qb,g=gb.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+\" \"];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R,\" \")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?gb.error(a):z(a,i).slice(0)};function rb(a){for(var b=0,c=a.length,d=\"\";c>b;b++)d+=a[b].value;return d}function sb(a,b,c){var d=b.dir,e=c&&\"parentNode\"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function tb(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ub(a,b,c){for(var d=0,e=b.length;e>d;d++)gb(a,b[d],c);return c}function vb(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function wb(a,b,c,d,e,f){return d&&!d[u]&&(d=wb(d)),e&&!e[u]&&(e=wb(e,f)),ib(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ub(b||\"*\",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:vb(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=vb(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=vb(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function xb(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[\" \"],i=g?1:0,k=sb(function(a){return a===b},h,!0),l=sb(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[sb(tb(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return wb(i>1&&tb(m),i>1&&rb(a.slice(0,i-1).concat({value:\" \"===a[i-2].type?\"*\":\"\"})).replace(R,\"$1\"),c,e>i&&xb(a.slice(i,e)),f>e&&xb(a=a.slice(e)),f>e&&rb(a))}m.push(c)}return tb(m)}function yb(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q=\"0\",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG(\"*\",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=F.call(i));s=vb(s)}H.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&gb.uniqueSort(i)}return k&&(w=v,j=t),r};return c?ib(f):f}return h=gb.compile=function(a,b){var c,d=[],e=[],f=A[a+\" \"];if(!f){b||(b=g(a)),c=b.length;while(c--)f=xb(b[c]),f[u]?d.push(f):e.push(f);f=A(a,yb(e,d)),f.selector=a}return f},i=gb.select=function(a,b,e,f){var i,j,k,l,m,n=\"function\"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&\"ID\"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(cb,db),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(cb,db),ab.test(j[0].type)&&pb(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&rb(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,ab.test(a)&&pb(b.parentNode)||b),e},c.sortStable=u.split(\"\").sort(B).join(\"\")===u,c.detectDuplicates=!!l,m(),c.sortDetached=jb(function(a){return 1&a.compareDocumentPosition(n.createElement(\"div\"))}),jb(function(a){return a.innerHTML=\"<a href='#'></a>\",\"#\"===a.firstChild.getAttribute(\"href\")})||kb(\"type|href|height|width\",function(a,b,c){return c?void 0:a.getAttribute(b,\"type\"===b.toLowerCase()?1:2)}),c.attributes&&jb(function(a){return a.innerHTML=\"<input/>\",a.firstChild.setAttribute(\"value\",\"\"),\"\"===a.firstChild.getAttribute(\"value\")})||kb(\"value\",function(a,b,c){return c||\"input\"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),jb(function(a){return null==a.getAttribute(\"disabled\")})||kb(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),gb}(a);n.find=t,n.expr=t.selectors,n.expr[\":\"]=n.expr.pseudos,n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=n.expr.match.needsContext,v=/^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,w=/^.[^:#\\[\\.,]*$/;function x(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if(\"string\"==typeof b){if(w.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return g.call(b,a)>=0!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=\":not(\"+a+\")\"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if(\"string\"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;c>b;b++)if(n.contains(e[b],this))return!0}));for(b=0;c>b;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+\" \"+a:a,d},filter:function(a){return this.pushStack(x(this,a||[],!1))},not:function(a){return this.pushStack(x(this,a||[],!0))},is:function(a){return!!x(this,\"string\"==typeof a&&u.test(a)?n(a):a||[],!1).length}});var y,z=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,A=n.fn.init=function(a,b){var c,d;if(!a)return this;if(\"string\"==typeof a){if(c=\"<\"===a[0]&&\">\"===a[a.length-1]&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||y).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:l,!0)),v.test(c[1])&&n.isPlainObject(b))for(c in b)n.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}return d=l.getElementById(c[2]),d&&d.parentNode&&(this.length=1,this[0]=d),this.context=l,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?\"undefined\"!=typeof y.ready?y.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};A.prototype=n.fn,y=n(l);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};n.extend({dir:function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=u.test(a)||\"string\"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.unique(f):f)},index:function(a){return a?\"string\"==typeof a?g.call(n(a),this[0]):g.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.unique(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){while((a=a[b])&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return n.dir(a,\"parentNode\")},parentsUntil:function(a,b,c){return n.dir(a,\"parentNode\",c)},next:function(a){return D(a,\"nextSibling\")},prev:function(a){return D(a,\"previousSibling\")},nextAll:function(a){return n.dir(a,\"nextSibling\")},prevAll:function(a){return n.dir(a,\"previousSibling\")},nextUntil:function(a,b,c){return n.dir(a,\"nextSibling\",c)},prevUntil:function(a,b,c){return n.dir(a,\"previousSibling\",c)},siblings:function(a){return n.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return n.sibling(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return\"Until\"!==a.slice(-5)&&(d=c),d&&\"string\"==typeof d&&(e=n.filter(d,e)),this.length>1&&(C[a]||n.unique(e),B.test(a)&&e.reverse()),this.pushStack(e)}});var E=/\\S+/g,F={};function G(a){var b=F[a]={};return n.each(a.match(E)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a=\"string\"==typeof a?F[a]||G(a):n.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(b=a.memory&&l,c=!0,g=e||0,e=0,f=h.length,d=!0;h&&f>g;g++)if(h[g].apply(l[0],l[1])===!1&&a.stopOnFalse){b=!1;break}d=!1,h&&(i?i.length&&j(i.shift()):b?h=[]:k.disable())},k={add:function(){if(h){var c=h.length;!function g(b){n.each(b,function(b,c){var d=n.type(c);\"function\"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&\"string\"!==d&&g(c)})}(arguments),d?f=h.length:b&&(e=c,j(b))}return this},remove:function(){return h&&n.each(arguments,function(a,b){var c;while((c=n.inArray(b,h,c))>-1)h.splice(c,1),d&&(f>=c&&f--,g>=c&&g--)}),this},has:function(a){return a?n.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],f=0,this},disable:function(){return h=i=b=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,b||k.disable(),this},locked:function(){return!i},fireWith:function(a,b){return!h||c&&!i||(b=b||[],b=[a,b.slice?b.slice():b],d?i.push(b):j(b)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!c}};return k},n.extend({Deferred:function(a){var b=[[\"resolve\",\"done\",n.Callbacks(\"once memory\"),\"resolved\"],[\"reject\",\"fail\",n.Callbacks(\"once memory\"),\"rejected\"],[\"notify\",\"progress\",n.Callbacks(\"memory\")]],c=\"pending\",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+\"With\"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+\"With\"](this===e?d:this,arguments),this},e[f[0]+\"With\"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&n.isFunction(a.promise)?e:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(H.resolveWith(l,[n]),n.fn.triggerHandler&&(n(l).triggerHandler(\"ready\"),n(l).off(\"ready\"))))}});function I(){l.removeEventListener(\"DOMContentLoaded\",I,!1),a.removeEventListener(\"load\",I,!1),n.ready()}n.ready.promise=function(b){return H||(H=n.Deferred(),\"complete\"===l.readyState?setTimeout(n.ready):(l.addEventListener(\"DOMContentLoaded\",I,!1),a.addEventListener(\"load\",I,!1))),H.promise(b)},n.ready.promise();var J=n.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if(\"object\"===n.type(c)){e=!0;for(h in c)n.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f};n.acceptData=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function K(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=n.expando+K.uid++}K.uid=1,K.accepts=n.acceptData,K.prototype={key:function(a){if(!K.accepts(a))return 0;var b={},c=a[this.expando];if(!c){c=K.uid++;try{b[this.expando]={value:c},Object.defineProperties(a,b)}catch(d){b[this.expando]=c,n.extend(a,b)}}return this.cache[c]||(this.cache[c]={}),c},set:function(a,b,c){var d,e=this.key(a),f=this.cache[e];if(\"string\"==typeof b)f[b]=c;else if(n.isEmptyObject(f))n.extend(this.cache[e],b);else for(d in b)f[d]=b[d];return f},get:function(a,b){var c=this.cache[this.key(a)];return void 0===b?c:c[b]},access:function(a,b,c){var d;return void 0===b||b&&\"string\"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=this.key(a),g=this.cache[f];if(void 0===b)this.cache[f]={};else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in g?d=[b,e]:(d=e,d=d in g?[d]:d.match(E)||[])),c=d.length;while(c--)delete g[d[c]]}},hasData:function(a){return!n.isEmptyObject(this.cache[a[this.expando]]||{})},discard:function(a){a[this.expando]&&delete this.cache[a[this.expando]]}};var L=new K,M=new K,N=/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,O=/([A-Z])/g;function P(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d=\"data-\"+b.replace(O,\"-$1\").toLowerCase(),c=a.getAttribute(d),\"string\"==typeof c){try{c=\"true\"===c?!0:\"false\"===c?!1:\"null\"===c?null:+c+\"\"===c?+c:N.test(c)?n.parseJSON(c):c}catch(e){}M.set(a,b,c)}else c=void 0;return c}n.extend({hasData:function(a){return M.hasData(a)||L.hasData(a)},data:function(a,b,c){return M.access(a,b,c)\n\t},removeData:function(a,b){M.remove(a,b)},_data:function(a,b,c){return L.access(a,b,c)},_removeData:function(a,b){L.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=M.get(f),1===f.nodeType&&!L.get(f,\"hasDataAttrs\"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf(\"data-\")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d])));L.set(f,\"hasDataAttrs\",!0)}return e}return\"object\"==typeof a?this.each(function(){M.set(this,a)}):J(this,function(b){var c,d=n.camelCase(a);if(f&&void 0===b){if(c=M.get(f,a),void 0!==c)return c;if(c=M.get(f,d),void 0!==c)return c;if(c=P(f,d,void 0),void 0!==c)return c}else this.each(function(){var c=M.get(this,d);M.set(this,d,b),-1!==a.indexOf(\"-\")&&void 0!==c&&M.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){M.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||\"fx\")+\"queue\",d=L.get(a,b),c&&(!d||n.isArray(c)?d=L.access(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||\"fx\";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};\"inprogress\"===e&&(e=c.shift(),d--),e&&(\"fx\"===b&&c.unshift(\"inprogress\"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+\"queueHooks\";return L.get(a,c)||L.access(a,c,{empty:n.Callbacks(\"once memory\").add(function(){L.remove(a,[b+\"queue\",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return\"string\"!=typeof a&&(b=a,a=\"fx\",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),\"fx\"===a&&\"inprogress\"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||\"fx\",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};\"string\"!=typeof a&&(b=a,a=void 0),a=a||\"fx\";while(g--)c=L.get(f[g],a+\"queueHooks\"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var Q=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,R=[\"Top\",\"Right\",\"Bottom\",\"Left\"],S=function(a,b){return a=b||a,\"none\"===n.css(a,\"display\")||!n.contains(a.ownerDocument,a)},T=/^(?:checkbox|radio)$/i;!function(){var a=l.createDocumentFragment(),b=a.appendChild(l.createElement(\"div\")),c=l.createElement(\"input\");c.setAttribute(\"type\",\"radio\"),c.setAttribute(\"checked\",\"checked\"),c.setAttribute(\"name\",\"t\"),b.appendChild(c),k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML=\"<textarea>x</textarea>\",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var U=\"undefined\";k.focusinBubbles=\"onfocusin\"in a;var V=/^key/,W=/^(?:mouse|pointer|contextmenu)|click/,X=/^(?:focusinfocus|focusoutblur)$/,Y=/^([^.]*)(?:\\.(.+)|)$/;function Z(){return!0}function $(){return!1}function _(){try{return l.activeElement}catch(a){}}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return typeof n!==U&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||\"\").match(E)||[\"\"],j=b.length;while(j--)h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||\"\").split(\".\").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(\".\")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,p,g)!==!1||a.addEventListener&&a.addEventListener(o,g,!1)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.hasData(a)&&L.get(a);if(r&&(i=r.events)){b=(b||\"\").match(E)||[\"\"],j=b.length;while(j--)if(h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||\"\").split(\".\").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp(\"(^|\\\\.)\"+p.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&(\"**\"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&(delete r.handle,L.remove(a,\"events\"))}},trigger:function(b,c,d,e){var f,g,h,i,k,m,o,p=[d||l],q=j.call(b,\"type\")?b.type:b,r=j.call(b,\"namespace\")?b.namespace.split(\".\"):[];if(g=h=d=d||l,3!==d.nodeType&&8!==d.nodeType&&!X.test(q+n.event.triggered)&&(q.indexOf(\".\")>=0&&(r=q.split(\".\"),q=r.shift(),r.sort()),k=q.indexOf(\":\")<0&&\"on\"+q,b=b[n.expando]?b:new n.Event(q,\"object\"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=r.join(\".\"),b.namespace_re=b.namespace?new RegExp(\"(^|\\\\.)\"+r.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},e||!o.trigger||o.trigger.apply(d,c)!==!1)){if(!e&&!o.noBubble&&!n.isWindow(d)){for(i=o.delegateType||q,X.test(i+q)||(g=g.parentNode);g;g=g.parentNode)p.push(g),h=g;h===(d.ownerDocument||l)&&p.push(h.defaultView||h.parentWindow||a)}f=0;while((g=p[f++])&&!b.isPropagationStopped())b.type=f>1?i:o.bindType||q,m=(L.get(g,\"events\")||{})[b.type]&&L.get(g,\"handle\"),m&&m.apply(g,c),m=k&&g[k],m&&m.apply&&n.acceptData(g)&&(b.result=m.apply(g,c),b.result===!1&&b.preventDefault());return b.type=q,e||b.isDefaultPrevented()||o._default&&o._default.apply(p.pop(),c)!==!1||!n.acceptData(d)||k&&n.isFunction(d[q])&&!n.isWindow(d)&&(h=d[k],h&&(d[k]=null),n.event.triggered=q,d[q](),n.event.triggered=void 0,h&&(d[k]=h)),b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(L.get(this,\"events\")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(g.namespace))&&(a.handleObj=g,a.data=g.data,e=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==e&&(a.result=e)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||\"click\"!==a.type))for(;i!==this;i=i.parentNode||this)if(i.disabled!==!0||\"click\"!==a.type){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+\" \",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>=0:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:\"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),fixHooks:{},keyHooks:{props:\"char charCode key keyCode\".split(\" \"),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:\"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),filter:function(a,b){var c,d,e,f=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||l,d=c.documentElement,e=c.body,a.pageX=b.clientX+(d&&d.scrollLeft||e&&e.scrollLeft||0)-(d&&d.clientLeft||e&&e.clientLeft||0),a.pageY=b.clientY+(d&&d.scrollTop||e&&e.scrollTop||0)-(d&&d.clientTop||e&&e.clientTop||0)),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=W.test(e)?this.mouseHooks:V.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new n.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=l),3===a.target.nodeType&&(a.target=a.target.parentNode),g.filter?g.filter(a,f):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==_()&&this.focus?(this.focus(),!1):void 0},delegateType:\"focusin\"},blur:{trigger:function(){return this===_()&&this.blur?(this.blur(),!1):void 0},delegateType:\"focusout\"},click:{trigger:function(){return\"checkbox\"===this.type&&this.click&&n.nodeName(this,\"input\")?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,\"a\")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=n.extend(new n.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?n.event.trigger(e,null,b):n.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?Z:$):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={isDefaultPrevented:$,isPropagationStopped:$,isImmediatePropagationStopped:$,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=Z,a&&a.preventDefault&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=Z,a&&a.stopPropagation&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=Z,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\",pointerenter:\"pointerover\",pointerleave:\"pointerout\"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!n.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.focusinBubbles||n.each({focus:\"focusin\",blur:\"focusout\"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a),!0)};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=L.access(d,b);e||d.addEventListener(a,c,!0),L.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=L.access(d,b)-1;e?L.access(d,b,e):(d.removeEventListener(a,c,!0),L.remove(d,b))}}}),n.fn.extend({on:function(a,b,c,d,e){var f,g;if(\"object\"==typeof a){\"string\"!=typeof b&&(c=c||b,b=void 0);for(g in a)this.on(g,b,c,a[g],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&(\"string\"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=$;else if(!d)return this;return 1===e&&(f=d,d=function(a){return n().off(a),f.apply(this,arguments)},d.guid=f.guid||(f.guid=n.guid++)),this.each(function(){n.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+\".\"+d.namespace:d.origType,d.selector,d.handler),this;if(\"object\"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||\"function\"==typeof b)&&(c=b,b=void 0),c===!1&&(c=$),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});var ab=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,bb=/<([\\w:]+)/,cb=/<|&#?\\w+;/,db=/<(?:script|style|link)/i,eb=/checked\\s*(?:[^=]|=\\s*.checked.)/i,fb=/^$|\\/(?:java|ecma)script/i,gb=/^true\\/(.*)/,hb=/^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,ib={option:[1,\"<select multiple='multiple'>\",\"</select>\"],thead:[1,\"<table>\",\"</table>\"],col:[2,\"<table><colgroup>\",\"</colgroup></table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],_default:[0,\"\",\"\"]};ib.optgroup=ib.option,ib.tbody=ib.tfoot=ib.colgroup=ib.caption=ib.thead,ib.th=ib.td;function jb(a,b){return n.nodeName(a,\"table\")&&n.nodeName(11!==b.nodeType?b:b.firstChild,\"tr\")?a.getElementsByTagName(\"tbody\")[0]||a.appendChild(a.ownerDocument.createElement(\"tbody\")):a}function kb(a){return a.type=(null!==a.getAttribute(\"type\"))+\"/\"+a.type,a}function lb(a){var b=gb.exec(a.type);return b?a.type=b[1]:a.removeAttribute(\"type\"),a}function mb(a,b){for(var c=0,d=a.length;d>c;c++)L.set(a[c],\"globalEval\",!b||L.get(b[c],\"globalEval\"))}function nb(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(L.hasData(a)&&(f=L.access(a),g=L.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)n.event.add(b,e,j[e][c])}M.hasData(a)&&(h=M.access(a),i=n.extend({},h),M.set(b,i))}}function ob(a,b){var c=a.getElementsByTagName?a.getElementsByTagName(b||\"*\"):a.querySelectorAll?a.querySelectorAll(b||\"*\"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function pb(a,b){var c=b.nodeName.toLowerCase();\"input\"===c&&T.test(a.type)?b.checked=a.checked:(\"input\"===c||\"textarea\"===c)&&(b.defaultValue=a.defaultValue)}n.extend({clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=ob(h),f=ob(a),d=0,e=f.length;e>d;d++)pb(f[d],g[d]);if(b)if(c)for(f=f||ob(a),g=g||ob(h),d=0,e=f.length;e>d;d++)nb(f[d],g[d]);else nb(a,h);return g=ob(h,\"script\"),g.length>0&&mb(g,!i&&ob(a,\"script\")),h},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,k=b.createDocumentFragment(),l=[],m=0,o=a.length;o>m;m++)if(e=a[m],e||0===e)if(\"object\"===n.type(e))n.merge(l,e.nodeType?[e]:e);else if(cb.test(e)){f=f||k.appendChild(b.createElement(\"div\")),g=(bb.exec(e)||[\"\",\"\"])[1].toLowerCase(),h=ib[g]||ib._default,f.innerHTML=h[1]+e.replace(ab,\"<$1></$2>\")+h[2],j=h[0];while(j--)f=f.lastChild;n.merge(l,f.childNodes),f=k.firstChild,f.textContent=\"\"}else l.push(b.createTextNode(e));k.textContent=\"\",m=0;while(e=l[m++])if((!d||-1===n.inArray(e,d))&&(i=n.contains(e.ownerDocument,e),f=ob(k.appendChild(e),\"script\"),i&&mb(f),c)){j=0;while(e=f[j++])fb.test(e.type||\"\")&&c.push(e)}return k},cleanData:function(a){for(var b,c,d,e,f=n.event.special,g=0;void 0!==(c=a[g]);g++){if(n.acceptData(c)&&(e=c[L.expando],e&&(b=L.cache[e]))){if(b.events)for(d in b.events)f[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);L.cache[e]&&delete L.cache[e]}delete M.cache[c[M.expando]]}}}),n.fn.extend({text:function(a){return J(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=a)})},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=jb(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=jb(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?n.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||n.cleanData(ob(c)),c.parentNode&&(b&&n.contains(c.ownerDocument,c)&&mb(ob(c,\"script\")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData(ob(a,!1)),a.textContent=\"\");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return J(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if(\"string\"==typeof a&&!db.test(a)&&!ib[(bb.exec(a)||[\"\",\"\"])[1].toLowerCase()]){a=a.replace(ab,\"<$1></$2>\");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(ob(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,n.cleanData(ob(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,m=this,o=l-1,p=a[0],q=n.isFunction(p);if(q||l>1&&\"string\"==typeof p&&!k.checkClone&&eb.test(p))return this.each(function(c){var d=m.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(c=n.buildFragment(a,this[0].ownerDocument,!1,this),d=c.firstChild,1===c.childNodes.length&&(c=d),d)){for(f=n.map(ob(c,\"script\"),kb),g=f.length;l>j;j++)h=c,j!==o&&(h=n.clone(h,!0,!0),g&&n.merge(f,ob(h,\"script\"))),b.call(this[j],h,j);if(g)for(i=f[f.length-1].ownerDocument,n.map(f,lb),j=0;g>j;j++)h=f[j],fb.test(h.type||\"\")&&!L.access(h,\"globalEval\")&&n.contains(i,h)&&(h.src?n._evalUrl&&n._evalUrl(h.src):n.globalEval(h.textContent.replace(hb,\"\")))}return this}}),n.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),g=e.length-1,h=0;g>=h;h++)c=h===g?this:this.clone(!0),n(e[h])[b](c),f.apply(d,c.get());return this.pushStack(d)}});var qb,rb={};function sb(b,c){var d,e=n(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:n.css(e[0],\"display\");return e.detach(),f}function tb(a){var b=l,c=rb[a];return c||(c=sb(a,b),\"none\"!==c&&c||(qb=(qb||n(\"<iframe frameborder='0' width='0' height='0'/>\")).appendTo(b.documentElement),b=qb[0].contentDocument,b.write(),b.close(),c=sb(a,b),qb.detach()),rb[a]=c),c}var ub=/^margin/,vb=new RegExp(\"^(\"+Q+\")(?!px)[a-z%]+$\",\"i\"),wb=function(b){return b.ownerDocument.defaultView.opener?b.ownerDocument.defaultView.getComputedStyle(b,null):a.getComputedStyle(b,null)};function xb(a,b,c){var d,e,f,g,h=a.style;return c=c||wb(a),c&&(g=c.getPropertyValue(b)||c[b]),c&&(\"\"!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),vb.test(g)&&ub.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0!==g?g+\"\":g}function yb(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d=l.documentElement,e=l.createElement(\"div\"),f=l.createElement(\"div\");if(f.style){f.style.backgroundClip=\"content-box\",f.cloneNode(!0).style.backgroundClip=\"\",k.clearCloneStyle=\"content-box\"===f.style.backgroundClip,e.style.cssText=\"border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute\",e.appendChild(f);function g(){f.style.cssText=\"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute\",f.innerHTML=\"\",d.appendChild(e);var g=a.getComputedStyle(f,null);b=\"1%\"!==g.top,c=\"4px\"===g.width,d.removeChild(e)}a.getComputedStyle&&n.extend(k,{pixelPosition:function(){return g(),b},boxSizingReliable:function(){return null==c&&g(),c},reliableMarginRight:function(){var b,c=f.appendChild(l.createElement(\"div\"));return c.style.cssText=f.style.cssText=\"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0\",c.style.marginRight=c.style.width=\"0\",f.style.width=\"1px\",d.appendChild(e),b=!parseFloat(a.getComputedStyle(c,null).marginRight),d.removeChild(e),f.removeChild(c),b}})}}(),n.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var zb=/^(none|table(?!-c[ea]).+)/,Ab=new RegExp(\"^(\"+Q+\")(.*)$\",\"i\"),Bb=new RegExp(\"^([+-])=(\"+Q+\")\",\"i\"),Cb={position:\"absolute\",visibility:\"hidden\",display:\"block\"},Db={letterSpacing:\"0\",fontWeight:\"400\"},Eb=[\"Webkit\",\"O\",\"Moz\",\"ms\"];function Fb(a,b){if(b in a)return b;var c=b[0].toUpperCase()+b.slice(1),d=b,e=Eb.length;while(e--)if(b=Eb[e]+c,b in a)return b;return d}function Gb(a,b,c){var d=Ab.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||\"px\"):b}function Hb(a,b,c,d,e){for(var f=c===(d?\"border\":\"content\")?4:\"width\"===b?1:0,g=0;4>f;f+=2)\"margin\"===c&&(g+=n.css(a,c+R[f],!0,e)),d?(\"content\"===c&&(g-=n.css(a,\"padding\"+R[f],!0,e)),\"margin\"!==c&&(g-=n.css(a,\"border\"+R[f]+\"Width\",!0,e))):(g+=n.css(a,\"padding\"+R[f],!0,e),\"padding\"!==c&&(g+=n.css(a,\"border\"+R[f]+\"Width\",!0,e)));return g}function Ib(a,b,c){var d=!0,e=\"width\"===b?a.offsetWidth:a.offsetHeight,f=wb(a),g=\"border-box\"===n.css(a,\"boxSizing\",!1,f);if(0>=e||null==e){if(e=xb(a,b,f),(0>e||null==e)&&(e=a.style[b]),vb.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Hb(a,b,c||(g?\"border\":\"content\"),d,f)+\"px\"}function Jb(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=L.get(d,\"olddisplay\"),c=d.style.display,b?(f[g]||\"none\"!==c||(d.style.display=\"\"),\"\"===d.style.display&&S(d)&&(f[g]=L.access(d,\"olddisplay\",tb(d.nodeName)))):(e=S(d),\"none\"===c&&e||L.set(d,\"olddisplay\",e?c:n.css(d,\"display\"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&\"none\"!==d.style.display&&\"\"!==d.style.display||(d.style.display=b?f[g]||\"\":\"none\"));return a}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=xb(a,\"opacity\");return\"\"===c?\"1\":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{\"float\":\"cssFloat\"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;return b=n.cssProps[h]||(n.cssProps[h]=Fb(i,h)),g=n.cssHooks[b]||n.cssHooks[h],void 0===c?g&&\"get\"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,\"string\"===f&&(e=Bb.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(n.css(a,b)),f=\"number\"),null!=c&&c===c&&(\"number\"!==f||n.cssNumber[h]||(c+=\"px\"),k.clearCloneStyle||\"\"!==c||0!==b.indexOf(\"background\")||(i[b]=\"inherit\"),g&&\"set\"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Fb(a.style,h)),g=n.cssHooks[b]||n.cssHooks[h],g&&\"get\"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=xb(a,b,d)),\"normal\"===e&&b in Db&&(e=Db[b]),\"\"===c||c?(f=parseFloat(e),c===!0||n.isNumeric(f)?f||0:e):e}}),n.each([\"height\",\"width\"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?zb.test(n.css(a,\"display\"))&&0===a.offsetWidth?n.swap(a,Cb,function(){return Ib(a,b,d)}):Ib(a,b,d):void 0},set:function(a,c,d){var e=d&&wb(a);return Gb(a,c,d?Hb(a,b,d,\"border-box\"===n.css(a,\"boxSizing\",!1,e),e):0)}}}),n.cssHooks.marginRight=yb(k.reliableMarginRight,function(a,b){return b?n.swap(a,{display:\"inline-block\"},xb,[a,\"marginRight\"]):void 0}),n.each({margin:\"\",padding:\"\",border:\"Width\"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f=\"string\"==typeof c?c.split(\" \"):[c];4>d;d++)e[a+R[d]+b]=f[d]||f[d-2]||f[0];return e}},ub.test(a)||(n.cssHooks[a+b].set=Gb)}),n.fn.extend({css:function(a,b){return J(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=wb(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Jb(this,!0)},hide:function(){return Jb(this)},toggle:function(a){return\"boolean\"==typeof a?a?this.show():this.hide():this.each(function(){S(this)?n(this).show():n(this).hide()})}});function Kb(a,b,c,d,e){return new Kb.prototype.init(a,b,c,d,e)}n.Tween=Kb,Kb.prototype={constructor:Kb,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||\"swing\",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?\"\":\"px\")},cur:function(){var a=Kb.propHooks[this.prop];return a&&a.get?a.get(this):Kb.propHooks._default.get(this)},run:function(a){var b,c=Kb.propHooks[this.prop];return this.pos=b=this.options.duration?n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Kb.propHooks._default.set(this),this}},Kb.prototype.init.prototype=Kb.prototype,Kb.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=n.css(a.elem,a.prop,\"\"),b&&\"auto\"!==b?b:0):a.elem[a.prop]},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[n.cssProps[a.prop]]||n.cssHooks[a.prop])?n.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Kb.propHooks.scrollTop=Kb.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},n.fx=Kb.prototype.init,n.fx.step={};var Lb,Mb,Nb=/^(?:toggle|show|hide)$/,Ob=new RegExp(\"^(?:([+-])=|)(\"+Q+\")([a-z%]*)$\",\"i\"),Pb=/queueHooks$/,Qb=[Vb],Rb={\"*\":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=Ob.exec(b),f=e&&e[3]||(n.cssNumber[a]?\"\":\"px\"),g=(n.cssNumber[a]||\"px\"!==f&&+d)&&Ob.exec(n.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||\".5\",g/=h,n.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function Sb(){return setTimeout(function(){Lb=void 0}),Lb=n.now()}function Tb(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=R[d],e[\"margin\"+c]=e[\"padding\"+c]=a;return b&&(e.opacity=e.width=a),e}function Ub(a,b,c){for(var d,e=(Rb[b]||[]).concat(Rb[\"*\"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function Vb(a,b,c){var d,e,f,g,h,i,j,k,l=this,m={},o=a.style,p=a.nodeType&&S(a),q=L.get(a,\"fxshow\");c.queue||(h=n._queueHooks(a,\"fx\"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,\"fx\").length||h.empty.fire()})})),1===a.nodeType&&(\"height\"in b||\"width\"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,\"display\"),k=\"none\"===j?L.get(a,\"olddisplay\")||tb(a.nodeName):j,\"inline\"===k&&\"none\"===n.css(a,\"float\")&&(o.display=\"inline-block\")),c.overflow&&(o.overflow=\"hidden\",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Nb.exec(e)){if(delete b[d],f=f||\"toggle\"===e,e===(p?\"hide\":\"show\")){if(\"show\"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))\"inline\"===(\"none\"===j?tb(a.nodeName):j)&&(o.display=j);else{q?\"hidden\"in q&&(p=q.hidden):q=L.access(a,\"fxshow\",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;L.remove(a,\"fxshow\");for(b in m)n.style(a,b,m[b])});for(d in m)g=Ub(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start=\"width\"===d||\"height\"===d?1:0))}}function Wb(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&\"expand\"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function Xb(a,b,c){var d,e,f=0,g=Qb.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=Lb||Sb(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:Lb||Sb(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(Wb(k,j.opts.specialEasing);g>f;f++)if(d=Qb[f].call(j,a,k,j.opts))return d;return n.map(k,Ub,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(Xb,{tweener:function(a,b){n.isFunction(a)?(b=a,a=[\"*\"]):a=a.split(\" \");for(var c,d=0,e=a.length;e>d;d++)c=a[d],Rb[c]=Rb[c]||[],Rb[c].unshift(b)},prefilter:function(a,b){b?Qb.unshift(a):Qb.push(a)}}),n.speed=function(a,b,c){var d=a&&\"object\"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:\"number\"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue=\"fx\"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(S).css(\"opacity\",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=Xb(this,n.extend({},a),f);(e||L.get(this,\"finish\"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return\"string\"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||\"fx\",[]),this.each(function(){var b=!0,e=null!=a&&a+\"queueHooks\",f=n.timers,g=L.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Pb.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||\"fx\"),this.each(function(){var b,c=L.get(this),d=c[a+\"queue\"],e=c[a+\"queueHooks\"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each([\"toggle\",\"show\",\"hide\"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||\"boolean\"==typeof a?c.apply(this,arguments):this.animate(Tb(b,!0),a,d,e)}}),n.each({slideDown:Tb(\"show\"),slideUp:Tb(\"hide\"),slideToggle:Tb(\"toggle\"),fadeIn:{opacity:\"show\"},fadeOut:{opacity:\"hide\"},fadeToggle:{opacity:\"toggle\"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(Lb=n.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),Lb=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Mb||(Mb=setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){clearInterval(Mb),Mb=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(a,b){return a=n.fx?n.fx.speeds[a]||a:a,b=b||\"fx\",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a=l.createElement(\"input\"),b=l.createElement(\"select\"),c=b.appendChild(l.createElement(\"option\"));a.type=\"checkbox\",k.checkOn=\"\"!==a.value,k.optSelected=c.selected,b.disabled=!0,k.optDisabled=!c.disabled,a=l.createElement(\"input\"),a.value=\"t\",a.type=\"radio\",k.radioValue=\"t\"===a.value}();var Yb,Zb,$b=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return J(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===U?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),d=n.attrHooks[b]||(n.expr.match.bool.test(b)?Zb:Yb)),void 0===c?d&&\"get\"in d&&null!==(e=d.get(a,b))?e:(e=n.find.attr(a,b),null==e?void 0:e):null!==c?d&&\"set\"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+\"\"),c):void n.removeAttr(a,b))\n\t},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&\"radio\"===b&&n.nodeName(a,\"input\")){var c=a.value;return a.setAttribute(\"type\",b),c&&(a.value=c),b}}}}}),Zb={set:function(a,b,c){return b===!1?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\\w+/g),function(a,b){var c=$b[b]||n.find.attr;$b[b]=function(a,b,d){var e,f;return d||(f=$b[b],$b[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,$b[b]=f),e}});var _b=/^(?:input|select|textarea|button)$/i;n.fn.extend({prop:function(a,b){return J(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({propFix:{\"for\":\"htmlFor\",\"class\":\"className\"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!n.isXMLDoc(a),f&&(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&\"set\"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&\"get\"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){return a.hasAttribute(\"tabindex\")||_b.test(a.nodeName)||a.href?a.tabIndex:-1}}}}),k.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null}}),n.each([\"tabIndex\",\"readOnly\",\"maxLength\",\"cellSpacing\",\"cellPadding\",\"rowSpan\",\"colSpan\",\"useMap\",\"frameBorder\",\"contentEditable\"],function(){n.propFix[this.toLowerCase()]=this});var ac=/[\\t\\r\\n\\f]/g;n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h=\"string\"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,this.className))});if(h)for(b=(a||\"\").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(\" \"+c.className+\" \").replace(ac,\" \"):\" \")){f=0;while(e=b[f++])d.indexOf(\" \"+e+\" \")<0&&(d+=e+\" \");g=n.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0===arguments.length||\"string\"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,this.className))});if(h)for(b=(a||\"\").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(\" \"+c.className+\" \").replace(ac,\" \"):\"\")){f=0;while(e=b[f++])while(d.indexOf(\" \"+e+\" \")>=0)d=d.replace(\" \"+e+\" \",\" \");g=a?n.trim(d):\"\",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return\"boolean\"==typeof b&&\"string\"===c?b?this.addClass(a):this.removeClass(a):this.each(n.isFunction(a)?function(c){n(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if(\"string\"===c){var b,d=0,e=n(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===U||\"boolean\"===c)&&(this.className&&L.set(this,\"__className__\",this.className),this.className=this.className||a===!1?\"\":L.get(this,\"__className__\")||\"\")})},hasClass:function(a){for(var b=\" \"+a+\" \",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(\" \"+this[c].className+\" \").replace(ac,\" \").indexOf(b)>=0)return!0;return!1}});var bc=/\\r/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e=\"\":\"number\"==typeof e?e+=\"\":n.isArray(e)&&(e=n.map(e,function(a){return null==a?\"\":a+\"\"})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&\"set\"in b&&void 0!==b.set(this,e,\"value\")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&\"get\"in b&&void 0!==(c=b.get(e,\"value\"))?c:(c=e.value,\"string\"==typeof c?c.replace(bc,\"\"):null==c?\"\":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,\"value\");return null!=b?b:n.trim(n.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f=\"select-one\"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute(\"disabled\"))||c.parentNode.disabled&&n.nodeName(c.parentNode,\"optgroup\"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=n.inArray(d.value,f)>=0)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each([\"radio\",\"checkbox\"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>=0:void 0}},k.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute(\"value\")?\"on\":a.value})}),n.each(\"blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu\".split(\" \"),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,\"**\"):this.off(b,a||\"**\",c)}});var cc=n.now(),dc=/\\?/;n.parseJSON=function(a){return JSON.parse(a+\"\")},n.parseXML=function(a){var b,c;if(!a||\"string\"!=typeof a)return null;try{c=new DOMParser,b=c.parseFromString(a,\"text/xml\")}catch(d){b=void 0}return(!b||b.getElementsByTagName(\"parsererror\").length)&&n.error(\"Invalid XML: \"+a),b};var ec=/#.*$/,fc=/([?&])_=[^&]*/,gc=/^(.*?):[ \\t]*([^\\r\\n]*)$/gm,hc=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,ic=/^(?:GET|HEAD)$/,jc=/^\\/\\//,kc=/^([\\w.+-]+:)(?:\\/\\/(?:[^\\/?#]*@|)([^\\/?#:]*)(?::(\\d+)|)|)/,lc={},mc={},nc=\"*/\".concat(\"*\"),oc=a.location.href,pc=kc.exec(oc.toLowerCase())||[];function qc(a){return function(b,c){\"string\"!=typeof b&&(c=b,b=\"*\");var d,e=0,f=b.toLowerCase().match(E)||[];if(n.isFunction(c))while(d=f[e++])\"+\"===d[0]?(d=d.slice(1)||\"*\",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function rc(a,b,c,d){var e={},f=a===mc;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return\"string\"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e[\"*\"]&&g(\"*\")}function sc(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function tc(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while(\"*\"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader(\"Content-Type\"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+\" \"+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function uc(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if(\"*\"===f)f=i;else if(\"*\"!==i&&i!==f){if(g=j[i+\" \"+f]||j[\"* \"+f],!g)for(e in j)if(h=e.split(\" \"),h[1]===f&&(g=j[i+\" \"+h[0]]||j[\"* \"+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a[\"throws\"])b=g(b);else try{b=g(b)}catch(l){return{state:\"parsererror\",error:g?l:\"No conversion from \"+i+\" to \"+f}}}return{state:\"success\",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:oc,type:\"GET\",isLocal:hc.test(pc[1]),global:!0,processData:!0,async:!0,contentType:\"application/x-www-form-urlencoded; charset=UTF-8\",accepts:{\"*\":nc,text:\"text/plain\",html:\"text/html\",xml:\"application/xml, text/xml\",json:\"application/json, text/javascript\"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:\"responseXML\",text:\"responseText\",json:\"responseJSON\"},converters:{\"* text\":String,\"text html\":!0,\"text json\":n.parseJSON,\"text xml\":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?sc(sc(a,n.ajaxSettings),b):sc(n.ajaxSettings,a)},ajaxPrefilter:qc(lc),ajaxTransport:qc(mc),ajax:function(a,b){\"object\"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=n.ajaxSetup({},b),l=k.context||k,m=k.context&&(l.nodeType||l.jquery)?n(l):n.event,o=n.Deferred(),p=n.Callbacks(\"once memory\"),q=k.statusCode||{},r={},s={},t=0,u=\"canceled\",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!f){f={};while(b=gc.exec(e))f[b[1].toLowerCase()]=b[2]}b=f[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?e:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return c&&c.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||oc)+\"\").replace(ec,\"\").replace(jc,pc[1]+\"//\"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=n.trim(k.dataType||\"*\").toLowerCase().match(E)||[\"\"],null==k.crossDomain&&(h=kc.exec(k.url.toLowerCase()),k.crossDomain=!(!h||h[1]===pc[1]&&h[2]===pc[2]&&(h[3]||(\"http:\"===h[1]?\"80\":\"443\"))===(pc[3]||(\"http:\"===pc[1]?\"80\":\"443\")))),k.data&&k.processData&&\"string\"!=typeof k.data&&(k.data=n.param(k.data,k.traditional)),rc(lc,k,b,v),2===t)return v;i=n.event&&k.global,i&&0===n.active++&&n.event.trigger(\"ajaxStart\"),k.type=k.type.toUpperCase(),k.hasContent=!ic.test(k.type),d=k.url,k.hasContent||(k.data&&(d=k.url+=(dc.test(d)?\"&\":\"?\")+k.data,delete k.data),k.cache===!1&&(k.url=fc.test(d)?d.replace(fc,\"$1_=\"+cc++):d+(dc.test(d)?\"&\":\"?\")+\"_=\"+cc++)),k.ifModified&&(n.lastModified[d]&&v.setRequestHeader(\"If-Modified-Since\",n.lastModified[d]),n.etag[d]&&v.setRequestHeader(\"If-None-Match\",n.etag[d])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader(\"Content-Type\",k.contentType),v.setRequestHeader(\"Accept\",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+(\"*\"!==k.dataTypes[0]?\", \"+nc+\"; q=0.01\":\"\"):k.accepts[\"*\"]);for(j in k.headers)v.setRequestHeader(j,k.headers[j]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u=\"abort\";for(j in{success:1,error:1,complete:1})v[j](k[j]);if(c=rc(mc,k,b,v)){v.readyState=1,i&&m.trigger(\"ajaxSend\",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort(\"timeout\")},k.timeout));try{t=1,c.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,\"No Transport\");function x(a,b,f,h){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),c=void 0,e=h||\"\",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,f&&(u=tc(k,v,f)),u=uc(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader(\"Last-Modified\"),w&&(n.lastModified[d]=w),w=v.getResponseHeader(\"etag\"),w&&(n.etag[d]=w)),204===a||\"HEAD\"===k.type?x=\"nocontent\":304===a?x=\"notmodified\":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x=\"error\",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+\"\",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,i&&m.trigger(j?\"ajaxSuccess\":\"ajaxError\",[v,k,j?r:s]),p.fireWith(l,[v,x]),i&&(m.trigger(\"ajaxComplete\",[v,k]),--n.active||n.event.trigger(\"ajaxStop\")))}return v},getJSON:function(a,b,c){return n.get(a,b,c,\"json\")},getScript:function(a,b){return n.get(a,void 0,b,\"script\")}}),n.each([\"get\",\"post\"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),n._evalUrl=function(a){return n.ajax({url:a,type:\"GET\",dataType:\"script\",async:!1,global:!1,\"throws\":!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return this.each(n.isFunction(a)?function(b){n(this).wrapInner(a.call(this,b))}:function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,\"body\")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var vc=/%20/g,wc=/\\[\\]$/,xc=/\\r?\\n/g,yc=/^(?:submit|button|image|reset|file)$/i,zc=/^(?:input|select|textarea|keygen)/i;function Ac(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||wc.test(a)?d(a,e):Ac(a+\"[\"+(\"object\"==typeof e?b:\"\")+\"]\",e,c,d)});else if(c||\"object\"!==n.type(b))d(a,b);else for(e in b)Ac(a+\"[\"+e+\"]\",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?\"\":b,d[d.length]=encodeURIComponent(a)+\"=\"+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Ac(c,a[c],b,e);return d.join(\"&\").replace(vc,\"+\")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,\"elements\");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(\":disabled\")&&zc.test(this.nodeName)&&!yc.test(a)&&(this.checked||!T.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(xc,\"\\r\\n\")}}):{name:b.name,value:c.replace(xc,\"\\r\\n\")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(a){}};var Bc=0,Cc={},Dc={0:200,1223:204},Ec=n.ajaxSettings.xhr();a.attachEvent&&a.attachEvent(\"onunload\",function(){for(var a in Cc)Cc[a]()}),k.cors=!!Ec&&\"withCredentials\"in Ec,k.ajax=Ec=!!Ec,n.ajaxTransport(function(a){var b;return k.cors||Ec&&!a.crossDomain?{send:function(c,d){var e,f=a.xhr(),g=++Bc;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c[\"X-Requested-With\"]||(c[\"X-Requested-With\"]=\"XMLHttpRequest\");for(e in c)f.setRequestHeader(e,c[e]);b=function(a){return function(){b&&(delete Cc[g],b=f.onload=f.onerror=null,\"abort\"===a?f.abort():\"error\"===a?d(f.status,f.statusText):d(Dc[f.status]||f.status,f.statusText,\"string\"==typeof f.responseText?{text:f.responseText}:void 0,f.getAllResponseHeaders()))}},f.onload=b(),f.onerror=b(\"error\"),b=Cc[g]=b(\"abort\");try{f.send(a.hasContent&&a.data||null)}catch(h){if(b)throw h}},abort:function(){b&&b()}}:void 0}),n.ajaxSetup({accepts:{script:\"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"},contents:{script:/(?:java|ecma)script/},converters:{\"text script\":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter(\"script\",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type=\"GET\")}),n.ajaxTransport(\"script\",function(a){if(a.crossDomain){var b,c;return{send:function(d,e){b=n(\"<script>\").prop({async:!0,charset:a.scriptCharset,src:a.url}).on(\"load error\",c=function(a){b.remove(),c=null,a&&e(\"error\"===a.type?404:200,a.type)}),l.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Fc=[],Gc=/(=)\\?(?=&|$)|\\?\\?/;n.ajaxSetup({jsonp:\"callback\",jsonpCallback:function(){var a=Fc.pop()||n.expando+\"_\"+cc++;return this[a]=!0,a}}),n.ajaxPrefilter(\"json jsonp\",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Gc.test(b.url)?\"url\":\"string\"==typeof b.data&&!(b.contentType||\"\").indexOf(\"application/x-www-form-urlencoded\")&&Gc.test(b.data)&&\"data\");return h||\"jsonp\"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Gc,\"$1\"+e):b.jsonp!==!1&&(b.url+=(dc.test(b.url)?\"&\":\"?\")+b.jsonp+\"=\"+e),b.converters[\"script json\"]=function(){return g||n.error(e+\" was not called\"),g[0]},b.dataTypes[0]=\"json\",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Fc.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),\"script\"):void 0}),n.parseHTML=function(a,b,c){if(!a||\"string\"!=typeof a)return null;\"boolean\"==typeof b&&(c=b,b=!1),b=b||l;var d=v.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=n.buildFragment([a],b,e),e&&e.length&&n(e).remove(),n.merge([],d.childNodes))};var Hc=n.fn.load;n.fn.load=function(a,b,c){if(\"string\"!=typeof a&&Hc)return Hc.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(\" \");return h>=0&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&\"object\"==typeof b&&(e=\"POST\"),g.length>0&&n.ajax({url:a,type:e,dataType:\"html\",data:b}).done(function(a){f=arguments,g.html(d?n(\"<div>\").append(n.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,f||[a.responseText,b,a])}),this},n.each([\"ajaxStart\",\"ajaxStop\",\"ajaxComplete\",\"ajaxError\",\"ajaxSuccess\",\"ajaxSend\"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};var Ic=a.document.documentElement;function Jc(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,\"position\"),l=n(a),m={};\"static\"===k&&(a.style.position=\"relative\"),h=l.offset(),f=n.css(a,\"top\"),i=n.css(a,\"left\"),j=(\"absolute\"===k||\"fixed\"===k)&&(f+i).indexOf(\"auto\")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),\"using\"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;if(f)return b=f.documentElement,n.contains(b,d)?(typeof d.getBoundingClientRect!==U&&(e=d.getBoundingClientRect()),c=Jc(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return\"fixed\"===n.css(c,\"position\")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],\"html\")||(d=a.offset()),d.top+=n.css(a[0],\"borderTopWidth\",!0),d.left+=n.css(a[0],\"borderLeftWidth\",!0)),{top:b.top-d.top-n.css(c,\"marginTop\",!0),left:b.left-d.left-n.css(c,\"marginLeft\",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||Ic;while(a&&!n.nodeName(a,\"html\")&&\"static\"===n.css(a,\"position\"))a=a.offsetParent;return a||Ic})}}),n.each({scrollLeft:\"pageXOffset\",scrollTop:\"pageYOffset\"},function(b,c){var d=\"pageYOffset\"===c;n.fn[b]=function(e){return J(this,function(b,e,f){var g=Jc(b);return void 0===f?g?g[c]:b[e]:void(g?g.scrollTo(d?a.pageXOffset:f,d?f:a.pageYOffset):b[e]=f)},b,e,arguments.length,null)}}),n.each([\"top\",\"left\"],function(a,b){n.cssHooks[b]=yb(k.pixelPosition,function(a,c){return c?(c=xb(a,b),vb.test(c)?n(a).position()[b]+\"px\":c):void 0})}),n.each({Height:\"height\",Width:\"width\"},function(a,b){n.each({padding:\"inner\"+a,content:b,\"\":\"outer\"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||\"boolean\"!=typeof d),g=c||(d===!0||e===!0?\"margin\":\"border\");return J(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement[\"client\"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body[\"scroll\"+a],e[\"scroll\"+a],b.body[\"offset\"+a],e[\"offset\"+a],e[\"client\"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,\"function\"==\"function\"&&__webpack_require__(3)&&!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function(){return n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));var Kc=a.jQuery,Lc=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Lc),b&&a.jQuery===n&&(a.jQuery=Kc),n},typeof b===U&&(a.jQuery=a.$=n),n});\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;\r\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, {}))\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {\r\n\t\t/**\r\n\t\t * 音声クラス\r\n\t\t * @class Sound\r\n\t\t * @namespace slashCanvas/common\r\n\t\t * @constructor\r\n\t\t * @param src {string} ソースURL\r\n\t\t */\r\n\t\tvar Constructor = function(src) {\r\n\t\t\t/**\r\n\t\t\t * ソースURL\r\n\t\t\t * @property src\r\n\t\t\t * @type {string}\r\n\t\t\t */\r\n\t\t\tthis.src = src;\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 音声DOM\r\n\t\t\t * @property audio\r\n\t\t\t * @type {Audio}\r\n\t\t\t * @default new Audio()\r\n\t\t\t */\r\n\t\t\tthis.audio = new Audio();\r\n\t\r\n\t\t\t// 初期化\r\n\t\t\tthis.audio.src = src;\r\n\t\t\tthis.audio.load();\r\n\t\t\tthis.audio.volume = 0.3;\r\n\t\t};\r\n\t\r\n\t\tConstructor.prototype.play = function() {\r\n\t\t\tvar dom = this.audio;\r\n\t\t\t// 初回以外だったら音声ファイルを巻き戻す\r\n\t\t\tif( typeof(dom.currentTime ) !== 'undefined' )\r\n\t\t\t{\r\n\t\t\t\tdom.currentTime = 0;\r\n\t\t\t}\r\n\t\t\tdom.play();\r\n\t\t};\r\n\t\r\n\t\treturn Constructor;\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {\r\n\t\tvar Matter = __webpack_require__(1);\r\n\t\tvar Body = Matter.Body;\r\n\t\tvar svgUtil = __webpack_require__(6);\r\n\t\tvar mathUtil = __webpack_require__(7);\r\n\t\r\n\t\t/**\r\n\t\t * ブロッククラス\r\n\t\t * @class Block\r\n\t\t * @namespace slashCanvas2.model\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tvar Constructor = function() {\r\n\t\t\t/**\r\n\t\t\t * matterボディ\r\n\t\t\t * @property body\r\n\t\t\t * @type {Matter.Body}\r\n\t\t\t * @default null\r\n\t\t\t */\r\n\t\t\tthis.body = null;\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 座標リスト\r\n\t\t\t * @property pointList\r\n\t\t\t * @type {vector[]}\r\n\t\t\t * @default []\r\n\t\t\t */\r\n\t\t\tthis.pointList = [];\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 初期位置\r\n\t\t\t * @property initialPosition\r\n\t\t\t * @type {vector}\r\n\t\t\t * @default null\r\n\t\t\t */\r\n\t\t\tthis.initialPosition = null;\r\n\t\r\n\t\t\t/**\r\n\t\t\t * スタイル\r\n\t\t\t * @property style\r\n\t\t\t * @type {}\r\n\t\t\t */\r\n\t\t\tthis.style = {\r\n\t\t\t\tfillStyle : \"green\",\r\n\t\t\t\tstrokeStyle : \"red\",\r\n\t\t\t\tlineWidth : 2,\r\n\t\t\t\tlineDash : [],\r\n\t\t\t\tlineCap : \"butt\",\r\n\t\t\t\tlineJoin : \"miter\",\r\n\t\t\t\tstrokeGlobalAlpha : 1,\r\n\t\t\t\tfillGlobalAlpha : 1,\r\n\t\t\t};\r\n\t\t};\r\n\t\r\n\t\t/**\r\n\t\t * スラッシュに伴う動きの強さ\r\n\t\t * @proeprty slashMovementPower\r\n\t\t * @type {number}\r\n\t\t + @default 1\r\n\t\t * @static\r\n\t\t */\r\n\t\tConstructor.prototype.slashMovementPower = 1;\r\n\t\r\n\t\t/**\r\n\t\t * 座標リストからbody作成\r\n\t\t * @method _createBody\r\n\t\t * @private\r\n\t\t * @param points {vector[]} 座標リスト\r\n\t\t * @return {Matter.Body} ボディ\r\n\t\t */\r\n\t\tConstructor.prototype._createBody = function(points) {\r\n\t\t\t// 時計回りに揃える\r\n\t\t\tpoints = mathUtil.convertLoopwise(points);\r\n\t\r\n\t\t\tvar position = mathUtil.gravity2D(points);\r\n\t\t\t// プロパティ\r\n\t\t\tvar prop = {\r\n\t\t\t\tposition : position,\r\n\t\t\t\tfrictionAir : 0,\r\n\t\t\t\tfriction : 0.1,\r\n\t\t\t\trestitution : 0.6,\r\n\t\t\t\tvertices : points,\r\n\t\t\t\trender : {\r\n\t\t\t\t\tvisible : false\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\r\n\t\t\tvar body = Body.create(prop);\r\n\t\t\treturn body;\r\n\t\t};\r\n\t\r\n\t\t/**\r\n\t\t * 座標リストからbody作成\r\n\t\t * @method createBody\r\n\t\t * @param points {vector[]} 座標リスト\r\n\t\t */\r\n\t\tConstructor.prototype.createBody = function(points) {\r\n\t\t\tvar bodyList = [];\r\n\t\r\n\t\t\t// 同一座標オミット\r\n\t\t\tpoints = mathUtil.omitSamePoint(points);\r\n\t\r\n\t\t\t// 三角分割して破片作成\r\n\t\t\tvar triList = mathUtil.triangleSplit(points);\r\n\t\t\tfor (var j = 0; j < triList.length; j++) {\r\n\t\t\t\tvar body = this._createBody(triList[j]);\r\n\t\t\t\tbodyList.push(body);\r\n\t\t\t}\r\n\t\r\n\t\t\t// マージ\r\n\t\t\tvar compBody = Body.create({\r\n\t\t\t\tparts : bodyList\r\n\t\t\t});\r\n\t\r\n\t\t\tthis.body = compBody;\r\n\t\t\tthis.pointList = points.concat();\r\n\t\t\tthis.initialPosition = mathUtil.pointCopy2D(this.body.position);\r\n\t\t};\r\n\t\r\n\t\t/**\r\n\t\t * SVGのpathタグからロードする\r\n\t\t * @method loadSvgPath\r\n\t\t * @param svgPath {} SVGのpathタグDOM\r\n\t\t * @param scale {number} 座標のスケール調整値\r\n\t\t * @param shift {vector} 座標の移動調整(スケール調整後に実施)\r\n\t\t */\r\n\t\tConstructor.prototype.loadSvgPath = function(svgPath, scale, shift) {\r\n\t\t\t// スタイルロード\r\n\t\t\tvar style = svgUtil.parseTagStyle(svgPath);\r\n\t\t\tfor (var key in style) {\r\n\t\t\t\tthis.style[key] = style[key];\r\n\t\t\t}\r\n\t\r\n\t\t\t// 座標ロード\r\n\t\t\tvar points = svgUtil.parsePath(svgPath);\r\n\t\t\t// 座標調整\r\n\t\t\tscale = scale || 1;\r\n\t\t\tshift = shift || {x:0,y:0};\r\n\t\t\tpoints.forEach(function(p) {\r\n\t\t\t\t// スケール→位置の順\r\n\t\t\t\tp.x *= scale;\r\n\t\t\t\tp.y *= scale;\r\n\t\t\t\tp.x += shift.x;\r\n\t\t\t\tp.y += shift.y;\r\n\t\t\t}, this);\r\n\t\r\n\t\t\t// bodyｓ作成\r\n\t\t\tthis.createBody(points);\r\n\t\t};\r\n\t\r\n\t\t/**\r\n\t\t * SVGのrectタグからロードする\r\n\t\t * @method loadSvgRect\r\n\t\t * @param svgRect {} SVGのrectタグDOM\r\n\t\t * @param scale {number} 座標のスケール調整値\r\n\t\t * @param shift {vector} 座標の移動調整(スケール調整後に実施)\r\n\t\t */\r\n\t\tConstructor.prototype.loadSvgRect = function(svgRect, scale, shift) {\r\n\t\t\t// スタイルロード\r\n\t\t\tvar style = svgUtil.parseTagStyle(svgRect);\r\n\t\t\tfor (var key in style) {\r\n\t\t\t\tthis.style[key] = style[key];\r\n\t\t\t}\r\n\t\r\n\t\t\t// 座標ロード\r\n\t\t\tvar points = svgUtil.parseRect(svgRect);\r\n\t\t\t// 座標調整\r\n\t\t\tscale = scale || 1;\r\n\t\t\tshift = shift || {x:0,y:0};\r\n\t\t\tpoints.forEach(function(p) {\r\n\t\t\t\t// スケール→位置の順\r\n\t\t\t\tp.x *= scale;\r\n\t\t\t\tp.y *= scale;\r\n\t\t\t\tp.x += shift.x;\r\n\t\t\t\tp.y += shift.y;\r\n\t\t\t}, this);\r\n\t\r\n\t\t\t// bodyｓ作成\r\n\t\t\tthis.createBody(points);\r\n\t\t};\r\n\t\r\n\t\t/**\r\n\t\t * ブロックの座標を取得する\r\n\t\t * @method getOriginalPointList\r\n\t\t * @return {vector[]} 座標リスト\r\n\t\t */\r\n\t\tConstructor.prototype.getOriginalPointList = function() {\r\n\t\t\tvar ret = [];\r\n\t\r\n\t\t\tvar points = this.pointList;\r\n\t\t\t// 現在位置に変換\r\n\t\t\tvar vec = mathUtil.vecSub2D(this.body.position, this.initialPosition);\r\n\t\r\n\t\t\tpoints.forEach(function(point, i) {\r\n\t\t\t\tvar p = mathUtil.vecAdd2D(point, vec);\r\n\t\t\t\tp = mathUtil.rotate2D(p, this.body.angle, this.body.position);\r\n\t\t\t\tret.push(p);\r\n\t\t\t}, this);\r\n\t\r\n\t\t\treturn ret;\r\n\t\t};\r\n\t\r\n\t\t/**\r\n\t\t * スラッシュ\r\n\t\t * @method slash\r\n\t\t * @param line {vecotr[]} 直線\r\n\t\t * @return {slashCanvas2.model.Block[]} 分割後ブロックリスト(分割されなければ自分自身のみ)\r\n\t\t */\r\n\t\tConstructor.prototype.slash = function(line) {\r\n\t\t\t// オリジナル座標\r\n\t\t\tvar orgPolygon = this.getOriginalPointList();\r\n\t\r\n\t\t\t// 新座標リスト\r\n\t\t\tvar newPolygonList = this._slashLoop(orgPolygon, line);\r\n\t\r\n\t\t\tvar ret = [];\r\n\t\t\tnewPolygonList.forEach(function(polygon) {\r\n\t\t\t\t// 新ブロック作成\r\n\t\t\t\tvar block = new this.constructor();\r\n\t\t\t\t// body生成\r\n\t\t\t\tblock.createBody(polygon);\r\n\t\t\t\t// 情報継承\r\n\t\t\t\tblock.inherit(this);\r\n\t\t\t\tret.push(block);\r\n\t\t\t}, this);\r\n\t\r\n\t\t\t// 分割が発生しているなら動きを加える\r\n\t\t\tif (ret.length > 1) {\r\n\t\t\t\tret.forEach(function(block) {\r\n\t\t\t\t\tblock.addSlashMovement(line);\r\n\t\t\t\t}, this);\r\n\t\t\t}\r\n\t\r\n\t\t\treturn ret;\r\n\t\t};\r\n\t\r\n\t\t/**\r\n\t\t * 情報を受け継ぐ\r\n\t\t * @method inherit\r\n\t\t * @param parent {slashCanvas2.model.Block} 受け継ぎ元\r\n\t\t */\r\n\t\tConstructor.prototype.inherit = function(parent) {\r\n\t\t\t// スタイル\r\n\t\t\tthis.style = parent.style;\r\n\t\r\n\t\t\t// 慣性\r\n\t\t\tvar v = mathUtil.vecSub2D(parent.body.position, parent.body.positionPrev);\r\n\t\r\n\t\t\tthis.body.positionPrev.x -= v.x;\r\n\t\t\tthis.body.positionPrev.y -= v.y;\r\n\t\t\tthis.body.velocity.x = parent.body.velocity.x;\r\n\t\t\tthis.body.velocity.y = parent.body.velocity.y;\r\n\t\t};\r\n\t\r\n\t\t/**\r\n\t\t * スラッシュに伴う動きを加える\r\n\t\t * @method addSlashMovement\r\n\t\t * @param line {vector[2]} スラッシュ線\r\n\t\t */\r\n\t\tConstructor.prototype.addSlashMovement = function(line) {\r\n\t\t\t// スラッシュベクトル\r\n\t\t\tvar slashVec = mathUtil.vecSub2D(line[1], line[0]);\r\n\t\t\t// 重心\r\n\t\t\tvar gravity = mathUtil.gravity2D(this.getOriginalPointList());\r\n\t\t\t// 重心からスラッシュ線への垂線の足\r\n\t\t\tvar pedal = mathUtil.pedalPoint2D(gravity, line);\r\n\t\t\t// 垂線の足から重心へ向かうベクトル(→スラッシュ線と直行するベクトル)\r\n\t\t\tvar crossVec = mathUtil.vecSub2D(gravity, pedal);\r\n\t\r\n\t\t\ttry {\r\n\t\t\t\t// 単位ベクトル変換\r\n\t\t\t\tvar v1 = mathUtil.vecUnit2D(slashVec);\r\n\t\t\t\tvar v2 = mathUtil.vecUnit2D(crossVec);\r\n\t\t\t\t// 比率調整\r\n\t\t\t\tvar random = Math.random();\r\n\t\t\t\tv1 = mathUtil.vecMult2D(v1, 0.00002 + (0.0002 * random));\r\n\t\t\t\tv2 = mathUtil.vecMult2D(v2, 0.0002 + (0.002 * random));\r\n\t\t\t\t// 質量の影響除外\r\n\t\t\t\tv1 = mathUtil.vecMult2D(v1, this.body.mass);\r\n\t\t\t\tv2 = mathUtil.vecMult2D(v2, this.body.mass);\r\n\t\t\t\t// 合成\r\n\t\t\t\tvar puls = mathUtil.vecAdd2D(v1, v2);\n\t\t\t\tpuls = mathUtil.vecMult2D(puls, this.slashMovementPower);\n\t\t\t\t// 適用\r\n\t\t\t\tBody.applyForce(this.body, pedal, puls);\r\n\t\t\t\t// this.body.velocity.x += puls.x;\r\n\t\t\t\t// this.body.velocity.y += puls.y;\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// 0割りエラーなどは無視\r\n\t\t\t}\r\n\t\t};\r\n\t\r\n\t\t/**\r\n\t\t * 面分断再帰処理\r\n\t\t * @method _slashLoop\r\n\t\t * @private\r\n\t\t * @param polygon {vector[]} 面\r\n\t\t * @param line {vector[]} 直線\r\n\t\t * @return {vector[][]} 面リスト\r\n\t\t */\r\n\t\tConstructor.prototype._slashLoop = function(polygon, line) {\r\n\t\t\tvar ret = [];\r\n\t\r\n\t\t\t// 直線が横断するか判定\r\n\t\t\tvar crossList = mathUtil.crossPolygonAndLine(polygon, line);\r\n\t\t\tif (crossList.length > 0) {\r\n\t\t\t\t// 分割\r\n\t\t\t\tvar splitPolygonList = mathUtil.splitPolyByLine(polygon, line);\r\n\t\t\t\tif (splitPolygonList.length > 1) {\r\n\t\t\t\t\tsplitPolygonList.forEach(function(poly) {\r\n\t\t\t\t\t\t// 再帰処理\r\n\t\t\t\t\t\tret = ret.concat(this._slashLoop(poly, line));\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// 分割なし\r\n\t\t\t\t\tret.push(polygon);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// 分割なし\r\n\t\t\t\tret.push(polygon);\r\n\t\t\t}\r\n\t\t\treturn ret;\r\n\t\t};\r\n\t\r\n\t\t//\r\n\t\t// 描画系\r\n\t\t//\r\n\t\r\n\t\tConstructor.prototype.onPaint = function(ctx) {\r\n\t\t\tctx.strokeStyle = this.style.strokeStyle;\r\n\t\t\tctx.lineWidth = this.style.lineWidth;\r\n\t\t\tctx.lineJoin = this.style.lineJoin;\r\n\t\t\tctx.fillStyle = this.style.fillStyle;\r\n\t\t\tctx.setLineDash(this.style.lineDash);\r\n\t\r\n\t\t\tctx.beginPath();\r\n\t\t\tif (this.pointList.length > 1) {\r\n\t\t\t\tthis.getOriginalPointList().forEach(function(p, i) {\r\n\t\t\t\t\tif (i === 0) {\r\n\t\t\t\t\t\tctx.moveTo(p.x, p.y);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tctx.lineTo(p.x, p.y);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this);\r\n\t\t\t}\r\n\t\t\tctx.closePath();\r\n\t\t\tctx.globalAlpha = this.style.fillGlobalAlpha;\r\n\t\t\tctx.fill();\r\n\t\t\tctx.globalAlpha = this.style.strokeGlobalAlpha;\r\n\t\t\tctx.stroke();\r\n\t\t\tctx.globalAlpha = 1;\r\n\t\t};\r\n\t\r\n\t\treturn Constructor;\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {\r\n\t\tvar mathUtil = __webpack_require__(7);\r\n\t\t/**\r\n\t\t * SVG関連処理\r\n\t\t * @class SvgUtil\r\n\t\t * @namespace slashCanvas2\r\n\t\t * @static\r\n\t\t */\r\n\t\tvar util = {\r\n\t\t\t/**\r\n\t\t\t * ベジェ曲線を何本の直線で近似するか\r\n\t\t\t * @property BEZIER_SPLIT_COUNT\r\n\t\t\t * @type {number}\r\n\t\t\t * @default 5\r\n\t\t\t */\r\n\t\t\tBEZIER_SPLIT_COUNT : 5,\r\n\t\r\n\t\t\t/**\r\n\t\t\t * rectタグを解析する\r\n\t\t\t * @method parseRect\r\n\t\t\t * @param svgRect {} SVGのrectタグDOM\r\n\t\t\t * @return {point[]} {x,y}の座標リスト\r\n\t\t\t */\r\n\t\t\tparseRect : function(svgRect) {\r\n\t\t\t\tvar ret = [];\r\n\t\r\n\t\t\t\tvar x = parseFloat(svgRect.attributes.x.value, 10);\r\n\t\t\t\tvar y = parseFloat(svgRect.attributes.y.value, 10);\r\n\t\t\t\tvar width = parseFloat(svgRect.attributes.width.value, 10);\r\n\t\t\t\tvar height = parseFloat(svgRect.attributes.height.value, 10);\r\n\t\r\n\t\t\t\tret.push({x : x, y : y});\r\n\t\t\t\tret.push({x : x + width, y : y});\r\n\t\t\t\tret.push({x : x + width, y : y + height});\r\n\t\t\t\tret.push({x : x, y : y + height});\r\n\t\r\n\t\t\t\treturn ret;\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * pathタグを解析する\r\n\t\t\t * @method parsePath\r\n\t\t\t * @param svgPath {} SVGのpathタグDOM\r\n\t\t\t * @return {point[]} {x,y}の座標リスト\r\n\t\t\t */\r\n\t\t\tparsePath : function(svgPath) {\r\n\t\t\t\tvar ret = [];\r\n\t\r\n\t\t\t\t// d属性分解\r\n\t\t\t\tvar elementList = this.splitD(svgPath.attributes.d.value);\r\n\t\r\n\t\t\t\t// 前回座標\r\n\t\t\t\tvar pastVec = {x:0,y:0};\r\n\t\t\t\t// 前回制御点\r\n\t\t\t\tvar pastControlVec = {x:0,y:0};\r\n\t\t\t\tfor (var i = 0; i < elementList.length; i++) {\r\n\t\t\t\t\tvar current = elementList[i];\r\n\t\t\t\t\tvar pList = [];\r\n\t\t\t\t\tvar b0 = null;\r\n\t\t\t\t\tvar b1 = null;\r\n\t\t\t\t\tvar b2 = null;\r\n\t\t\t\t\tvar b3 = null;\r\n\t\r\n\t\t\t\t\tswitch (current.command) {\r\n\t\t\t\t\t\tcase \"M\":\r\n\t\t\t\t\t\t\t// 初期位置(絶対)\r\n\t\t\t\t\t\t\tpList.push({x : current.x, y : current.y});\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"m\":\r\n\t\t\t\t\t\t\t// 初期位置(相対)\r\n\t\t\t\t\t\t\tpList.push({x : pastVec.x + current.x, y : pastVec.y + current.y});\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"L\":\r\n\t\t\t\t\t\tcase \"H\":\r\n\t\t\t\t\t\tcase \"V\":\r\n\t\t\t\t\t\t\t// 直線(絶対)\r\n\t\t\t\t\t\t\tpList.push({x : current.x, y : current.y});\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"l\":\r\n\t\t\t\t\t\tcase \"h\":\r\n\t\t\t\t\t\tcase \"v\":\r\n\t\t\t\t\t\t\t// 直線(相対)\r\n\t\t\t\t\t\t\tpList.push({x : pastVec.x + current.x, y : pastVec.y + current.y});\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"Q\" :\r\n\t\t\t\t\t\t\t// 制御点準備\r\n\t\t\t\t\t\t\tb0 = pastVec;\r\n\t\t\t\t\t\t\tb1 = {\r\n\t\t\t\t\t\t\t\tx : current.x,\r\n\t\t\t\t\t\t\t\ty : current.y\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tb2 = {\r\n\t\t\t\t\t\t\t\tx : current.x2,\r\n\t\t\t\t\t\t\t\ty : current.y2\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t// 近似\r\n\t\t\t\t\t\t\tpList = mathUtil.approximateBezier([b0, b1, b2], this.BEZIER_SPLIT_COUNT);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"q\" :\r\n\t\t\t\t\t\t\t// 制御点準備\r\n\t\t\t\t\t\t\tb0 = pastVec;\r\n\t\t\t\t\t\t\tb1 = {\r\n\t\t\t\t\t\t\t\tx : b0.x + current.x,\r\n\t\t\t\t\t\t\t\ty : b0.y + current.y\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tb2 = {\r\n\t\t\t\t\t\t\t\tx : b0.x + current.x2,\r\n\t\t\t\t\t\t\t\ty : b0.y + current.y2\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t// 近似\r\n\t\t\t\t\t\t\tpList = mathUtil.approximateBezier([b0, b1, b2], this.BEZIER_SPLIT_COUNT);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"T\" :\r\n\t\t\t\t\t\t\t// 制御点準備\r\n\t\t\t\t\t\t\tb0 = pastVec;\r\n\t\t\t\t\t\t\tb1 = mathUtil.symmetryPoint2D(b0, pastControlVec);\r\n\t\t\t\t\t\t\tb2 = {\r\n\t\t\t\t\t\t\t\tx : current.x,\r\n\t\t\t\t\t\t\t\ty : current.y\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t// 近似\r\n\t\t\t\t\t\t\tpList = mathUtil.approximateBezier([b0, b1, b2], this.BEZIER_SPLIT_COUNT);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"t\" :\r\n\t\t\t\t\t\t\t// 制御点準備\r\n\t\t\t\t\t\t\tb0 = pastVec;\r\n\t\t\t\t\t\t\tb1 = mathUtil.symmetryPoint2D(b0, pastControlVec);\r\n\t\t\t\t\t\t\tb2 = {\r\n\t\t\t\t\t\t\t\tx : b0.x + current.x,\r\n\t\t\t\t\t\t\t\ty : b0.y + current.y\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t// 近似\r\n\t\t\t\t\t\t\tpList = mathUtil.approximateBezier([b0, b1, b2], this.BEZIER_SPLIT_COUNT);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"C\" :\r\n\t\t\t\t\t\t\t// 制御点準備\r\n\t\t\t\t\t\t\tb0 = pastVec;\r\n\t\t\t\t\t\t\tb1 = {\r\n\t\t\t\t\t\t\t\tx : current.x,\r\n\t\t\t\t\t\t\t\ty : current.y\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tb2 = {\r\n\t\t\t\t\t\t\t\tx : current.x2,\r\n\t\t\t\t\t\t\t\ty : current.y2\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tb3 = {\r\n\t\t\t\t\t\t\t\tx : current.x3,\r\n\t\t\t\t\t\t\t\ty : current.y3\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t// 近似\r\n\t\t\t\t\t\t\tpList = mathUtil.approximateBezier([b0, b1, b2, b3], this.BEZIER_SPLIT_COUNT);\r\n\t\t\t\t\t\t\tpList.splice(0, 1);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"c\" :\r\n\t\t\t\t\t\t\t// 制御点準備\r\n\t\t\t\t\t\t\tb0 = pastVec;\r\n\t\t\t\t\t\t\tb1 = {\r\n\t\t\t\t\t\t\t\tx : b0.x + current.x,\r\n\t\t\t\t\t\t\t\ty : b0.y + current.y\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tb2 = {\r\n\t\t\t\t\t\t\t\tx : b0.x + current.x2,\r\n\t\t\t\t\t\t\t\ty : b0.y + current.y2\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tb3 = {\r\n\t\t\t\t\t\t\t\tx : b0.x + current.x3,\r\n\t\t\t\t\t\t\t\ty : b0.y + current.y3\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t// 近似\r\n\t\t\t\t\t\t\tpList = mathUtil.approximateBezier([b0, b1, b2, b3], this.BEZIER_SPLIT_COUNT);\n\t\t\t\t\t\t\tpList.splice(0, 1);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"S\" :\r\n\t\t\t\t\t\t\t// 制御点準備\r\n\t\t\t\t\t\t\tb0 = pastVec;\r\n\t\t\t\t\t\t\tb1 = mathUtil.symmetryPoint2D(b0, pastControlVec);\r\n\t\t\t\t\t\t\tb2 = {\r\n\t\t\t\t\t\t\t\tx : current.x,\r\n\t\t\t\t\t\t\t\ty : current.y\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tb3 = {\r\n\t\t\t\t\t\t\t\tx : current.x2,\r\n\t\t\t\t\t\t\t\ty : current.y2\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t// 近似\r\n\t\t\t\t\t\t\tpList = mathUtil.approximateBezier([b0, b1, b2, b3], this.BEZIER_SPLIT_COUNT);\r\n\t\t\t\t\t\t\tpList.splice(0, 1);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"s\" :\r\n\t\t\t\t\t\t\t// 制御点準備\r\n\t\t\t\t\t\t\tb0 = pastVec;\r\n\t\t\t\t\t\t\tb1 = mathUtil.symmetryPoint2D(b0, pastControlVec);\r\n\t\t\t\t\t\t\tb2 = {\r\n\t\t\t\t\t\t\t\tx : b0.x + current.x,\r\n\t\t\t\t\t\t\t\ty : b0.y + current.y\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tb3 = {\r\n\t\t\t\t\t\t\t\tx : b0.x + current.x2,\r\n\t\t\t\t\t\t\t\ty : b0.y + current.y2\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t// 近似\r\n\t\t\t\t\t\t\tpList = mathUtil.approximateBezier([b0, b1, b2, b3], this.BEZIER_SPLIT_COUNT);\r\n\t\t\t\t\t\t\tpList.splice(0, 1);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t// 無視して次へ\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif (pList.length > 0) {\r\n\t\t\t\t\t\tpastVec = pList[pList.length - 1];\r\n\t\t\t\t\t\tret = ret.concat(pList);\r\n\t\r\n\t\t\t\t\t\tif (pList.length > 1) {\r\n\t\t\t\t\t\t\t// 前回制御点記録\r\n\t\t\t\t\t\t\tpastControlVec = pList[pList.length - 2];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn ret;\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * pathタグd属性文字列を分割する\r\n\t\t\t * @method splitD\r\n\t\t\t * @param dString {string} pathのd要素文字列\r\n\t\t\t * @return {[]} {command, x, y}要素リスト\r\n\t\t\t */\r\n\t\t\tsplitD : function(dString) {\r\n\t\t\t\tvar ret = [];\r\n\t\r\n\t\t\t\t// 全コマンドリスト\r\n\t\t\t\tvar reg = /M|m|L|l|H|h|V|v|C|c|S|s|Q|q|T|t|A|a|Z|z|B|b|R|r/;\r\n\t\t\t\t// 水平コマンド\r\n\t\t\t\tvar hLineReg = /H|h/;\r\n\t\t\t\t// 垂直コマンド\r\n\t\t\t\tvar vLineReg = /V|v/;\r\n\t\t\t\t// 座標１つ以上のコマンド\r\n\t\t\t\tvar onePointReg = /M|m|L|l|T|t|Q|q|C|c/;\r\n\t\t\t\t// 座標２つ以上のコマンド\r\n\t\t\t\tvar twoPointReg = /Q|q|C|c|S|s/;\r\n\t\t\t\t// 座標3つ以上のコマンド\r\n\t\t\t\tvar threePointReg = /C|c/;\r\n\t\r\n\t\t\t\t// 円弧コマンド\r\n\t\t\t\tvar arcReg = /A|a/;\r\n\t\r\n\t\t\t\t// 残り文字列\r\n\t\t\t\tvar current = dString;\r\n\t\r\n\t\t\t\twhile (current.length > 0) {\r\n\t\t\t\t\tvar element = {};\r\n\t\t\t\t\t// コマンド部分)\r\n\t\t\t\t\telement.command = current[0];\r\n\t\t\t\t\tcurrent = current.slice(1);\r\n\t\r\n\t\t\t\t\t// このブロックの情報部分\r\n\t\t\t\t\tvar block = null;\r\n\t\r\n\t\t\t\t\t// 次の要素開始位置\r\n\t\t\t\t\tvar index = current.search(reg);\r\n\t\t\t\t\tif (index === -1) {\r\n\t\t\t\t\t\t// 次の要素なし\r\n\t\t\t\t\t\tblock = current.slice(0);\r\n\t\t\t\t\t\tcurrent = \"\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\tblock = current.slice(0, index);\r\n\t\t\t\t\t\tcurrent = current.slice(index);\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t// 要素分割\r\n\t\t\t\t\tvar strList = block.trim().split(/,| /);\r\n\t\r\n\t\t\t\t\tif (element.command.search(hLineReg) !== -1) {\r\n\t\t\t\t\t\t// 水平\r\n\t\t\t\t\t\telement.x = parseFloat(strList[0], 10);\r\n\t\t\t\t\t\telement.y = 0;\r\n\t\t\t\t\t} else if (element.command.search(vLineReg) !== -1) {\r\n\t\t\t\t\t\t// 垂直\r\n\t\t\t\t\t\telement.x = 0;\r\n\t\t\t\t\t\telement.y = parseFloat(strList[0], 10);\r\n\t\t\t\t\t} else if (element.command.search(arcReg) !== -1) {\r\n\t\t\t\t\t\t// 円弧\r\n\t\t\t\t\t\telement.rx = parseFloat(strList[0], 10);\r\n\t\t\t\t\t\telement.ry = parseFloat(strList[1], 10);\r\n\t\t\t\t\t\telement.xAxisRotation = parseFloat(strList[2], 10);\r\n\t\t\t\t\t\telement.largeArcFlag = parseFloat(strList[3], 10);\r\n\t\t\t\t\t\telement.sweepFlag = parseFloat(strList[4], 10);\r\n\t\t\t\t\t\telement.x = parseFloat(strList[5], 10);\r\n\t\t\t\t\t\telement.y = parseFloat(strList[6], 10);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// 座標１つ\r\n\t\t\t\t\t\tif (element.command.search(onePointReg) !== -1) {\r\n\t\t\t\t\t\t\telement.x = parseFloat(strList[0], 10);\r\n\t\t\t\t\t\t\telement.y = parseFloat(strList[1], 10);\r\n\t\r\n\t\t\t\t\t\t\t// 座標２つ\r\n\t\t\t\t\t\t\tif (element.command.search(twoPointReg) !== -1) {\r\n\t\t\t\t\t\t\t\telement.x2 = parseFloat(strList[2], 10);\r\n\t\t\t\t\t\t\t\telement.y2 = parseFloat(strList[3], 10);\r\n\t\r\n\t\t\t\t\t\t\t\t// 座標3つ\r\n\t\t\t\t\t\t\t\tif (element.command.search(threePointReg) !== -1) {\r\n\t\t\t\t\t\t\t\t\telement.x3 = parseFloat(strList[4], 10);\r\n\t\t\t\t\t\t\t\t\telement.y3 = parseFloat(strList[5], 10);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tret.push(element);\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn ret;\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * pathタグのスタイルを取得する\r\n\t\t\t * @method parseTagStyle\r\n\t\t\t * @param svgPath {} SVGのpathタグDOM\r\n\t\t\t * @return {} スタイルオブジェクト\r\n\t\t\t */\r\n\t\t\tparseTagStyle : function(svgPath) {\r\n\t\t\t\tvar ret = {};\r\n\t\t\t\tvar styleStr = svgPath.attributes.style.value;\r\n\t\t\t\t// 要素分解\r\n\t\t\t\tvar elementList = styleStr.split(\";\");\r\n\t\t\t\telementList.forEach(function(element) {\r\n\t\t\t\t\tvar tmp = element.split(\":\");\r\n\t\t\t\t\tvar key = tmp[0];\r\n\t\t\t\t\tvar val = tmp[1];\r\n\t\r\n\t\t\t\t\tif (key.toLowerCase() === \"fill\") {\r\n\t\t\t\t\t\tret.fillStyle = val;\r\n\t\t\t\t\t} else if (key.toLowerCase() === \"stroke\") {\r\n\t\t\t\t\t\tret.strokeStyle = val;\r\n\t\t\t\t\t} else if (key.toLowerCase() === \"stroke-width\") {\r\n\t\t\t\t\t\tret.lineWidth = parseFloat(val, 10);\r\n\t\t\t\t\t} else if (key.toLowerCase() === \"stroke-opacity\") {\r\n\t\t\t\t\t\tret.strokeGlobalAlpha = parseFloat(val, 10);\r\n\t\t\t\t\t} else if (key.toLowerCase() === \"fill-opacity\") {\r\n\t\t\t\t\t\tret.fillGlobalAlpha = parseFloat(val, 10);\r\n\t\t\t\t\t} else if (key.toLowerCase() === \"stroke-linecap\") {\r\n\t\t\t\t\t\tret.lineCap = val;\r\n\t\t\t\t\t} else if (key.toLowerCase() === \"stroke-linejoin\") {\r\n\t\t\t\t\t\tret.lineJoin = val;\r\n\t\t\t\t\t} else if (key.toLowerCase() === \"stroke-dasharray\") {\r\n\t\t\t\t\t\tvar strArray = val.split(\",\");\r\n\t\t\t\t\t\tret.lineDash = [];\r\n\t\t\t\t\t\tstrArray.forEach(function(str) {\r\n\t\t\t\t\t\t\tret.lineDash.push(parseFloat(str, 10));\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// 無視\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this);\r\n\t\r\n\t\t\t\treturn ret;\r\n\t\t\t},\r\n\t\t};\r\n\t\r\n\t\treturn util;\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function(){\r\n\t\t/**\r\n\t\t * 数学計算クラス\r\n\t\t * @class mathUtil\r\n\t\t */\r\n\t\tvar mathUtil = {\r\n\t\t\t/**\r\n\t\t\t * 0とみなす閾値\r\n\t\t\t * @property MINVALUE\r\n\t\t\t * @type {number}\r\n\t\t\t * @default 0.000001\r\n\t\t\t */\r\n\t\t\tMINVALUE : 0.000001,\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 同一座標判定\r\n\t\t\t * @method isSame2D\r\n\t\t\t * @param a {vector} 座標a\r\n\t\t\t * @param b {vector} 座標b\r\n\t\t\t * @return {bool} 同一である\r\n\t\t\t */\r\n\t\t\tisSame2D : function(a, b) {\r\n\t\t\t\treturn (Math.abs(a.x - b.x) < this.MINVALUE) && (Math.abs(a.y - b.y) < this.MINVALUE);\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 2点の距離を求める\r\n\t\t\t * @method length2D\r\n\t\t\t * @param a {vector} 点a\r\n\t\t\t * @param b {vector} 点b(省略したら原点)\r\n\t\t\t * @return {number} ab間の距離\r\n\t\t\t */\r\n\t\t\tlength2D : function(a, b){\r\n\t\t\t\tb = b || {x:0,y:0};\r\n\t\r\n\t\t\t\tvar dx = (a.x - b.x);\r\n\t\t\t\tvar dy = (a.y - b.y);\r\n\t\r\n\t\t\t\treturn Math.sqrt(dx * dx + dy * dy);\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * ベクトル足し算\r\n\t\t\t * @method vecAdd2D\r\n\t\t\t * @param a {vector} 座標a\r\n\t\t\t * @param b {vector} 座標b\r\n\t\t\t * @return {vector} a + b\r\n\t\t\t */\r\n\t\t\tvecAdd2D : function(a, b){\r\n\t\t\t\treturn {x: a.x + b.x, y: a.y + b.y};\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * ベクトル引き算\r\n\t\t\t * @method vecSub2D\r\n\t\t\t * @param a {vector} 座標a\r\n\t\t\t * @param b {vector} 座標b\r\n\t\t\t * @return {vector} a - b\r\n\t\t\t */\r\n\t\t\tvecSub2D : function(a, b){\r\n\t\t\t\treturn {x: a.x - b.x, y: a.y - b.y};\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * ベクトル掛け算\r\n\t\t\t * @method vecMult2D\r\n\t\t\t * @param a {vector} 座標a\r\n\t\t\t * @param c {number} スカラc\r\n\t\t\t * @return {)ector} a * c\r\n\t\t\t */\r\n\t\t\tvecMult2D : function(a, c){\r\n\t\t\t\treturn {x: a.x * c, y: a.y * c};\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 単位ベクトル取得\r\n\t\t\t * @method vecUnit2D\r\n\t\t\t * @param v {vector} 座標v\r\n\t\t\t * @return {vector} vの単位ベクトル\r\n\t\t\t * @throws {Error} vがゼロベクトルだった場合に発行\r\n\t\t\t */\r\n\t\t\tvecUnit2D : function(v){\r\n\t\t\t\tvar d = this.length2D(v);\r\n\t\r\n\t\t\t\tif (Math.abs(d) < this.MINVALUE) {\r\n\t\t\t\t\tthrow new Error(\"Unit vector cannot be calced from zero vector.\");\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn this.vecMult2D(v, 1/d);\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 外積を求める<br/>\r\n\t\t\t * = |a||b|sinθ\r\n\t\t\t * @method cross2D\r\n\t\t\t * @param a {vector}\r\n\t\t\t * @param b {vector}\r\n\t\t\t * @return {number} 2次元外積\r\n\t\t\t */\r\n\t\t\tcross2D : function(a, b) {\r\n\t\t\t\treturn a.x * b.y - a.y * b.x;\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 内積を求める<br/>\r\n\t\t\t * = |a||b|cosθ\r\n\t\t\t * @method inner2D\r\n\t\t\t * @param a {vector}\r\n\t\t\t * @param b {vector}\r\n\t\t\t * @return {number} 2次元内積\r\n\t\t\t */\r\n\t\t\tinner2D : function(a, b) {\r\n\t\t\t\treturn a.x * b.x + a.y * b.y;\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 座標複製\r\n\t\t\t * @method pointCopy2D\r\n\t\t\t * @param a {vector} 元座標\r\n\t\t\t * @return {vector} 複製座標\r\n\t\t\t */\r\n\t\t\tpointCopy2D : function(a){\r\n\t\t\t\tif (a){\r\n\t\t\t\t\treturn {x: a.x, y: a.y};\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 座標リスト複製\r\n\t\t\t * @param arr {point[]} 元座標リスト\r\n\t\t\t * @return {point[]} 複製座標リスト\r\n\t\t\t */\r\n\t\t\tpointArrayCopy2D : function(arr){\r\n\t\t\t\tvar ret = [];\r\n\t\r\n\t\t\t\tfor (var i = 0; i < arr.length; i++){\r\n\t\t\t\t\tret.push(this.pointCopy2D(arr[i]));\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 中点取得\r\n\t\t\t * @method centralPoint2D\r\n\t\t\t * @param a {vector}\r\n\t\t\t * @param b {vector}\r\n\t\t\t * @return {vector} 中点\r\n\t\t\t */\r\n\t\t\tcentralPoint2D : function(a, b){\r\n\t\t\t\tvar add = this.vecAdd2D(a, b);\r\n\t\t\t\treturn this.vecMult2D(add, 1/2);\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * a点からb点へのラジアンを求める\r\n\t\t\t * @method radian2D\r\n\t\t\t * @param a {vector}\r\n\t\t\t * @param b {vector}\r\n\t\t\t * @return {number} aからbへのラジアン\r\n\t\t\t */\r\n\t\t\tradian2D : function(a, b){\r\n\t\t\t\tvar dx = a.x - b.x;\r\n\t\t\t\tvar dy = a.y - b.y;\r\n\t\t\t\treturn (Math.atan2(dy ,dx) + (Math.PI * 2)) % (Math.PI * 2);\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * a点についてb点から点対称な点cを求める\r\n\t\t\t * @method symmetryPoint2D\r\n\t\t\t * @param a {vector}\r\n\t\t\t * @param b {vector}\r\n\t\t\t * @return {vector} a点についてb点から点対称な点c\r\n\t\t\t */\r\n\t\t\tsymmetryPoint2D : function(a, b){\r\n\t\t\t\tvar ba = this.vecSub2D(b, a);\r\n\t\t\t\tvar c = this.pointCopy2D(a);\r\n\t\t\t\tc.x += ba.x;\r\n\t\t\t\tc.y += ba.y;\r\n\t\t\t\treturn c;\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * a点をbを基準にrad回転する\r\n\t\t\t * @param a {vector} a点\r\n\t\t\t * @param rad {number} 回転ラジアン\r\n\t\t\t * @param b {vector} 基準点(省略なら原点)\r\n\t\t\t * @return {vector} 回転後の点\r\n\t\t\t */\r\n\t\t\trotate2D : function(a, rad, b) {\r\n\t\t\t\tb = b || {x:0,y:0};\r\n\t\r\n\t\t\t\ta = this.vecSub2D(a, b);\r\n\t\t\t\tvar d = this.length2D(a);\r\n\t\t\t\tvar ret = {};\r\n\t\t\t\tret.x = Math.cos(rad) * a.x - Math.sin(rad) * a.y;\r\n\t\t\t\tret.y = Math.sin(rad) * a.x + Math.cos(rad) * a.y;\r\n\t\t\t\tret = this.vecAdd2D(ret, b);\r\n\t\t\t\treturn ret;\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 2次方程式の解の公式\r\n\t\t\t * a * x^2 + b * x + c = 0\r\n\t\t\t * 解に虚数が含まれる場合は解なし扱い\r\n\t\t\t * @method solveEquationOrder2\r\n\t\t\t * @param a {number}\r\n\t\t\t * @param b {number}\r\n\t\t\t * @param c {number}\r\n\t\t\t * @return {[x, y, z]} 解の配列\r\n\t\t\t */\r\n\t\t\tsolveEquationOrder2 : function(a, b, c) {\r\n\t\t\t\tif(a === 0) {\r\n\t\t\t\t\treturn b === 0 ? [] : [-c / b];\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar d = b * b - 4 * a * c;\r\n\t\t\t\tif(d < 0) return [];\r\n\t\r\n\t\t\t\tvar ia = 0.5 / a;\r\n\t\r\n\t\t\t\tif(d === 0) {\r\n\t\t\t\t\treturn [-b * ia];\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar sd = Math.sqrt(d);\r\n\t\t\t\treturn [(-b + sd) * ia, (-b - sd) * ia];\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 点から最短となる直線上の点を求める\r\n\t\t\t * @method pedalPoint2D\r\n\t\t\t * @param p {vector} 点p\r\n\t\t\t * @param line {array} 直線上の2点AB\r\n\t\t\t * @return {vector} 最短の点\r\n\t\t\t */\r\n\t\t\tpedalPoint2D : function(P, line){\r\n\t\t\t\tvar A = line[0];\r\n\t\t\t\tvar B = line[1];\r\n\t\t\t\tvar vecAB = this.vecSub2D(B, A);\r\n\t\t\t\tvar vecAP = this.vecSub2D(P, A);\r\n\t\t\t\tvar cross = this.inner2D(vecAB, vecAP);\r\n\t\t\t\tvar rate = cross / this.inner2D(vecAB, vecAB);\r\n\t\t\t\treturn this.vecAdd2D(A, this.vecMult2D(vecAB, rate));\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 二次ベジェ曲線と直線の当たり判定用パラメータを取得する\r\n\t\t\t * @method _rayToBezier2\r\n\t\t\t * @private\r\n\t\t\t * @param p0 {vector} ベジェ曲線始点\r\n\t\t\t * @param p1 {vector} ベジェ曲線制御点\r\n\t\t\t * @param p2 {vector} ベジェ曲線終点\r\n\t\t\t * @param p {vector} 直線始点\r\n\t\t\t * @param q {vector} 直線終点\r\n\t\t\t * @return {[a, b, c]} ベジェ曲線パラメータ配列\r\n\t\t\t */\r\n\t\t\t_rayToBezier2 : function(p0, p1, p2, p, q) {\r\n\t\t\t\tvar vx = q.x - p.x,\r\n\t\t\t\t\tvy = q.y - p.y,\r\n\t\t\t\t\ta = p0.x - 2 * p1.x + p2.x,\r\n\t\t\t\t\tb = 2 * (p1.x - p0.x),\r\n\t\t\t\t\tc = p0.x,\r\n\t\t\t\t\td = p0.y - 2 * p1.y + p2.y,\r\n\t\t\t\t\te = 2 * (p1.y - p0.y),\r\n\t\t\t\t\tf = p0.y;\r\n\t\r\n\t\t\t\tvar t = this.solveEquationOrder2(\r\n\t\t\t\t\ta * vy - vx * d,\r\n\t\t\t\t\tb * vy - vx * e,\r\n\t\t\t\t\tvy * c - vy * p.x - vx * f + vx * p.y\r\n\t\t\t\t);\r\n\t\r\n\t\t\t\treturn t;\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 二次ベジェ曲「線分」と「直線」の交点を取得する\r\n\t\t\t * @method crossLineAndBezier\r\n\t\t\t * @param p0 {vector} ベジェ曲線始点\r\n\t\t\t * @param p1 {vector} ベジェ曲線制御点\r\n\t\t\t * @param p2 {vector} ベジェ曲線終点\r\n\t\t\t * @param p {vector} 直線始点\r\n\t\t\t * @param q {vector} 直線終点\r\n\t\t\t * @return {vector[]} 交点リスト\r\n\t\t\t */\r\n\t\t\tcrossLineAndBezier : function(p0, p1, p2, p, q){\r\n\t\t\t\t// パラメータ取得\r\n\t\t\t\tvar t = this._rayToBezier2(p0, p1, p2, p, q);\r\n\t\r\n\t\t\t\tvar vx = q.x - p.x,\r\n\t\t\t\t\tvy = q.y - p.y;\r\n\t\r\n\t\t\t\tvar ret = [];\r\n\t\t\t\tfor (var i = 0; i < t.length; i++){\r\n\t\t\t\t\tif (0 <= t[i] && t[i] <= 1){\r\n\t\t\t\t\t\t// ベジェ曲線分上の点を求める\r\n\t\t\t\t\t\tret.push({\r\n\t\t\t\t\t\t\tx: (p2.x - 2 * p1.x + p0.x) * t[i] * t[i] + 2 * (p1.x - p0.x) * t[i] + p0.x,\r\n\t\t\t\t\t\t\ty: (p2.y - 2 * p1.y + p0.y) * t[i] * t[i] + 2 * (p1.y - p0.y) * t[i] + p0.y,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 座標郡を囲む矩形を取得する<br>\r\n\t\t\t * 境界上に重なる\r\n\t\t\t * @method aroundRectangle\r\n\t\t\t * @param arr {vector[]} 座標郡\r\n\t\t\t * @return {x,y,width,height} 矩形情報\r\n\t\t\t */\r\n\t\t\taroundRectangle : function(arr){\r\n\t\t\t\tvar xList = [];\r\n\t\t\t\tvar yList = [];\r\n\t\r\n\t\t\t\tarr.forEach(function(p) {\r\n\t\t\t\t\txList.push(p.x);\r\n\t\t\t\t\tyList.push(p.y);\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\tvar min = {\r\n\t\t\t\t\tx : Math.min.apply(null, xList),\r\n\t\t\t\t\ty : Math.min.apply(null, yList)\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tvar max = {\r\n\t\t\t\t\tx : Math.max.apply(null, xList),\r\n\t\t\t\t\ty : Math.max.apply(null, yList)\r\n\t\t\t\t\t};\r\n\t\r\n\t\t\t\treturn {\r\n\t\t\t\t\tx : min.x,\r\n\t\t\t\t\ty : min.y,\r\n\t\t\t\t\twidth : max.x - min.x,\r\n\t\t\t\t\theight : max.y - min.y,\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 座標群を囲む矩形の中心を取得する\r\n\t\t\t * @method centerOfAroundRectangle\r\n\t\t\t * @param arr {vector[]} 座標群\r\n\t\t\t * @return {vector} 中心座標\r\n\t\t\t */\r\n\t\t\tcenterOfAroundRectangle : function(arr){\r\n\t\t\t\tvar lec = this.aroundRectangle(arr);\r\n\t\t\t\treturn {\r\n\t\t\t\t\tx : lec.x + (lec.width / 2),\r\n\t\t\t\t\ty : lec.y + (lec.height / 2),\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 点が三角形内にあるかを判定する<br>\r\n\t\t\t * 境界も含む\r\n\t\t\t * @method isPointOnTriangle\r\n\t\t\t * @param tri {vector[3]} 三角形\r\n\t\t\t * @param p {vector} 点\r\n\t\t\t * @return {bool} 内部にあるフラグ\r\n\t\t\t */\r\n\t\t\tisPointOnTriangle : function(tri, p) {\r\n\t\t\t\t// 三角形の3つのベクトル\r\n\t\t\t\tvar ab = this.vecSub2D(tri[1], tri[0]);\r\n\t\t\t\tvar bc = this.vecSub2D(tri[2], tri[1]);\r\n\t\t\t\tvar ca = this.vecSub2D(tri[0], tri[2]);\r\n\t\r\n\t\t\t\t// 三角形の各点からpへのベクトル\r\n\t\t\t\tvar ap = this.vecSub2D(p, tri[0]);\r\n\t\t\t\tvar bp = this.vecSub2D(p, tri[1]);\r\n\t\t\t\tvar cp = this.vecSub2D(p, tri[2]);\r\n\t\r\n\t\t\t\t// 外積を求める\r\n\t\t\t\tvar crossABP = this.cross2D(ab, bp);\r\n\t\t\t\tvar crossBCP = this.cross2D(bc, cp);\r\n\t\t\t\tvar crossCAP = this.cross2D(ca, ap);\r\n\t\r\n\t\t\t\t// 外積の符号が全て同じなら内部にある\r\n\t\t\t\t// 0も含む→境界も含む\r\n\t\t\t\tif ((crossABP >= 0 && crossBCP >= 0 && crossCAP >= 0) ||\r\n\t\t\t\t\t(crossABP <= 0 && crossBCP <= 0 && crossCAP <= 0)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 面に点が含まれているか判定する\r\n\t\t\t * 境界を含む判定\r\n\t\t\t * @method isPointOnArea\r\n\t\t\t * @param arr {vector[]} 面の座標群\r\n\t\t\t * @param point {vector} 対象点\r\n\t\t\t * @return {bool} 含まれているならtrue\r\n\t\t\t */\r\n\t\t\tisPointOnArea : function(area, point){\r\n\t\t\t\tvar i = 0;\r\n\t\r\n\t\t\t\t// 判定対象線分取得\r\n\t\t\t\tvar lines = [];\r\n\t\t\t\tfor (i = 0; i < area.length; i++){\r\n\t\t\t\t\tvar p1 = area[i % area.length];\r\n\t\t\t\t\tvar p2 = area[(i + 1) % area.length];\r\n\t\t\t\t\tif (p1.x >= point.x || p2.x >= point.x){\r\n\t\t\t\t\t\t// 保存\r\n\t\t\t\t\t\tlines.push([p1, p2]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// TODO 線分上判定\r\n\t\r\n\t\t\t\tvar count = 0;\r\n\t\t\t\tfor (i = 0; i < lines.length; i++){\r\n\t\t\t\t\t// x方向で交わった線分をカウントする\r\n\t\r\n\t\t\t\t\t// エリアの最大となるx座標を求める\r\n\t\t\t\t\tvar rec = this.aroundRectangle(area);\r\n\t\t\t\t\tvar max = rec.x + rec.width;\r\n\t\r\n\t\t\t\t\tif (this.isCrossSegAndSeg([point, {x: max, y:point.y}], lines[i])){\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn (count % 2) === 1;\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * ベジェ曲線を含む面に点が含まれるか判定\r\n\t\t\t * area[0]とarea[1]の制御点はbezier[1]となる\r\n\t\t\t * areaの最後と最初の制御点はbezier[0]となる\r\n\t\t\t * 制御点がない部分はbezier内のその要素にnullを入れること\r\n\t\t\t * @method isPointOnBezierArea\r\n\t\t\t * @param area {vector[]} 面の座標\r\n\t\t\t * @param bezier {vector[]} 制御点\r\n\t\t\t * @param {vector} 判定する点\r\n\t\t\t * @return {bool} 含まれているならtrue\r\n\t\t\t */\r\n\t\t\tisPointOnBezierArea : function(area, bezier, point){\r\n\t\t\t\tvar i = 0;\r\n\t\t\t\tvar p0 = null;\r\n\t\t\t\tvar p1 = null;\r\n\t\t\t\tvar p2 = null;\r\n\t\r\n\t\t\t\tvar pointCount = area.length;\r\n\t\t\t\t// 判定対象線分取得\r\n\t\t\t\tvar lines = [];\r\n\t\t\t\tvar bezierLines = [];\r\n\t\t\t\tfor (i = 0; i < pointCount; i++){\r\n\t\t\t\t\tp1 = area[i % pointCount];\r\n\t\t\t\t\tp2 = area[(i + 1) % pointCount];\r\n\t\t\t\t\t//if (p1.x >= point.x || p2.x >= point.x){\r\n\t\t\t\t\tif (true){\r\n\t\t\t\t\t\t// ベジェは分ける\r\n\t\t\t\t\t\tif (bezier[(i + 1) % pointCount]){\r\n\t\t\t\t\t\t\tbezierLines.push([p1, bezier[(i + 1) % pointCount], p2]);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tlines.push([p1, p2]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// 交わった合計\r\n\t\t\t\tvar count = 0;\r\n\t\r\n\t\t\t\t// エリアの最大となるx座標を求める\r\n\t\t\t\tvar rec = this.aroundRectangle(area);\r\n\t\t\t\t// x方向に伸ばす\r\n\t\t\t\tvar max = (rec.x + rec.width) * 10;\r\n\t\t\t\tvar rightP = {x: max, y:point.y};\r\n\t\r\n\t\t\t\t// 直線を判定\r\n\t\t\t\tfor (i = 0; i < lines.length; i++){\r\n\t\t\t\t\t// x方向で交わった線分をカウントする\r\n\t\t\t\t\tif (this.isCrossSegAndSeg([point, rightP], lines[i])){\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// ベジェを判定\r\n\t\t\t\tfor (i = 0; i < bezierLines.length; i++){\r\n\t\t\t\t\t// x方向で交わった線分をカウントする\r\n\t\t\t\t\tp0 = bezierLines[i][0];\r\n\t\t\t\t\tp1 = bezierLines[i][1];\r\n\t\t\t\t\tp2 = bezierLines[i][2];\r\n\t\r\n\t\t\t\t\t// 直線とベジェ曲線分の交点取得(なし、1点、2点の場合あり)\r\n\t\t\t\t\tvar crossPs = this.crossLineAndBezier(p0, p1, p2, point, rightP);\r\n\t\r\n\t\t\t\t\t// 交点数分だけ線分内か判定\r\n\t\t\t\t\tfor (var j = 0; j < crossPs.length; j++){\r\n\t\t\t\t\t\tif (crossPs[j].x >= point.x){\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// 交点数が奇数なら面内となる\r\n\t\t\t\treturn (count % 2) === 1;\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 線分と線分の交差判定\r\n\t\t\t * 線分同士が重なっている場合は交差なし扱い\r\n\t\t\t * @method isCrossSegAndSeg\r\n\t\t\t * @param ab {vector[]} 線分ab\r\n\t\t\t * @param cd {vector[]} 線分cd\r\n\t\t\t * @return {bool} 交差ありフラグ\r\n\t\t\t */\r\n\t\t\tisCrossSegAndSeg : function(ab, cd) {\r\n\t\t\t\treturn this._isCrossSegAndSeg(ab[0].x, ab[0].y, ab[1].x, ab[1].y, cd[0].x, cd[0].y, cd[1].x, cd[1].y);\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 線分と線分の交差判定\r\n\t\t\t * 線分同士が重なっている場合は交差なし扱い\r\n\t\t\t * @method _isCrossSegAndSeg\r\n\t\t\t * @private\r\n\t\t\t * @param ax {number}\r\n\t\t\t * @param ay {number}\r\n\t\t\t * @param bx {number}\r\n\t\t\t * @param by {number}\r\n\t\t\t * @param cx {number}\r\n\t\t\t * @param cy {number}\r\n\t\t\t * @param dx {number}\r\n\t\t\t * @param dy {number}\r\n\t\t\t * @return {bool} 交差ありフラグ\r\n\t\t\t */\r\n\t\t\t_isCrossSegAndSeg : function(ax, ay, bx, by, cx, cy, dx, dy) {\r\n\t\t\t\tvar ta = (cx - dx) * (ay - cy) + (cy - dy) * (cx - ax);\r\n\t\t\t\tvar tb = (cx - dx) * (by - cy) + (cy - dy) * (cx - bx);\r\n\t\t\t\tvar tc = (ax - bx) * (cy - ay) + (ay - by) * (ax - cx);\r\n\t\t\t\tvar td = (ax - bx) * (dy - ay) + (ay - by) * (ax - dx);\r\n\t\r\n\t\t\t\treturn tc * td < 0 && ta * tb < 0;\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 直線と線分の交差判定\r\n\t\t\t * @method isCrossLineAndSeg\r\n\t\t\t * @param line {vector[]} 直線\r\n\t\t\t * @param seg {vector[]} 線分\r\n\t\t\t * @return {bool} 交差ありフラグ\r\n\t\t\t */\r\n\t\t\tisCrossLineAndSeg : function(line, seg){\r\n\t\t\t\tvar c0 = this.cross2D(line[0], this.vecSub2D(seg[0], line[1]));\r\n\t\t\t\tvar c1 = this.cross2D(line[0], this.vecSub2D(seg[1], line[1]));\r\n\t\t\t\tif(c0 * c1 < 0) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 平行判定\r\n\t\t\t * @method isParallel\r\n\t\t\t * @param ab {vector[]} ベクトル or 2点の配列\r\n\t\t\t * @param cd {vector[]} 同上\r\n\t\t\t * @return {bool} 平行であるフラグ\r\n\t\t\t */\r\n\t\t\tisParallel : function(ab, cd){\r\n\t\t\t\tab = !Array.isArray(ab) ? ab : this.vecSub2D(ab[1], ab[0]);\r\n\t\t\t\tcd = !Array.isArray(cd) ? cd : this.vecSub2D(cd[1], cd[0]);\r\n\t\r\n\t\t\t\tvar cross = this.cross2D(ab, cd);\r\n\t\t\t\tif (Math.abs(cross) < this.MINVALUE){\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 面と直線の交点取得\r\n\t\t\t * @method crossPolygonAndLine\r\n\t\t\t * @param pol {vector[]} 面\r\n\t\t\t * @param line {vector[]} 直線\r\n\t\t\t * @return {vector[]} 交点リスト)\r\n\t\t\t */\r\n\t\t\tcrossPolygonAndLine : function(pol, line){\r\n\t\t\t\tvar ret = [];\r\n\t\t\t\tvar length = pol.length;\r\n\t\t\t\tfor (var i = 0; i < length; i++){\r\n\t\t\t\t\t// 辺取得\r\n\t\t\t\t\tvar targetLine = [pol[i], pol[(i + 1) % length]];\r\n\t\t\t\t\t// 交点取得\r\n\t\t\t\t\tvar p = this.crossSegAndLine(targetLine, line);\r\n\t\t\t\t\tif (p !== null){\r\n\t\t\t\t\t\tret.push(p);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 点が直線上にあるか判定\r\n\t\t\t * @method isOnLine\r\n\t\t\t * @param p {vector} 点\r\n\t\t\t * @param line {vector[]} 直線\r\n\t\t\t * @return {bool} あるフラグ\r\n\t\t\t */\r\n\t\t\tisOnLine : function(p, line) {\r\n\t\t\t\tvar pedal = this.pedalPoint2D(p, line);\r\n\t\r\n\t\t\t\treturn (this.isSame2D(p, pedal));\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 線分と直線の交点取得\r\n\t\t\t * @method crossSegAndLine\r\n\t\t\t * @param ab {vector[]} 線分\r\n\t\t\t * @param cd {vectod[]} 直線\r\n\t\t\t * @return {vector} 交点\r\n\t\t\t */\r\n\t\t\tcrossSegAndLine : function(ab, cd){\r\n\t\t\t\tif (this.isParallel(ab, cd)){\r\n\t\t\t\t\t// 平行判定\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// 端点判定\r\n\t\t\t\tif (this.isOnLine(ab[0], cd)) {\r\n\t\t\t\t\treturn this.pointCopy2D(ab[0]);\r\n\t\t\t\t}\r\n\t\t\t\tif (this.isOnLine(ab[1], cd)) {\r\n\t\t\t\t\treturn this.pointCopy2D(ab[1]);\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar s1 = ((cd[1].x - cd[0].x) * (ab[0].y - cd[0].y) - (cd[1].y - cd[0].y) * (ab[0].x - cd[0].x)) / 2;\r\n\t\t\t\tvar s2 = ((cd[1].x - cd[0].x) * (cd[0].y - ab[1].y) - (cd[1].y - cd[0].y) * (cd[0].x - ab[1].x)) / 2;\r\n\t\r\n\t\t\t\tvar rate = s1 / (s1 + s2);\r\n\t\r\n\t\t\t\tif (0 < rate && rate < 1){\r\n\t\t\t\t\tvar p = {\r\n\t\t\t\t\t\tx: ab[0].x + (ab[1].x - ab[0].x) * rate,\r\n\t\t\t\t\t\ty: ab[0].y + (ab[1].y - ab[0].y) * rate\r\n\t\t\t\t\t};\r\n\t\r\n\t\t\t\t\treturn p;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * ポリゴンを直線で分割する\r\n\t\t\t * @method splitPolyByLine\r\n\t\t\t * @param pol {vector[]} 面\r\n\t\t\t * @param line {vector[]} 直線\r\n\t\t\t * @return {vector[][]} 分割された点配列の配列\r\n\t\t\t */\r\n\t\t\tsplitPolyByLine : function(pol, line){\r\n\t\t\t\tvar self = this;\r\n\t\t\t\tvar points = [];\r\n\t\t\t\tvar crossIndex = [];\r\n\t\t\t\tvar crossList = [];\r\n\t\t\t\tvar i = 0;\r\n\t\r\n\t\t\t\tvar length = pol.length;\r\n\t\t\t\tfor (i = 0; i < length; i++){\r\n\t\t\t\t\t// 辺取得\r\n\t\t\t\t\tvar targetLine = [pol[i % length], pol[(i + 1) % length]];\r\n\t\t\t\t\t// 交点取得\r\n\t\t\t\t\tvar p = this.crossSegAndLine(targetLine, line);\r\n\t\r\n\t\t\t\t\t// 点追加\r\n\t\t\t\t\tpoints.push(pol[i % length]);\r\n\t\t\t\t\tif (p !== null){\r\n\t\t\t\t\t\t// 交点追加\r\n\t\t\t\t\t\tpoints.push(p);\r\n\t\t\t\t\t\t// 交点インデックス保存\r\n\t\t\t\t\t\tcrossIndex.push(i + 1 + crossIndex.length);\r\n\t\r\n\t\t\t\t\t\t// 交点をとっておく\r\n\t\t\t\t\t\tcrossList.push(p);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// 交点数チェック\r\n\t\t\t\tif (crossList.length % 2 !== 0) {\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// 交点を2つに絞る→直線のベクトルソート\r\n\t\t\t\tvar rad = this.radian2D(line[0], line[1]);\r\n\t\t\t\tvar lengthList = [];\r\n\t\t\t\t// 近い順に並べる\r\n\t\t\t\tcrossList.sort(function(a, b) {\r\n\t\t\t\t\ta = self.rotate2D(a, -rad);\r\n\t\t\t\t\tb = self.rotate2D(b, -rad);\r\n\t\r\n\t\t\t\t\treturn a.x - b.x;\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\t// 面の辺と同一ではないものを採用\r\n\t\t\t\tvar targetSection = [];\r\n\t\t\t\tfor (var k = 0; k < crossList.length - 1;) {\r\n\t\t\t\t\tvar section = [crossList[k], crossList[k + 1]];\r\n\t\t\t\t\tvar sameSeg = false;\r\n\t\r\n\t\t\t\t\tfor (var l = 0; l < pol.length; l++) {\r\n\t\t\t\t\t\tif (this.isSameSeg2D(section, [pol[l], pol[(l + 1) % pol.length]])) {\r\n\t\t\t\t\t\t\t// 一致する\r\n\t\t\t\t\t\t\tsameSeg = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif (!sameSeg) {\r\n\t\t\t\t\t\t// 採用\r\n\t\t\t\t\t\ttargetSection = section;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tk += 2;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif (targetSection.length !== 2) {\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// 除外対象回収\r\n\t\t\t\tvar dropList = crossList.concat();\r\n\t\t\t\tvar tmpIndex = dropList.indexOf(targetSection[0]);\r\n\t\t\t\tif (tmpIndex !== -1) {\r\n\t\t\t\t\tdropList.splice(tmpIndex, 1);\r\n\t\t\t\t}\r\n\t\t\t\ttmpIndex = dropList.indexOf(targetSection[1]);\r\n\t\t\t\tif (tmpIndex !== -1) {\r\n\t\t\t\t\tdropList.splice(tmpIndex, 1);\r\n\t\t\t\t}\r\n\t\t\t\tvar tmpList = points.concat();\r\n\t\t\t\tdropList.forEach(function(p) {\r\n\t\t\t\t\t// 除外\r\n\t\t\t\t\tvar i = tmpList.indexOf(p);\r\n\t\t\t\t\ttmpList.splice(i, 1);\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\tpoints = tmpList;\r\n\t\t\t\tcrossList = targetSection;\r\n\t\r\n\t\t\t\tvar i0 = points.indexOf(crossList[0]);\r\n\t\t\t\tvar i1 = points.indexOf(crossList[1]);\r\n\t\r\n\t\t\t\tif (i0 === -1 || i1 === -1) {\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tcrossIndex = [];\r\n\t\t\t\tcrossIndex[0] = Math.min(i0, i1);\r\n\t\t\t\tcrossIndex[1] = Math.max(i0, i1);\r\n\t\r\n\t\t\t\t// 分割\r\n\t\t\t\tvar ret = [];\r\n\t\r\n\t\t\t\tif (crossIndex.length == 2){\r\n\t\t\t\t\t// 1つ目\r\n\t\t\t\t\tvar splitPol = [];\r\n\t\t\t\t\t// 交点まで追加\r\n\t\t\t\t\tfor (i = 0; i <= crossIndex[0]; i++){\r\n\t\t\t\t\t\tsplitPol.push({\r\n\t\t\t\t\t\t\tx: points[i].x,\r\n\t\t\t\t\t\t\ty: points[i].y,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// 交点から追加\r\n\t\t\t\t\tfor (i = crossIndex[1]; i < points.length; i++){\r\n\t\t\t\t\t\tsplitPol.push({\r\n\t\t\t\t\t\t\tx: points[i].x,\r\n\t\t\t\t\t\t\ty: points[i].y,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// 確定\r\n\t\t\t\t\tret.push(splitPol);\r\n\t\t\t\t\tsplitPol = [];\r\n\t\r\n\t\t\t\t\t// 2つ目\r\n\t\t\t\t\t// 交点から交点まで追加\r\n\t\t\t\t\tfor (i = crossIndex[0]; i <= crossIndex[1]; i++){\r\n\t\t\t\t\t\tsplitPol.push({\r\n\t\t\t\t\t\t\tx: points[i].x,\r\n\t\t\t\t\t\t\ty: points[i].y,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// 確定\r\n\t\t\t\t\tret.push(splitPol);\r\n\t\t\t\t\tsplitPol = [];\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn ret;\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 隣り合う同一点をオミットする\r\n\t\t\t * @method omitSamePoint\r\n\t\t\t * @param polygon {vector[]}\r\n\t\t\t * @return {vector[]} オミット後のポリゴン\r\n\t\t\t */\r\n\t\t\tomitSamePoint : function(polygon) {\r\n\t\t\t\tvar ret = polygon.concat();\r\n\t\r\n\t\t\t\t// サイズ\r\n\t\t\t\tvar size = polygon.length;\r\n\t\t\t\t// 同一点探す\r\n\t\t\t\tfor (var i = 0; i < size; i++) {\r\n\t\t\t\t\tvar p1 = ret[i];\r\n\t\t\t\t\tvar p2 = ret[(i + 1) % size];\r\n\t\t\t\t\tif (this.isSame2D(p1, p2)) {\r\n\t\t\t\t\t\t// 同一\r\n\t\t\t\t\t\tret.splice(i, 1);\r\n\t\t\t\t\t\t// 再帰\r\n\t\t\t\t\t\tret = this.omitSamePoint(ret);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn ret;\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 三角分割\r\n\t\t\t * @method triangleSplit\r\n\t\t\t * @param polygon {vector[]} 面\r\n\t\t\t * @return {vector[][]} 分割面リスト\r\n\t\t\t */\r\n\t\t\ttriangleSplit : function(polygon) {\r\n\t\t\t\tvar self = this;\r\n\t\t\t\t// 時計周りに揃える\r\n\t\t\t\tpolygon = this.convertLoopwise(polygon);\r\n\t\r\n\t\t\t\t// ポリゴン複製\r\n\t\t\t\tvar targetPoly = polygon.concat();\r\n\t\r\n\t\t\t\t// 最遠点のインデックス\r\n\t\t\t\tvar farthestIndex = 0;\r\n\t\t\t\t// 現在の最遠点と前後点で作った三角形の外積\r\n\t\t\t\tvar currentCross = 0;\r\n\t\t\t\t// 分割後の面リスト\r\n\t\t\t\tvar triangleList = [];\r\n\t\r\n\t\t\t\t// ループ\r\n\t\t\t\twhile (targetPoly.length >= 3) {\r\n\t\t\t\t\t// 最遠点インデックス取得\r\n\t\t\t\t\tvar sorted = targetPoly.concat()\r\n\t\t\t\t\tsorted.sort(function(a, b) {\r\n\t\t\t\t\t\treturn self.length2D(b) - self.length2D(a);\r\n\t\t\t\t\t})\r\n\t\t\t\t\tfarthestIndex = targetPoly.indexOf(sorted[0]);\r\n\t\r\n\t\t\t\t\t// 分割実行\r\n\t\t\t\t\tvar tri = this._getTriangle(targetPoly, farthestIndex);\r\n\t\t\t\t\tif (!tri) {\r\n\t\t\t\t\t\t// 最遠点では失敗\r\n\t\t\t\t\t\tvar size = targetPoly.length;\r\n\t\t\t\t\t\t// 外積計算\r\n\t\t\t\t\t\tvar pa = this.vecSub2D(targetPoly[(farthestIndex + 1) % size], targetPoly[farthestIndex]);\r\n\t\t\t\t\t\tvar pb = this.vecSub2D(targetPoly[(farthestIndex - 1 < 0) ? size - 1 : farthestIndex - 1], targetPoly[farthestIndex]);\r\n\t\r\n\t\t\t\t\t\tcurrentCross = this.cross2D(pa, pb);\r\n\t\r\n\t\t\t\t\t\tvar index = farthestIndex;\r\n\t\t\t\t\t\t// 最遠点以外で探す\r\n\t\t\t\t\t\twhile (!tri) {\r\n\t\t\t\t\t\t\tindex = (index + 1) % size;\r\n\t\t\t\t\t\t\t// 最遠点の外積と同じ符号かを判定\r\n\t\t\t\t\t\t\tvar v1 = this.vecSub2D(targetPoly[(index + 1) % size], targetPoly[index]);\r\n\t\t\t\t\t\t\tvar v2 = this.vecSub2D(targetPoly[(index - 1 < 0) ? size - 1 : index - 1], targetPoly[index]);\r\n\t\t\t\t\t\t\tvar tmpCross = this.cross2D(v1, v2);\r\n\t\t\t\t\t\t\tif (tmpCross * currentCross > 0) {\r\n\t\t\t\t\t\t\t\t// 判定続行\r\n\t\t\t\t\t\t\t\ttri = this._getTriangle(targetPoly, index);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t// 採用された点を削除\r\n\t\t\t\t\t\ttargetPoly.splice(index, 1);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// 最遠点削除\r\n\t\t\t\t\t\ttargetPoly.splice(farthestIndex, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttriangleList.push(tri);\r\n\t\t\t\t}\r\n\t\t\t\treturn triangleList;\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 面から三角形を取得する\r\n\t\t\t * @method _getTriangle\r\n\t\t\t * @private\r\n\t\t\t * @param polygon {vector[]} 面\r\n\t\t\t * @param index {number} このインデックスの点とその両側の点で三角形を作る\r\n\t\t\t * @return {vector[]} 三角形、内部に入り込む点がある場合はnull\r\n\t\t\t */\r\n\t\t\t_getTriangle : function(polygon, index) {\r\n\t\t\t\t// indexとその前後点で三角形作成\r\n\t\t\t\tvar size = polygon.length;\r\n\t\t\t\tvar p0 = polygon[index];\r\n\t\t\t\tvar p1 = polygon[(index + 1) % size];\r\n\t\t\t\tvar p2 = polygon[(index - 1 < 0) ? size - 1 : index - 1];\r\n\t\r\n\t\t\t\tvar tri = [p0, p1, p2];\r\n\t\r\n\t\t\t\t// 内部に点が入り込まないか判定\r\n\t\t\t\tpolygon.some(function(p) {\r\n\t\t\t\t\tif (p !== p0 && p !== p1 && p !== p2) {\r\n\t\t\t\t\t\tif (this.isPointOnTriangle(tri, p)) {\r\n\t\t\t\t\t\t\t// 失敗\r\n\t\t\t\t\t\t\ttri = null;\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this);\r\n\t\r\n\t\t\t\treturn tri;\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 面積取得\r\n\t\t\t * @method area\r\n\t\t\t * @param polygon {vector[]} 面\r\n\t\t\t * @param allowNegative {bool} 負値を許すフラグ\r\n\t\t\t * @return {number} 面積\r\n\t\t\t */\r\n\t\t\tarea : function(polygon, allowNegative) {\r\n\t\t\t\tvar area = 0;\r\n\t\r\n\t\t\t\tif (polygon.length > 2) {\r\n\t\t\t\t\tvar size = polygon.length;\r\n\t\t\t\t\tfor (var i = 0; i < size - 1; i++) {\r\n\t\t\t\t\t\tarea += (polygon[i].x - polygon[i + 1].x) * (polygon[i].y + polygon[i + 1].y);\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t// 最後分\r\n\t\t\t\t\tarea += (polygon[size - 1].x - polygon[0].x) * (polygon[size - 1].y + polygon[0].y);\r\n\t\r\n\t\t\t\t\tarea /= 2;\r\n\t\r\n\t\t\t\t\t// 負値を許さないなら絶対値\r\n\t\t\t\t\tif (!allowNegative) {\r\n\t\t\t\t\t\tarea = Math.abs(area);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn area;\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 面の座標が時計回りかを判定する\r\n\t\t\t * @method loopwise\r\n\t\t\t * @param polygon {vector[]} 面\r\n\t\t\t * @return {number} -1:反時計 0:不定 1:時計\r\n\t\t\t */\r\n\t\t\tloopwise : function(polygon) {\r\n\t\t\t\tvar area = this.area(polygon, true);\r\n\t\r\n\t\t\t\tif (area > 0) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t} else if (area < 0) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 面を時計回りに変換する\r\n\t\t\t * @method convertLoopwise\r\n\t\t\t * @param polygon {vector[]} 面\r\n\t\t\t * @return {vector[]} 時計回りにした面(引数とは別配列にする)\r\n\t\t\t */\r\n\t\t\tconvertLoopwise : function(polygon) {\r\n\t\t\t\tvar ret = polygon.concat();\r\n\t\t\t\tif (this.loopwise(polygon) === -1) {\r\n\t\t\t\t\tret.reverse();\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 重心を求める\r\n\t\t\t * @method gravity2D\r\n\t\t\t * @param polygon {vector[]} 面\r\n\t\t\t * @return {vector} 重心\r\n\t\t\t */\r\n\t\t\tgravity2D : function(polygon) {\r\n\t\t\t\tvar ret = {x : 0, y : 0};\r\n\t\t\t\tpolygon.forEach(function(p) {\r\n\t\t\t\t\tret.x += p.x;\r\n\t\t\t\t\tret.y += p.y;\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\tret.x /= polygon.length;\r\n\t\t\t\tret.y /= polygon.length;\r\n\t\r\n\t\t\t\treturn ret;\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * 同一線分かを判定する\r\n\t\t\t * @method isSameSeg2D\r\n\t\t\t * @param ab {vector[]} 線分ab\r\n\t\t\t * @param cd {vector[]} 線分cd\r\n\t\t\t * @return {bool} 同一であるフラグ\r\n\t\t\t */\r\n\t\t\tisSameSeg2D : function(ab, cd) {\r\n\t\t\t\tif ((this.isSame2D(ab[0], cd[0]) && this.isSame2D(ab[1], cd[1])) ||\r\n\t\t\t\t\t(this.isSame2D(ab[1], cd[0]) && this.isSame2D(ab[0], cd[1]))) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\r\n\t\t\t/**\r\n\t\t\t * ベジェ曲線を直線で近似する\r\n\t\t\t * @method approximateBezier\r\n\t\t\t * @param pointList {vector[]} 制御点リスト\r\n\t\t\t * @param size {number} 分割数(1なら制御点両端のみ)\r\n\t\t\t */\r\n\t\t\tapproximateBezier : function(pointList, size) {\r\n\t\t\t\tvar ret = [];\r\n\t\t\t\tvar i;\r\n\t\t\t\tvar p;\r\n\t\t\t\tvar unitT;\r\n\t\t\t\tvar t;\r\n\t\t\t\tvar c0;\r\n\t\t\t\tvar c1;\r\n\t\t\t\tvar c2;\r\n\t\t\t\tvar c3;\r\n\t\r\n\t\t\t\tif (pointList.length === 3) {\r\n\t\t\t\t\t// ２次ベジェの場合\r\n\t\t\t\t\t// 分割単位\r\n\t\t\t\t\tunitT = 1 / size;\r\n\t\t\t\t\tfor (i = 0; i <= size; i++) {\r\n\t\t\t\t\t\tt = unitT * i;\r\n\t\t\t\t\t\tc0 = this.vecMult2D(pointList[0], (1 - t) * (1 - t));\r\n\t\t\t\t\t\tc1 = this.vecMult2D(pointList[1], 2 * t * (1 - t));\r\n\t\t\t\t\t\tc2 = this.vecMult2D(pointList[2], 2 * t * t);\r\n\t\t\t\t\t\tp = {\r\n\t\t\t\t\t\t\tx : c0.x + c1.x + c2.x,\r\n\t\t\t\t\t\t\ty : c0.y + c1.y + c2.y\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tret.push(p);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (pointList.length === 4) {\r\n\t\t\t\t\t// 3次ベジェの場合\r\n\t\t\t\t\t// 分割単位\r\n\t\t\t\t\tunitT = 1 / size;\r\n\t\t\t\t\tfor (i = 0; i <= size; i++) {\r\n\t\t\t\t\t\tt = unitT * i;\r\n\t\t\t\t\t\tc0 = this.vecMult2D(pointList[0], (1 - t) * (1 - t) * (1 - t));\r\n\t\t\t\t\t\tc1 = this.vecMult2D(pointList[1], 3 * t * (1 - t) * (1 - t));\r\n\t\t\t\t\t\tc2 = this.vecMult2D(pointList[2], 3 * t * t * (1 - t));\r\n\t\t\t\t\t\tc3 = this.vecMult2D(pointList[3], t * t * t);\r\n\t\t\t\t\t\tp = {\r\n\t\t\t\t\t\t\tx : c0.x + c1.x + c2.x + c3.x,\r\n\t\t\t\t\t\t\ty : c0.y + c1.y + c2.y + c3.y\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tret.push(p);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn ret;\r\n\t\t\t},\r\n\t\t};\r\n\t\r\n\t\treturn mathUtil;\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require) {\n\t\t/**\n\t\t * キャンバス処理\n\t\t * @class canvasUtil\n\t\t * @namespace lifeGame.common.canvas\n\t\t * @static\n\t\t */\n\t\tvar ret = {\n\t\t\t/**\n\t\t\t * マウスイベント発生座標取得\n\t\t\t * @method getCursorPoint\n\t\t\t * @param e {} イベント引数\n\t\t\t * @return {x,y} キャンバス上の座標\n\t\t\t */\n\t\t\tgetCursorPoint : function(e) {\n\t\t\t\tvar p = null;\n\t\n\t\t\t\t// jqueryイベントに対応\n\t\t\t\tvar event = e.originalEvent || e;\n\t\n\t\t\t\t// タッチイベントの場合\n\t\t\t\tif (event.touches && event.touches.length > 0) {\n\t\t\t\t\tevent = event.touches[0];\n\t\t\t\t}\n\t\n\t\t\t\tvar rect = event.target.getBoundingClientRect();\n\t\n\t\t\t\t// 要素の位置座標を計算\n\t\t\t\tvar positionX = rect.left + window.pageXOffset;\n\t\t\t\tvar positionY = rect.top + window.pageYOffset;\n\t\n\t\t\t\t// ターゲット上の座標取得\n\t\t\t\tp = {\n\t\t\t\t\tx : event.pageX  - positionX,\n\t\t\t\t\ty : event.pageY  - positionY\n\t\t\t\t};\n\t\n\t\t\t\treturn p;\n\t\t\t},\n\t\t};\n\t\n\t\treturn ret;\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** SlashCanvas2.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 752ec6870fb8be5195ab\n **/","/*!\r\n * SlashCanvas2\r\n * v1.0.0 (c) 2016 miyanokomiya.tokyo\r\n * license MIT\r\n */\r\ndefine(function(require) {\r\n\tvar Matter = require(\"matter\");\r\n\tvar $ = require(\"jquery\");\r\n\r\n\tvar Engine = Matter.Engine,\r\n\t\tRender = Matter.Render,\r\n\t    World = Matter.World,\r\n\t\tBodies = Matter.Bodies,\r\n\t\tBody = Matter.Body,\r\n\t\tSvg = Matter.Svg,\r\n\t\tMouseConstraint = Matter.MouseConstraint;\r\n\r\n\tvar Sound = require(\"common/Sound\");\r\n\tvar Block = require(\"slashCanvas2/model/Block\");\r\n\tvar mathUtil = require(\"common/mathUtil\");\r\n\tvar svgUtil = require(\"common/svgUtil\");\r\n\tvar canvasUtil = require(\"common/canvasUtil\");\r\n\r\n\t/**\r\n\t * スラッシュキャンバス2本体\r\n\t * @class App\r\n\t * @namespace slashCanvas2\r\n\t * @constructor\r\n\t * @param rootDomId {string} 設置先DOMのID\r\n\t * @param option {} オプション\r\n\t */\r\n\tvar Constructor = function(rootDomId, option) {\r\n\t\t/**\r\n\t\t * 設置先DOMのID\r\n\t\t * @property rootDomId\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.rootDomId = rootDomId;\r\n\r\n\t\t/**\r\n\t\t * matterエンジン\r\n\t\t * @property engine\r\n\t\t * @type {Matter.Engine}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.engine = null;\r\n\r\n\t\t/**\r\n\t\t * matterレンダー\r\n\t\t * @property render\r\n\t\t * @type {Matter.Render}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.render = null;\r\n\r\n\t\t/**\r\n\t\t * キャンバスDOM\r\n\t\t * @property canvas\r\n\t\t * @type {}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.canvas = null;\r\n\r\n\t\t/**\r\n\t\t * キャンバスの描画要素\r\n\t\t * @property ctx\r\n\t\t * @type {}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.ctx = null;\r\n\r\n\t\t/**\r\n\t\t * ブロックリスト\r\n\t\t * @property blockList\r\n\t\t * @type {[]}\r\n\t\t * @default []\r\n\t\t */\r\n\t\tthis.blockList = [];\r\n\r\n\t\t/**\r\n\t\t * スラッシュラインリスト<br>\r\n\t\t * オブジェクト{s : 始点, e : 終点, life : 残り生存時間}の配列\r\n\t\t * @property slashLineList\r\n\t\t * @type {[]}\r\n\t\t * @default []\r\n\t\t */\r\n\t\tthis.slashLineList = [];\r\n\r\n\t\t//\r\n\t\t// オプション要素\r\n\t\t//\r\n\r\n\t\tif (!option) {\r\n\t\t\toption = {};\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 幅\r\n\t\t * @property width\r\n\t\t * @type {number}\r\n\t\t * @default 400\r\n\t\t */\r\n\t\tthis.width = option.width || 400;\r\n\r\n\t\t/**\r\n\t\t * 高さ\r\n\t\t * @property height\r\n\t\t * @type {number}\r\n\t\t * @default 400\r\n\t\t */\r\n\t\tthis.height = option.height || 400;\r\n\r\n\t\t/**\r\n\t\t * x軸重力\r\n\t\t * @property gravityX\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.gravityX = !isNaN(option.gravityX) ? option.gravityX : 0;\r\n\r\n\t\t/**\r\n\t\t * y軸重力\r\n\t\t * @property gravityY\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.gravityY = !isNaN(option.gravityY) ? option.gravityY : 0;\r\n\r\n\t\t/**\r\n\t\t * サウンド\r\n\t\t * @property sound\r\n\t\t * @type {slashCanvas.common.Sound}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.sound = option.sound ? new Sound(option.sound) : null;\r\n\r\n\t\t/**\r\n\t\t * SVGソースファイルの場所\r\n\t\t * @property svgSource\r\n\t\t * @type {string}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.svgSource = option.svgSource || null;\r\n\r\n\t\t/**\r\n\t\t * SVGの座標スケール\r\n\t\t * @property svgScale\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.svgScale = option.svgScale || 1;\r\n\r\n\t\t/**\r\n\t\t * SVG座標の移動(スケール調整後に実施)\r\n\t\t * @property svgShift\r\n\t\t * @type {vector}\r\n\t\t * @default {x:0,y:0}\r\n\t\t */\r\n\t\tthis.svgShift = option.svgShift || {x:0,y:0};\r\n\r\n\t\t/**\r\n\t\t * スラッシュ線カラー\r\n\t\t * @property slashLineColor\r\n\t\t * @type {color}\r\n\t\t * @defalut {yellow};\r\n\t\t */\r\n\t\tthis.slashLineColor = option.slashLineColor || \"yellow\";\r\n\r\n\t\t//\r\n\t\t// Blockクラスのオプション\r\n\t\t//\r\n\t\tif (!isNaN(option.slashMovementPower)) {\r\n\t\tBlock.prototype.slashMovementPower = option.slashMovementPower;\r\n\t\t}\r\n\r\n\t\t// 初期化\r\n\t\tthis.init();\r\n\t};\r\n\r\n\t/**\r\n\t * 初期化\r\n\t * @method init\r\n\t */\r\n\tConstructor.prototype.init = function() {\r\n\t\tvar self = this;\r\n\r\n\t\tthis.initWorld();\r\n\r\n\t\t// SVGリソース取得\r\n\t\tvar req = new XMLHttpRequest();\r\n\t\treq.open(\"get\", this.svgSource, true);\r\n\t\treq.onload = function(){\r\n\t\t\tvar dom_parser = new DOMParser();\r\n\t\t\tvar svgDom = null;\r\n\t\t\ttry {\r\n\t\t\t\tsvgDom = dom_parser.parseFromString(req.responseText, \"application/xml\");\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.log(\"This svg resouce is invalid to parse.\");\r\n\t\t\t}\r\n\r\n\t\t\tif (svgDom) {\r\n\t\t\t\tvar tagG = svgDom.getElementsByTagName(\"g\")[0];\r\n\t\t\t\tvar tagPathList = tagG.getElementsByTagName(\"path\");\r\n\t\t\t\tvar tagRectList = tagG.getElementsByTagName(\"rect\");\r\n\r\n\t\t\t\tvar bodyList = [];\r\n\t\t\t\tvar i = 0;\r\n\t\t\t\tvar block = null;\r\n\r\n\t\t\t\tfor (i = 0; i < tagPathList.length; i++) {\r\n\t\t\t\t\tblock = new Block();\r\n\t\t\t\t\tblock.loadSvgPath(tagPathList[i], self.svgScale, self.svgShift);\r\n\r\n\t\t\t\t\tself.blockList.push(block);\r\n\t\t\t\t\tbodyList = bodyList.concat(block.body);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (i = 0; i < tagRectList.length; i++) {\r\n\t\t\t\t\tblock = new Block();\r\n\t\t\t\t\tblock.loadSvgRect(tagRectList[i], self.svgScale, self.svgShift);\r\n\r\n\t\t\t\t\tself.blockList.push(block);\r\n\t\t\t\t\tbodyList = bodyList.concat(block.body);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tWorld.add(self.engine.world, bodyList);\r\n\t\t\t}\r\n\r\n\t\t\tself.bindCanvasEvent(self.render.canvas);\r\n\t\t};\r\n\t\treq.send(null);\r\n\t};\r\n\r\n\t/**\r\n\t * 世界の初期化\r\n\t * @method initWorld\r\n\t */\r\n\tConstructor.prototype.initWorld = function() {\r\n\t\tvar self = this;\r\n\r\n\t\tthis.engine = Engine.create();\r\n\t\tthis.render = Render.create({\r\n\t\t\telement : document.getElementById(this.rootDomId),\r\n\t\t\tengine : this.engine,\r\n\t\t\toptions : {\r\n\t\t\t\twireframes : false\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.engine.world.gravity.x = this.gravityX;\r\n\t\tthis.engine.world.gravity.y = this.gravityY;\r\n\r\n\t\tthis.canvas = this.render.canvas;\r\n\t\tthis.render.canvas.width = this.width;\r\n\t\tthis.render.canvas.height = this.height;\r\n\r\n\t\tthis.resetBodies();\r\n\r\n\t\tEngine.run(this.engine);\r\n\t\tRender.run(this.render);\r\n\r\n\t\t// ステップ後イベントハンドラ\r\n\t\tMatter.Events.on(this.render, \"afterRender\", function(){\r\n\t\t\t// スプライト描画\r\n\t\t\tvar ctx = self.render.canvas.getContext(\"2d\");\r\n\t\t\tself.blockList.forEach(function(block) {\r\n\t\t\t\tblock.onPaint(ctx);\r\n\t\t\t});\r\n\r\n\t\t\tctx.strokeStyle = self.slashLineColor;\r\n\t\t\tctx.globalAlpha = 1;\r\n\t\t\tctx.lineWidth = 2;\r\n\r\n\t\t\t// スラッシュ線描画\r\n\t\t\tself.slashLineList.forEach(function(line) {\r\n\t\t\t\tvar start = line.s;\r\n\t\t\t\tvar end = line.e;\r\n\r\n\t\t\t\tctx.beginPath();\r\n\t\t\t\tctx.moveTo(start.x, start.y);\r\n\t\t\t\tctx.lineTo(end.x, end.y);\r\n\t\t\t\tctx.stroke();\r\n\r\n\t\t\t\tline.life--;\r\n\t\t\t});\r\n\r\n\t\t\t// スラッシュ線削除\r\n\t\t\tself.slashLineList = self.slashLineList.filter(function(line) {\r\n\t\t\t\t// ライフが残っているものだけ回収\r\n\t\t\t\treturn (line.life > 0);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * ボディ作り直し\r\n\t * @method resetBodies\r\n\t */\r\n\tConstructor.prototype.resetBodies = function() {\r\n\t\tvar engine = this.engine;\r\n\r\n\t\tWorld.clear(this.engine.world);\r\n\t\tEngine.clear(this.engine);\r\n\t\t/*\r\n\t\tvar mc = MouseConstraint.create(this.engine, {\r\n\t\t\telement : this.render.canvas\r\n\t\t});\r\n\r\n\t\tWorld.add(this.engine.world, mc);\r\n\t\t*/\r\n\t\t// 矩形で枠線を作る(rectangle(x座標,y座標,横幅,縦幅,option))\r\n\t\tvar frameWidth = this.width;\r\n\t\tvar frameHeight = this.height;\r\n\t\tvar offset = 15;\r\n\r\n\t\tWorld.add(engine.world, [\r\n\t\t\t// 床\r\n\t\t\tBodies.rectangle(\r\n\t\t\t\tframeWidth / 2,\r\n\t\t\t\tframeHeight,\r\n\t\t\t\tframeWidth + 2 * offset,\r\n\t\t\t\toffset,\r\n\t\t\t\t{ isStatic: true}),\r\n\r\n\t\t\t// 天井\r\n\t\t\tBodies.rectangle(\r\n\t\t\t\tframeWidth / 2,\r\n\t\t\t\t0,\r\n\t\t\t\tframeWidth + 2 * offset,\r\n\t\t\t\toffset,\r\n\t\t\t\t{ isStatic: true}),\r\n\r\n\t\t\t// 右壁\r\n\t\t\tBodies.rectangle(\r\n\t\t\t\tframeWidth,\r\n\t\t\t\t0,\r\n\t\t\t\toffset,\r\n\t\t\t\t2 * (frameHeight + 2 * offset),\r\n\t\t\t\t{ isStatic: true}),\r\n\r\n\t\t\t// 左壁\r\n\t\t\tBodies.rectangle(\r\n\t\t\t\t0,\r\n\t\t\t\t0,\r\n\t\t\t\toffset,\r\n\t\t\t\t2 * (frameHeight + 2 * offset),\r\n\t\t\t\t{ isStatic: true})\r\n\t\t]);\r\n\t};\r\n\r\n\t/**\r\n\t * キャンバスへのイベントハンドラ\r\n\t * @method bindCanvasEvent\r\n\t * @param target {} イベントハンドラ設定先\r\n\t */\r\n\tConstructor.prototype.bindCanvasEvent = function(target) {\r\n\t\tvar self = this;\r\n\r\n\t\t// 始点と終点記録用\r\n\t\tvar slash = [];\r\n\r\n\t\tvar length = this.width * this.width + this.height * this.height;\r\n\r\n\t\t$(target).on(\"mousedown touchstart\", function(e) {\r\n\t\t\t// 始点記録\r\n\t\t\tslash.length = 0;\r\n\t\t\tslash[0] = canvasUtil.getCursorPoint(e);\r\n\t\t});\r\n\r\n\t\t$(target).on(\"mousemove touchmove\", function(e) {\r\n\t\t\te.preventDefault();\r\n\r\n\t\t\t// 終点記録\r\n\t\t\tif (slash.length > 0) {\r\n\t\t\t\tslash[1] = canvasUtil.getCursorPoint(e);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$(target).on(\"mouseup touchend touchcancel\", function(e) {\r\n\t\t\tif (slash.length > 1) {\r\n\t\t\t\t// 長さチェック\r\n\t\t\t\tvar vec = mathUtil.vecSub2D(slash[0], slash[1]);\r\n\t\t\t\tvar slashLength = mathUtil.length2D({x:0,y:0}, vec);\r\n\t\t\t\tif (slashLength > 5) {\r\n\t\t\t\t\tif (self.sound) {\r\n\t\t\t\t\t\tself.sound.play();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// ブロック分割\r\n\t\t\t\t\tvar blockList = [];\r\n\t\t\t\t\tself.blockList.forEach(function(block) {\r\n\t\t\t\t\t\tblockList = blockList.concat(block.slash(slash));\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// ボディリセット\r\n\t\t\t\t\tself.resetBodies();\r\n\r\n\t\t\t\t\t// 作り直し\r\n\t\t\t\t\tself.blockList = blockList;\r\n\t\t\t\t\tself.bodyList = [];\r\n\t\t\t\t\tblockList.forEach(function(block) {\r\n\t\t\t\t\t\tself.bodyList.push(block.body);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tWorld.add(self.engine.world, self.bodyList);\r\n\r\n\t\t\t\t\t// スラッシュ線として記録\r\n\t\t\t\t\tvar scale = length / slashLength;\r\n\t\t\t\t\tvec = mathUtil.vecMult2D(vec, scale);\r\n\r\n\t\t\t\t\t// 外接円の半径分拡大\r\n\t\t\t\t\tvar p1 = mathUtil.vecSub2D(slash[0], vec);\r\n\t\t\t\t\tvar p2 = mathUtil.vecAdd2D(slash[1], vec);\r\n\r\n\t\t\t\t\tself.slashLineList.push({s : p1, e : p2, life : 60});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tslash.length = 0;\r\n\t\t});\r\n\t};\r\n\treturn Constructor;\r\n});\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/slashCanvas2/App.js\n ** module id = 0\n ** module chunks = 0\n **/","null\n\n\n/** WEBPACK FOOTER **\n ** src/lib/matter.js\n **/","null\n\n\n/** WEBPACK FOOTER **\n ** src/lib/jquery-2.1.3.min.js\n **/","module.exports = __webpack_amd_options__;\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/amd-options.js\n ** module id = 3\n ** module chunks = 0\n **/","null\n\n\n/** WEBPACK FOOTER **\n ** src/common/Sound.js\n **/","null\n\n\n/** WEBPACK FOOTER **\n ** src/slashCanvas2/model/Block.js\n **/","null\n\n\n/** WEBPACK FOOTER **\n ** src/common/svgUtil.js\n **/","null\n\n\n/** WEBPACK FOOTER **\n ** src/common/mathUtil.js\n **/","null\n\n\n/** WEBPACK FOOTER **\n ** src/common/canvasUtil.js\n **/"],"sourceRoot":""}